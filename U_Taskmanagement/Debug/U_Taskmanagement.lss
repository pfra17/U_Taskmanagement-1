
U_Taskmanagement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00802000  00003954  000039e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000146b  008020a0  008020a0  00003a88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a8  00000000  00000000  00003af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ead0  00000000  00000000  000042a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004faf  00000000  00000000  00012d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004e2f  00000000  00000000  00017d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018d8  00000000  00000000  0001cb50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000577d  00000000  00000000  0001e428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008b7a  00000000  00000000  00023ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000788  00000000  00000000  0002c71f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__ctors_end>
       4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
       8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
       c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      10:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      14:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      18:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      1c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      20:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      24:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      28:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      2c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      30:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      34:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      38:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__vector_14>
      3c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      40:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      44:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      48:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      4c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      50:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      54:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      58:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      5c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      60:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      64:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      68:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      6c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      70:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      74:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      78:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      7c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      80:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      84:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      88:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      8c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      90:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      94:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      98:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      9c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      a0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      a4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      a8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      ac:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      b0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      b4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      b8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      bc:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      c0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      c4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      c8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      cc:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      d0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      d4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      d8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      dc:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      e0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      e4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      e8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      ec:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      f0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      f4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      f8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
      fc:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     100:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     104:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     108:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     10c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     110:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     114:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     118:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     11c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     120:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     124:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     128:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     12c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     130:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     134:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     138:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     13c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     140:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     144:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     148:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     14c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     150:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     154:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     158:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     15c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     160:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     164:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     168:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     16c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     170:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     174:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     178:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     17c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     180:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     184:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     188:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     18c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     190:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     194:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     198:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     19c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1a0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1a4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1a8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1ac:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1b0:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__vector_108>
     1b4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1b8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1bc:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1c0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1c4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1c8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1cc:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1d0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1d4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1d8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1dc:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1e0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1e4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1e8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1ec:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1f0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1f4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1f8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
     1fc:	90 11       	cpse	r25, r0
     1fe:	90 11       	cpse	r25, r0
     200:	90 11       	cpse	r25, r0
     202:	4b 11       	cpse	r20, r11
     204:	cb 11       	cpse	r28, r11
     206:	e2 11       	cpse	r30, r2
     208:	90 11       	cpse	r25, r0
     20a:	90 11       	cpse	r25, r0
     20c:	4b 11       	cpse	r20, r11
     20e:	cb 11       	cpse	r28, r11

00000210 <__trampolines_start>:
     210:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <vDisplayUpdateTask>
     214:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <vLed3Handler>
     218:	0c 94 99 13 	jmp	0x2732	; 0x2732 <vLed7Handler>
     21c:	0c 94 44 12 	jmp	0x2488	; 0x2488 <vLoadKiller>
     220:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <vEventGroupSetBitsCallback>
     224:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <vLed5Handler>
     228:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <vLed8Handler>
     22c:	0c 94 38 09 	jmp	0x1270	; 0x1270 <prvIdleTask>
     230:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <vLed4Handler>
     234:	0c 94 9f 10 	jmp	0x213e	; 0x213e <prvTimerTask>
     238:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <vDisplayManager>
     23c:	0c 94 90 11 	jmp	0x2320	; 0x2320 <prvTimerTask+0x1e2>
     240:	0c 94 3f 13 	jmp	0x267e	; 0x267e <vLed1Handler>
     244:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <prvTimerTask+0x258>
     248:	0c 94 4e 13 	jmp	0x269c	; 0x269c <vLed2Handler>
     24c:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <prvTimerTask+0x286>
     250:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <prvTimerTask+0x158>
     254:	0c 94 45 12 	jmp	0x248a	; 0x248a <vButtonManager>
     258:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <vLed6Handler>

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	cd bf       	out	0x3d, r28	; 61
     264:	df e3       	ldi	r29, 0x3F	; 63
     266:	de bf       	out	0x3e, r29	; 62
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	0c bf       	out	0x3c, r16	; 60

0000026c <init_mem>:
     26c:	eb e0       	ldi	r30, 0x0B	; 11
     26e:	f5 e3       	ldi	r31, 0x35	; 53
     270:	8a ea       	ldi	r24, 0xAA	; 170
     272:	90 e4       	ldi	r25, 0x40	; 64
     274:	81 93       	st	Z+, r24
     276:	e0 30       	cpi	r30, 0x00	; 0
     278:	f9 07       	cpc	r31, r25
     27a:	e0 f3       	brcs	.-8      	; 0x274 <init_mem+0x8>

0000027c <__do_copy_data>:
     27c:	10 e2       	ldi	r17, 0x20	; 32
     27e:	a0 e0       	ldi	r26, 0x00	; 0
     280:	b0 e2       	ldi	r27, 0x20	; 32
     282:	e4 e5       	ldi	r30, 0x54	; 84
     284:	f9 e3       	ldi	r31, 0x39	; 57
     286:	00 e0       	ldi	r16, 0x00	; 0
     288:	0b bf       	out	0x3b, r16	; 59
     28a:	02 c0       	rjmp	.+4      	; 0x290 <__do_copy_data+0x14>
     28c:	07 90       	elpm	r0, Z+
     28e:	0d 92       	st	X+, r0
     290:	a0 3a       	cpi	r26, 0xA0	; 160
     292:	b1 07       	cpc	r27, r17
     294:	d9 f7       	brne	.-10     	; 0x28c <__do_copy_data+0x10>

00000296 <__do_clear_bss>:
     296:	25 e3       	ldi	r18, 0x35	; 53
     298:	a0 ea       	ldi	r26, 0xA0	; 160
     29a:	b0 e2       	ldi	r27, 0x20	; 32
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <.do_clear_bss_start>

0000029e <.do_clear_bss_loop>:
     29e:	1d 92       	st	X+, r1

000002a0 <.do_clear_bss_start>:
     2a0:	ab 30       	cpi	r26, 0x0B	; 11
     2a2:	b2 07       	cpc	r27, r18
     2a4:	e1 f7       	brne	.-8      	; 0x29e <.do_clear_bss_loop>
     2a6:	0e 94 d7 13 	call	0x27ae	; 0x27ae <main>
     2aa:	0c 94 a8 1c 	jmp	0x3950	; 0x3950 <_exit>

000002ae <__bad_interrupt>:
     2ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b2 <initButtons>:
     2b2:	e0 ea       	ldi	r30, 0xA0	; 160
     2b4:	f6 e0       	ldi	r31, 0x06	; 6
     2b6:	80 e1       	ldi	r24, 0x10	; 16
     2b8:	82 83       	std	Z+2, r24	; 0x02
     2ba:	80 e2       	ldi	r24, 0x20	; 32
     2bc:	82 83       	std	Z+2, r24	; 0x02
     2be:	80 e4       	ldi	r24, 0x40	; 64
     2c0:	82 83       	std	Z+2, r24	; 0x02
     2c2:	80 e8       	ldi	r24, 0x80	; 128
     2c4:	82 83       	std	Z+2, r24	; 0x02
     2c6:	08 95       	ret

000002c8 <updateButtons>:
     2c8:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     2cc:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <b1Count.3829>
     2d0:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <b1Count.3829+0x1>
     2d4:	24 fd       	sbrc	r18, 4
     2d6:	0a c0       	rjmp	.+20     	; 0x2ec <updateButtons+0x24>
     2d8:	80 36       	cpi	r24, 0x60	; 96
     2da:	2a ee       	ldi	r18, 0xEA	; 234
     2dc:	92 07       	cpc	r25, r18
     2de:	b8 f4       	brcc	.+46     	; 0x30e <updateButtons+0x46>
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <b1Count.3829>
     2e6:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <b1Count.3829+0x1>
     2ea:	11 c0       	rjmp	.+34     	; 0x30e <updateButtons+0x46>
     2ec:	8b 30       	cpi	r24, 0x0B	; 11
     2ee:	91 05       	cpc	r25, r1
     2f0:	38 f0       	brcs	.+14     	; 0x300 <updateButtons+0x38>
     2f2:	c3 97       	sbiw	r24, 0x33	; 51
     2f4:	18 f0       	brcs	.+6      	; 0x2fc <updateButtons+0x34>
     2f6:	10 92 f0 34 	sts	0x34F0, r1	; 0x8034f0 <b1Status>
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <updateButtons+0x3e>
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <updateButtons+0x3a>
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	80 93 f0 34 	sts	0x34F0, r24	; 0x8034f0 <b1Status>
     306:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <b1Count.3829>
     30a:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <b1Count.3829+0x1>
     30e:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     312:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <b2Count.3830>
     316:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <b2Count.3830+0x1>
     31a:	25 fd       	sbrc	r18, 5
     31c:	0a c0       	rjmp	.+20     	; 0x332 <updateButtons+0x6a>
     31e:	80 36       	cpi	r24, 0x60	; 96
     320:	2a ee       	ldi	r18, 0xEA	; 234
     322:	92 07       	cpc	r25, r18
     324:	b8 f4       	brcc	.+46     	; 0x354 <updateButtons+0x8c>
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	80 93 a4 20 	sts	0x20A4, r24	; 0x8020a4 <b2Count.3830>
     32c:	90 93 a5 20 	sts	0x20A5, r25	; 0x8020a5 <b2Count.3830+0x1>
     330:	11 c0       	rjmp	.+34     	; 0x354 <updateButtons+0x8c>
     332:	8b 30       	cpi	r24, 0x0B	; 11
     334:	91 05       	cpc	r25, r1
     336:	38 f0       	brcs	.+14     	; 0x346 <updateButtons+0x7e>
     338:	c3 97       	sbiw	r24, 0x33	; 51
     33a:	18 f0       	brcs	.+6      	; 0x342 <updateButtons+0x7a>
     33c:	10 92 f1 34 	sts	0x34F1, r1	; 0x8034f1 <b2Status>
     340:	05 c0       	rjmp	.+10     	; 0x34c <updateButtons+0x84>
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	01 c0       	rjmp	.+2      	; 0x348 <updateButtons+0x80>
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	80 93 f1 34 	sts	0x34F1, r24	; 0x8034f1 <b2Status>
     34c:	10 92 a4 20 	sts	0x20A4, r1	; 0x8020a4 <b2Count.3830>
     350:	10 92 a5 20 	sts	0x20A5, r1	; 0x8020a5 <b2Count.3830+0x1>
     354:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     358:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <b3Count.3831>
     35c:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <b3Count.3831+0x1>
     360:	26 fd       	sbrc	r18, 6
     362:	0a c0       	rjmp	.+20     	; 0x378 <updateButtons+0xb0>
     364:	80 36       	cpi	r24, 0x60	; 96
     366:	2a ee       	ldi	r18, 0xEA	; 234
     368:	92 07       	cpc	r25, r18
     36a:	b8 f4       	brcc	.+46     	; 0x39a <updateButtons+0xd2>
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <b3Count.3831>
     372:	90 93 a3 20 	sts	0x20A3, r25	; 0x8020a3 <b3Count.3831+0x1>
     376:	11 c0       	rjmp	.+34     	; 0x39a <updateButtons+0xd2>
     378:	8b 30       	cpi	r24, 0x0B	; 11
     37a:	91 05       	cpc	r25, r1
     37c:	38 f0       	brcs	.+14     	; 0x38c <updateButtons+0xc4>
     37e:	c3 97       	sbiw	r24, 0x33	; 51
     380:	18 f0       	brcs	.+6      	; 0x388 <updateButtons+0xc0>
     382:	10 92 f2 34 	sts	0x34F2, r1	; 0x8034f2 <b3Status>
     386:	05 c0       	rjmp	.+10     	; 0x392 <updateButtons+0xca>
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	01 c0       	rjmp	.+2      	; 0x38e <updateButtons+0xc6>
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	80 93 f2 34 	sts	0x34F2, r24	; 0x8034f2 <b3Status>
     392:	10 92 a2 20 	sts	0x20A2, r1	; 0x8020a2 <b3Count.3831>
     396:	10 92 a3 20 	sts	0x20A3, r1	; 0x8020a3 <b3Count.3831+0x1>
     39a:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     39e:	80 91 a0 20 	lds	r24, 0x20A0	; 0x8020a0 <__data_end>
     3a2:	90 91 a1 20 	lds	r25, 0x20A1	; 0x8020a1 <__data_end+0x1>
     3a6:	27 fd       	sbrc	r18, 7
     3a8:	0a c0       	rjmp	.+20     	; 0x3be <updateButtons+0xf6>
     3aa:	80 36       	cpi	r24, 0x60	; 96
     3ac:	2a ee       	ldi	r18, 0xEA	; 234
     3ae:	92 07       	cpc	r25, r18
     3b0:	b8 f4       	brcc	.+46     	; 0x3e0 <updateButtons+0x118>
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <__data_end>
     3b8:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <__data_end+0x1>
     3bc:	08 95       	ret
     3be:	8b 30       	cpi	r24, 0x0B	; 11
     3c0:	91 05       	cpc	r25, r1
     3c2:	38 f0       	brcs	.+14     	; 0x3d2 <updateButtons+0x10a>
     3c4:	c3 97       	sbiw	r24, 0x33	; 51
     3c6:	18 f0       	brcs	.+6      	; 0x3ce <updateButtons+0x106>
     3c8:	10 92 f3 34 	sts	0x34F3, r1	; 0x8034f3 <b4Status>
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <updateButtons+0x110>
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <updateButtons+0x10c>
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	80 93 f3 34 	sts	0x34F3, r24	; 0x8034f3 <b4Status>
     3d8:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <__data_end>
     3dc:	10 92 a1 20 	sts	0x20A1, r1	; 0x8020a1 <__data_end+0x1>
     3e0:	08 95       	ret

000003e2 <getButtonPress>:
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	59 f0       	breq	.+22     	; 0x3fc <getButtonPress+0x1a>
     3e6:	38 f0       	brcs	.+14     	; 0x3f6 <getButtonPress+0x14>
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	59 f0       	breq	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3ec:	83 30       	cpi	r24, 0x03	; 3
     3ee:	61 f4       	brne	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f0:	80 91 f3 34 	lds	r24, 0x34F3	; 0x8034f3 <b4Status>
     3f4:	08 95       	ret
     3f6:	80 91 f0 34 	lds	r24, 0x34F0	; 0x8034f0 <b1Status>
     3fa:	08 95       	ret
     3fc:	80 91 f1 34 	lds	r24, 0x34F1	; 0x8034f1 <b2Status>
     400:	08 95       	ret
     402:	80 91 f2 34 	lds	r24, 0x34F2	; 0x8034f2 <b3Status>
     406:	08 95       	ret
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	08 95       	ret

0000040c <CCPWrite>:
     40c:	0f 93       	push	r16
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	1f 92       	push	r1
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	2f b7       	in	r18, 0x3f	; 63
     41a:	29 83       	std	Y+1, r18	; 0x01
     41c:	f8 94       	cli
     41e:	1b be       	out	0x3b, r1	; 59
     420:	fc 01       	movw	r30, r24
     422:	08 ed       	ldi	r16, 0xD8	; 216
     424:	04 bf       	out	0x34, r16	; 52
     426:	60 83       	st	Z, r22
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	8f bf       	out	0x3f, r24	; 63
     42c:	0f 90       	pop	r0
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <CLKSYS_XOSC_Config>:
     436:	61 11       	cpse	r22, r1
     438:	02 c0       	rjmp	.+4      	; 0x43e <CLKSYS_XOSC_Config+0x8>
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	01 c0       	rjmp	.+2      	; 0x440 <CLKSYS_XOSC_Config+0xa>
     43e:	90 e2       	ldi	r25, 0x20	; 32
     440:	84 2b       	or	r24, r20
     442:	98 2b       	or	r25, r24
     444:	90 93 52 00 	sts	0x0052, r25	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     448:	08 95       	ret

0000044a <CLKSYS_PLL_Config>:
     44a:	6f 71       	andi	r22, 0x1F	; 31
     44c:	86 2b       	or	r24, r22
     44e:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     452:	08 95       	ret

00000454 <CLKSYS_Disable>:
     454:	e0 e5       	ldi	r30, 0x50	; 80
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	90 81       	ld	r25, Z
     45a:	28 2f       	mov	r18, r24
     45c:	20 95       	com	r18
     45e:	92 23       	and	r25, r18
     460:	90 83       	st	Z, r25
     462:	90 81       	ld	r25, Z
     464:	89 23       	and	r24, r25
     466:	08 95       	ret

00000468 <CLKSYS_Prescalers_Config>:
     468:	68 2b       	or	r22, r24
     46a:	81 e4       	ldi	r24, 0x41	; 65
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0c 94 06 02 	jmp	0x40c	; 0x40c <CCPWrite>

00000472 <CLKSYS_Main_ClockSource_Select>:
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	c8 2f       	mov	r28, r24
     47a:	00 e4       	ldi	r16, 0x40	; 64
     47c:	10 e0       	ldi	r17, 0x00	; 0
     47e:	f8 01       	movw	r30, r16
     480:	60 81       	ld	r22, Z
     482:	68 7f       	andi	r22, 0xF8	; 248
     484:	68 2b       	or	r22, r24
     486:	80 e4       	ldi	r24, 0x40	; 64
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 06 02 	call	0x40c	; 0x40c <CCPWrite>
     48e:	f8 01       	movw	r30, r16
     490:	80 81       	ld	r24, Z
     492:	8c 23       	and	r24, r28
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	08 95       	ret

0000049c <TC0_ConfigClockSource>:
     49c:	fc 01       	movw	r30, r24
     49e:	90 81       	ld	r25, Z
     4a0:	90 7f       	andi	r25, 0xF0	; 240
     4a2:	69 2b       	or	r22, r25
     4a4:	60 83       	st	Z, r22
     4a6:	08 95       	ret

000004a8 <TC0_ConfigWGM>:
     4a8:	fc 01       	movw	r30, r24
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	98 7f       	andi	r25, 0xF8	; 248
     4ae:	69 2b       	or	r22, r25
     4b0:	61 83       	std	Z+1, r22	; 0x01
     4b2:	08 95       	ret

000004b4 <TC0_SetOverflowIntLevel>:
     4b4:	fc 01       	movw	r30, r24
     4b6:	96 81       	ldd	r25, Z+6	; 0x06
     4b8:	9c 7f       	andi	r25, 0xFC	; 252
     4ba:	69 2b       	or	r22, r25
     4bc:	66 83       	std	Z+6, r22	; 0x06
     4be:	08 95       	ret

000004c0 <software_reset>:
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     4c0:	00 00       	nop
     4c2:	88 ed       	ldi	r24, 0xD8	; 216
     4c4:	84 bf       	out	0x34, r24	; 52
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     4cc:	08 95       	ret

000004ce <vApplicationStackOverflowHook>:
     4ce:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <software_reset>

000004d2 <xEventGroupCreate>:
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	80 e1       	ldi	r24, 0x10	; 16
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pvPortMalloc>
     4de:	ec 01       	movw	r28, r24
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	41 f0       	breq	.+16     	; 0x4f4 <xEventGroupCreate+0x22>
     4e4:	fc 01       	movw	r30, r24
     4e6:	11 92       	st	Z+, r1
     4e8:	11 92       	st	Z+, r1
     4ea:	11 92       	st	Z+, r1
     4ec:	11 92       	st	Z+, r1
     4ee:	cf 01       	movw	r24, r30
     4f0:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
     4f4:	ce 01       	movw	r24, r28
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <xEventGroupWaitBits>:
     4fc:	2f 92       	push	r2
     4fe:	3f 92       	push	r3
     500:	4f 92       	push	r4
     502:	5f 92       	push	r5
     504:	6f 92       	push	r6
     506:	7f 92       	push	r7
     508:	8f 92       	push	r8
     50a:	9f 92       	push	r9
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	ec 01       	movw	r28, r24
     522:	4a 01       	movw	r8, r20
     524:	5b 01       	movw	r10, r22
     526:	62 2e       	mov	r6, r18
     528:	70 2e       	mov	r7, r16
     52a:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
     52e:	28 80       	ld	r2, Y
     530:	39 80       	ldd	r3, Y+1	; 0x01
     532:	4a 80       	ldd	r4, Y+2	; 0x02
     534:	5b 80       	ldd	r5, Y+3	; 0x03
     536:	d2 01       	movw	r26, r4
     538:	c1 01       	movw	r24, r2
     53a:	88 21       	and	r24, r8
     53c:	99 21       	and	r25, r9
     53e:	aa 21       	and	r26, r10
     540:	bb 21       	and	r27, r11
     542:	01 11       	cpse	r16, r1
     544:	05 c0       	rjmp	.+10     	; 0x550 <xEventGroupWaitBits+0x54>
     546:	89 2b       	or	r24, r25
     548:	8a 2b       	or	r24, r26
     54a:	8b 2b       	or	r24, r27
     54c:	39 f4       	brne	.+14     	; 0x55c <xEventGroupWaitBits+0x60>
     54e:	59 c0       	rjmp	.+178    	; 0x602 <xEventGroupWaitBits+0x106>
     550:	88 16       	cp	r8, r24
     552:	99 06       	cpc	r9, r25
     554:	aa 06       	cpc	r10, r26
     556:	bb 06       	cpc	r11, r27
     558:	09 f0       	breq	.+2      	; 0x55c <xEventGroupWaitBits+0x60>
     55a:	53 c0       	rjmp	.+166    	; 0x602 <xEventGroupWaitBits+0x106>
     55c:	66 20       	and	r6, r6
     55e:	71 f0       	breq	.+28     	; 0x57c <xEventGroupWaitBits+0x80>
     560:	d5 01       	movw	r26, r10
     562:	c4 01       	movw	r24, r8
     564:	80 95       	com	r24
     566:	90 95       	com	r25
     568:	a0 95       	com	r26
     56a:	b0 95       	com	r27
     56c:	82 21       	and	r24, r2
     56e:	93 21       	and	r25, r3
     570:	a4 21       	and	r26, r4
     572:	b5 21       	and	r27, r5
     574:	88 83       	st	Y, r24
     576:	99 83       	std	Y+1, r25	; 0x01
     578:	aa 83       	std	Y+2, r26	; 0x02
     57a:	bb 83       	std	Y+3, r27	; 0x03
     57c:	c1 2c       	mov	r12, r1
     57e:	d1 2c       	mov	r13, r1
     580:	76 01       	movw	r14, r12
     582:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
     586:	cd 28       	or	r12, r13
     588:	ce 28       	or	r12, r14
     58a:	cf 28       	or	r12, r15
     58c:	09 f4       	brne	.+2      	; 0x590 <xEventGroupWaitBits+0x94>
     58e:	59 c0       	rjmp	.+178    	; 0x642 <xEventGroupWaitBits+0x146>
     590:	81 11       	cpse	r24, r1
     592:	02 c0       	rjmp	.+4      	; 0x598 <xEventGroupWaitBits+0x9c>
     594:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
     598:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <uxTaskResetEventItemValue>
     59c:	91 fd       	sbrc	r25, 1
     59e:	2d c0       	rjmp	.+90     	; 0x5fa <xEventGroupWaitBits+0xfe>
     5a0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     5a4:	ff 93       	push	r31
     5a6:	f8 7f       	andi	r31, 0xF8	; 248
     5a8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     5ac:	68 81       	ld	r22, Y
     5ae:	79 81       	ldd	r23, Y+1	; 0x01
     5b0:	8a 81       	ldd	r24, Y+2	; 0x02
     5b2:	9b 81       	ldd	r25, Y+3	; 0x03
     5b4:	75 01       	movw	r14, r10
     5b6:	64 01       	movw	r12, r8
     5b8:	c6 22       	and	r12, r22
     5ba:	d7 22       	and	r13, r23
     5bc:	e8 22       	and	r14, r24
     5be:	f9 22       	and	r15, r25
     5c0:	71 10       	cpse	r7, r1
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <xEventGroupWaitBits+0xd2>
     5c4:	cd 28       	or	r12, r13
     5c6:	ce 28       	or	r12, r14
     5c8:	cf 28       	or	r12, r15
     5ca:	31 f4       	brne	.+12     	; 0x5d8 <xEventGroupWaitBits+0xdc>
     5cc:	13 c0       	rjmp	.+38     	; 0x5f4 <xEventGroupWaitBits+0xf8>
     5ce:	8c 14       	cp	r8, r12
     5d0:	9d 04       	cpc	r9, r13
     5d2:	ae 04       	cpc	r10, r14
     5d4:	bf 04       	cpc	r11, r15
     5d6:	71 f4       	brne	.+28     	; 0x5f4 <xEventGroupWaitBits+0xf8>
     5d8:	66 20       	and	r6, r6
     5da:	61 f0       	breq	.+24     	; 0x5f4 <xEventGroupWaitBits+0xf8>
     5dc:	80 94       	com	r8
     5de:	90 94       	com	r9
     5e0:	a0 94       	com	r10
     5e2:	b0 94       	com	r11
     5e4:	86 22       	and	r8, r22
     5e6:	97 22       	and	r9, r23
     5e8:	a8 22       	and	r10, r24
     5ea:	b9 22       	and	r11, r25
     5ec:	88 82       	st	Y, r8
     5ee:	99 82       	std	Y+1, r9	; 0x01
     5f0:	aa 82       	std	Y+2, r10	; 0x02
     5f2:	bb 82       	std	Y+3, r11	; 0x03
     5f4:	ff 91       	pop	r31
     5f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     5fa:	1b 01       	movw	r2, r22
     5fc:	2c 01       	movw	r4, r24
     5fe:	55 24       	eor	r5, r5
     600:	20 c0       	rjmp	.+64     	; 0x642 <xEventGroupWaitBits+0x146>
     602:	c1 14       	cp	r12, r1
     604:	d1 04       	cpc	r13, r1
     606:	e1 04       	cpc	r14, r1
     608:	f1 04       	cpc	r15, r1
     60a:	09 f4       	brne	.+2      	; 0x60e <xEventGroupWaitBits+0x112>
     60c:	ba cf       	rjmp	.-140    	; 0x582 <xEventGroupWaitBits+0x86>
     60e:	66 20       	and	r6, r6
     610:	29 f0       	breq	.+10     	; 0x61c <xEventGroupWaitBits+0x120>
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	71 e0       	ldi	r23, 0x01	; 1
     61a:	03 c0       	rjmp	.+6      	; 0x622 <xEventGroupWaitBits+0x126>
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	71 10       	cpse	r7, r1
     624:	74 60       	ori	r23, 0x04	; 4
     626:	48 29       	or	r20, r8
     628:	59 29       	or	r21, r9
     62a:	6a 29       	or	r22, r10
     62c:	7b 29       	or	r23, r11
     62e:	97 01       	movw	r18, r14
     630:	86 01       	movw	r16, r12
     632:	ce 01       	movw	r24, r28
     634:	04 96       	adiw	r24, 0x04	; 4
     636:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <vTaskPlaceOnUnorderedEventList>
     63a:	21 2c       	mov	r2, r1
     63c:	31 2c       	mov	r3, r1
     63e:	21 01       	movw	r4, r2
     640:	a0 cf       	rjmp	.-192    	; 0x582 <xEventGroupWaitBits+0x86>
     642:	c2 01       	movw	r24, r4
     644:	b1 01       	movw	r22, r2
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	bf 90       	pop	r11
     658:	af 90       	pop	r10
     65a:	9f 90       	pop	r9
     65c:	8f 90       	pop	r8
     65e:	7f 90       	pop	r7
     660:	6f 90       	pop	r6
     662:	5f 90       	pop	r5
     664:	4f 90       	pop	r4
     666:	3f 90       	pop	r3
     668:	2f 90       	pop	r2
     66a:	08 95       	ret

0000066c <xEventGroupClearBits>:
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     674:	ff 93       	push	r31
     676:	f8 7f       	andi	r31, 0xF8	; 248
     678:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     67c:	fc 01       	movw	r30, r24
     67e:	00 81       	ld	r16, Z
     680:	11 81       	ldd	r17, Z+1	; 0x01
     682:	22 81       	ldd	r18, Z+2	; 0x02
     684:	33 81       	ldd	r19, Z+3	; 0x03
     686:	40 95       	com	r20
     688:	50 95       	com	r21
     68a:	60 95       	com	r22
     68c:	70 95       	com	r23
     68e:	40 23       	and	r20, r16
     690:	51 23       	and	r21, r17
     692:	62 23       	and	r22, r18
     694:	73 23       	and	r23, r19
     696:	40 83       	st	Z, r20
     698:	51 83       	std	Z+1, r21	; 0x01
     69a:	62 83       	std	Z+2, r22	; 0x02
     69c:	73 83       	std	Z+3, r23	; 0x03
     69e:	ff 91       	pop	r31
     6a0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     6a4:	c9 01       	movw	r24, r18
     6a6:	b8 01       	movw	r22, r16
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	08 95       	ret

000006ae <xEventGroupSetBits>:
     6ae:	2f 92       	push	r2
     6b0:	3f 92       	push	r3
     6b2:	4f 92       	push	r4
     6b4:	5f 92       	push	r5
     6b6:	6f 92       	push	r6
     6b8:	7f 92       	push	r7
     6ba:	8f 92       	push	r8
     6bc:	9f 92       	push	r9
     6be:	af 92       	push	r10
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	ec 01       	movw	r28, r24
     6d4:	6a 01       	movw	r12, r20
     6d6:	7b 01       	movw	r14, r22
     6d8:	8c 01       	movw	r16, r24
     6da:	09 5f       	subi	r16, 0xF9	; 249
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
     6e2:	eb 85       	ldd	r30, Y+11	; 0x0b
     6e4:	fc 85       	ldd	r31, Y+12	; 0x0c
     6e6:	88 81       	ld	r24, Y
     6e8:	99 81       	ldd	r25, Y+1	; 0x01
     6ea:	aa 81       	ldd	r26, Y+2	; 0x02
     6ec:	bb 81       	ldd	r27, Y+3	; 0x03
     6ee:	c8 2a       	or	r12, r24
     6f0:	d9 2a       	or	r13, r25
     6f2:	ea 2a       	or	r14, r26
     6f4:	fb 2a       	or	r15, r27
     6f6:	c8 82       	st	Y, r12
     6f8:	d9 82       	std	Y+1, r13	; 0x01
     6fa:	ea 82       	std	Y+2, r14	; 0x02
     6fc:	fb 82       	std	Y+3, r15	; 0x03
     6fe:	c1 2c       	mov	r12, r1
     700:	d1 2c       	mov	r13, r1
     702:	76 01       	movw	r14, r12
     704:	48 81       	ld	r20, Y
     706:	59 81       	ldd	r21, Y+1	; 0x01
     708:	6a 81       	ldd	r22, Y+2	; 0x02
     70a:	7b 81       	ldd	r23, Y+3	; 0x03
     70c:	e0 17       	cp	r30, r16
     70e:	f1 07       	cpc	r31, r17
     710:	39 f1       	breq	.+78     	; 0x760 <xEventGroupSetBits+0xb2>
     712:	24 80       	ldd	r2, Z+4	; 0x04
     714:	35 80       	ldd	r3, Z+5	; 0x05
     716:	80 80       	ld	r8, Z
     718:	91 80       	ldd	r9, Z+1	; 0x01
     71a:	a2 80       	ldd	r10, Z+2	; 0x02
     71c:	b3 80       	ldd	r11, Z+3	; 0x03
     71e:	d5 01       	movw	r26, r10
     720:	c4 01       	movw	r24, r8
     722:	bb 27       	eor	r27, r27
     724:	2c 01       	movw	r4, r24
     726:	3d 01       	movw	r6, r26
     728:	44 22       	and	r4, r20
     72a:	55 22       	and	r5, r21
     72c:	66 22       	and	r6, r22
     72e:	77 22       	and	r7, r23
     730:	b2 fc       	sbrc	r11, 2
     732:	05 c0       	rjmp	.+10     	; 0x73e <xEventGroupSetBits+0x90>
     734:	45 28       	or	r4, r5
     736:	46 28       	or	r4, r6
     738:	47 28       	or	r4, r7
     73a:	31 f4       	brne	.+12     	; 0x748 <xEventGroupSetBits+0x9a>
     73c:	0f c0       	rjmp	.+30     	; 0x75c <xEventGroupSetBits+0xae>
     73e:	84 15       	cp	r24, r4
     740:	95 05       	cpc	r25, r5
     742:	a6 05       	cpc	r26, r6
     744:	b7 05       	cpc	r27, r7
     746:	51 f4       	brne	.+20     	; 0x75c <xEventGroupSetBits+0xae>
     748:	b0 fe       	sbrs	r11, 0
     74a:	04 c0       	rjmp	.+8      	; 0x754 <xEventGroupSetBits+0xa6>
     74c:	c8 2a       	or	r12, r24
     74e:	d9 2a       	or	r13, r25
     750:	ea 2a       	or	r14, r26
     752:	fb 2a       	or	r15, r27
     754:	72 60       	ori	r23, 0x02	; 2
     756:	cf 01       	movw	r24, r30
     758:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <vTaskRemoveFromUnorderedEventList>
     75c:	f1 01       	movw	r30, r2
     75e:	d2 cf       	rjmp	.-92     	; 0x704 <xEventGroupSetBits+0x56>
     760:	c0 94       	com	r12
     762:	d0 94       	com	r13
     764:	e0 94       	com	r14
     766:	f0 94       	com	r15
     768:	4c 21       	and	r20, r12
     76a:	5d 21       	and	r21, r13
     76c:	6e 21       	and	r22, r14
     76e:	7f 21       	and	r23, r15
     770:	48 83       	st	Y, r20
     772:	59 83       	std	Y+1, r21	; 0x01
     774:	6a 83       	std	Y+2, r22	; 0x02
     776:	7b 83       	std	Y+3, r23	; 0x03
     778:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
     77c:	68 81       	ld	r22, Y
     77e:	79 81       	ldd	r23, Y+1	; 0x01
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	9b 81       	ldd	r25, Y+3	; 0x03
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	9f 90       	pop	r9
     79a:	8f 90       	pop	r8
     79c:	7f 90       	pop	r7
     79e:	6f 90       	pop	r6
     7a0:	5f 90       	pop	r5
     7a2:	4f 90       	pop	r4
     7a4:	3f 90       	pop	r3
     7a6:	2f 90       	pop	r2
     7a8:	08 95       	ret

000007aa <vEventGroupSetBitsCallback>:
     7aa:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <xEventGroupSetBits>

000007ae <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     7b2:	89 01       	movw	r16, r18
     7b4:	9a 01       	movw	r18, r20
     7b6:	ab 01       	movw	r20, r22
     7b8:	bc 01       	movw	r22, r24
     7ba:	85 ed       	ldi	r24, 0xD5	; 213
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	0e 94 e6 11 	call	0x23cc	; 0x23cc <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	08 95       	ret

000007c8 <pvPortMalloc>:
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	8c 01       	movw	r16, r24
     7d2:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
     7d6:	c0 91 a8 20 	lds	r28, 0x20A8	; 0x8020a8 <xNextFreeByte>
     7da:	d0 91 a9 20 	lds	r29, 0x20A9	; 0x8020a9 <xNextFreeByte+0x1>
     7de:	ce 01       	movw	r24, r28
     7e0:	80 0f       	add	r24, r16
     7e2:	91 1f       	adc	r25, r17
     7e4:	88 38       	cpi	r24, 0x88	; 136
     7e6:	23 e1       	ldi	r18, 0x13	; 19
     7e8:	92 07       	cpc	r25, r18
     7ea:	50 f4       	brcc	.+20     	; 0x800 <pvPortMalloc+0x38>
     7ec:	c8 17       	cp	r28, r24
     7ee:	d9 07       	cpc	r29, r25
     7f0:	38 f4       	brcc	.+14     	; 0x800 <pvPortMalloc+0x38>
     7f2:	c6 55       	subi	r28, 0x56	; 86
     7f4:	df 4d       	sbci	r29, 0xDF	; 223
     7f6:	80 93 a8 20 	sts	0x20A8, r24	; 0x8020a8 <xNextFreeByte>
     7fa:	90 93 a9 20 	sts	0x20A9, r25	; 0x8020a9 <xNextFreeByte+0x1>
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <pvPortMalloc+0x3c>
     800:	c0 e0       	ldi	r28, 0x00	; 0
     802:	d0 e0       	ldi	r29, 0x00	; 0
     804:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
     808:	ce 01       	movw	r24, r28
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	08 95       	ret

00000814 <vPortFree>:
     814:	08 95       	ret

00000816 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     816:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     818:	03 96       	adiw	r24, 0x03	; 3
     81a:	81 83       	std	Z+1, r24	; 0x01
     81c:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     81e:	4f ef       	ldi	r20, 0xFF	; 255
     820:	5f ef       	ldi	r21, 0xFF	; 255
     822:	ba 01       	movw	r22, r20
     824:	43 83       	std	Z+3, r20	; 0x03
     826:	54 83       	std	Z+4, r21	; 0x04
     828:	65 83       	std	Z+5, r22	; 0x05
     82a:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     82c:	87 83       	std	Z+7, r24	; 0x07
     82e:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     830:	81 87       	std	Z+9, r24	; 0x09
     832:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     834:	10 82       	st	Z, r1
     836:	08 95       	ret

00000838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     838:	fc 01       	movw	r30, r24
     83a:	12 86       	std	Z+10, r1	; 0x0a
     83c:	13 86       	std	Z+11, r1	; 0x0b
     83e:	08 95       	ret

00000840 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	9c 01       	movw	r18, r24
     846:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     848:	dc 01       	movw	r26, r24
     84a:	11 96       	adiw	r26, 0x01	; 1
     84c:	cd 91       	ld	r28, X+
     84e:	dc 91       	ld	r29, X
     850:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     852:	c4 83       	std	Z+4, r28	; 0x04
     854:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     856:	8e 81       	ldd	r24, Y+6	; 0x06
     858:	9f 81       	ldd	r25, Y+7	; 0x07
     85a:	86 83       	std	Z+6, r24	; 0x06
     85c:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     85e:	8e 81       	ldd	r24, Y+6	; 0x06
     860:	9f 81       	ldd	r25, Y+7	; 0x07
     862:	dc 01       	movw	r26, r24
     864:	14 96       	adiw	r26, 0x04	; 4
     866:	6d 93       	st	X+, r22
     868:	7c 93       	st	X, r23
     86a:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     86c:	6e 83       	std	Y+6, r22	; 0x06
     86e:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     870:	22 87       	std	Z+10, r18	; 0x0a
     872:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     874:	f9 01       	movw	r30, r18
     876:	80 81       	ld	r24, Z
     878:	8f 5f       	subi	r24, 0xFF	; 255
     87a:	80 83       	st	Z, r24
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	7c 01       	movw	r14, r24
     890:	fb 01       	movw	r30, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     892:	40 81       	ld	r20, Z
     894:	51 81       	ldd	r21, Z+1	; 0x01
     896:	62 81       	ldd	r22, Z+2	; 0x02
     898:	73 81       	ldd	r23, Z+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     89a:	4f 3f       	cpi	r20, 0xFF	; 255
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	58 07       	cpc	r21, r24
     8a0:	68 07       	cpc	r22, r24
     8a2:	78 07       	cpc	r23, r24
     8a4:	21 f4       	brne	.+8      	; 0x8ae <vListInsert+0x2c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     8a6:	e7 01       	movw	r28, r14
     8a8:	a9 85       	ldd	r26, Y+9	; 0x09
     8aa:	ba 85       	ldd	r27, Y+10	; 0x0a
     8ac:	12 c0       	rjmp	.+36     	; 0x8d2 <vListInsert+0x50>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8ae:	d7 01       	movw	r26, r14
     8b0:	13 96       	adiw	r26, 0x03	; 3
     8b2:	14 96       	adiw	r26, 0x04	; 4
     8b4:	8d 91       	ld	r24, X+
     8b6:	9c 91       	ld	r25, X
     8b8:	15 97       	sbiw	r26, 0x05	; 5
     8ba:	ec 01       	movw	r28, r24
     8bc:	08 81       	ld	r16, Y
     8be:	19 81       	ldd	r17, Y+1	; 0x01
     8c0:	2a 81       	ldd	r18, Y+2	; 0x02
     8c2:	3b 81       	ldd	r19, Y+3	; 0x03
     8c4:	40 17       	cp	r20, r16
     8c6:	51 07       	cpc	r21, r17
     8c8:	62 07       	cpc	r22, r18
     8ca:	73 07       	cpc	r23, r19
     8cc:	10 f0       	brcs	.+4      	; 0x8d2 <vListInsert+0x50>
     8ce:	dc 01       	movw	r26, r24
     8d0:	f0 cf       	rjmp	.-32     	; 0x8b2 <vListInsert+0x30>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     8d2:	14 96       	adiw	r26, 0x04	; 4
     8d4:	8d 91       	ld	r24, X+
     8d6:	9c 91       	ld	r25, X
     8d8:	15 97       	sbiw	r26, 0x05	; 5
     8da:	84 83       	std	Z+4, r24	; 0x04
     8dc:	95 83       	std	Z+5, r25	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     8de:	ec 01       	movw	r28, r24
     8e0:	ee 83       	std	Y+6, r30	; 0x06
     8e2:	ff 83       	std	Y+7, r31	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     8e4:	a6 83       	std	Z+6, r26	; 0x06
     8e6:	b7 83       	std	Z+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     8e8:	14 96       	adiw	r26, 0x04	; 4
     8ea:	ed 93       	st	X+, r30
     8ec:	fc 93       	st	X, r31
     8ee:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8f0:	e2 86       	std	Z+10, r14	; 0x0a
     8f2:	f3 86       	std	Z+11, r15	; 0x0b

	( pxList->uxNumberOfItems )++;
     8f4:	f7 01       	movw	r30, r14
     8f6:	80 81       	ld	r24, Z
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	80 83       	st	Z, r24
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	ef 90       	pop	r14
     908:	08 95       	ret

0000090a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     910:	a2 85       	ldd	r26, Z+10	; 0x0a
     912:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     914:	84 81       	ldd	r24, Z+4	; 0x04
     916:	95 81       	ldd	r25, Z+5	; 0x05
     918:	26 81       	ldd	r18, Z+6	; 0x06
     91a:	37 81       	ldd	r19, Z+7	; 0x07
     91c:	ec 01       	movw	r28, r24
     91e:	2e 83       	std	Y+6, r18	; 0x06
     920:	3f 83       	std	Y+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     922:	c6 81       	ldd	r28, Z+6	; 0x06
     924:	d7 81       	ldd	r29, Z+7	; 0x07
     926:	8c 83       	std	Y+4, r24	; 0x04
     928:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     92a:	11 96       	adiw	r26, 0x01	; 1
     92c:	8d 91       	ld	r24, X+
     92e:	9c 91       	ld	r25, X
     930:	12 97       	sbiw	r26, 0x02	; 2
     932:	e8 17       	cp	r30, r24
     934:	f9 07       	cpc	r31, r25
     936:	21 f4       	brne	.+8      	; 0x940 <uxListRemove+0x36>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     938:	11 96       	adiw	r26, 0x01	; 1
     93a:	cd 93       	st	X+, r28
     93c:	dc 93       	st	X, r29
     93e:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     940:	12 86       	std	Z+10, r1	; 0x0a
     942:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     944:	8c 91       	ld	r24, X
     946:	81 50       	subi	r24, 0x01	; 1
     948:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     94a:	8c 91       	ld	r24, X
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <_portSetInterruptMaskFromIsr>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     952:	e0 ea       	ldi	r30, 0xA0	; 160
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	82 81       	ldd	r24, Z+2	; 0x02
     958:	92 81       	ldd	r25, Z+2	; 0x02
     95a:	98 7f       	andi	r25, 0xF8	; 248
     95c:	92 83       	std	Z+2, r25	; 0x02
     95e:	08 95       	ret

00000960 <pxPortInitialiseStack>:
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	31 e1       	ldi	r19, 0x11	; 17
     96e:	fc 01       	movw	r30, r24
     970:	30 83       	st	Z, r19
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	22 e2       	ldi	r18, 0x22	; 34
     976:	20 83       	st	Z, r18
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	a3 e3       	ldi	r26, 0x33	; 51
     97c:	a0 83       	st	Z, r26
     97e:	6b 01       	movw	r12, r22
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	60 83       	st	Z, r22
     984:	31 97       	sbiw	r30, 0x01	; 1
     986:	d0 82       	st	Z, r13
     988:	31 97       	sbiw	r30, 0x01	; 1
     98a:	10 82       	st	Z, r1
     98c:	31 97       	sbiw	r30, 0x01	; 1
     98e:	61 e3       	ldi	r22, 0x31	; 49
     990:	60 83       	st	Z, r22
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	60 e8       	ldi	r22, 0x80	; 128
     996:	60 83       	st	Z, r22
     998:	31 97       	sbiw	r30, 0x01	; 1
     99a:	67 e8       	ldi	r22, 0x87	; 135
     99c:	60 83       	st	Z, r22
     99e:	31 97       	sbiw	r30, 0x01	; 1
     9a0:	10 82       	st	Z, r1
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	10 82       	st	Z, r1
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	62 e0       	ldi	r22, 0x02	; 2
     9aa:	60 83       	st	Z, r22
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	63 e0       	ldi	r22, 0x03	; 3
     9b0:	60 83       	st	Z, r22
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	64 e0       	ldi	r22, 0x04	; 4
     9b6:	60 83       	st	Z, r22
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	65 e0       	ldi	r22, 0x05	; 5
     9bc:	60 83       	st	Z, r22
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	66 e0       	ldi	r22, 0x06	; 6
     9c2:	60 83       	st	Z, r22
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	67 e0       	ldi	r22, 0x07	; 7
     9c8:	60 83       	st	Z, r22
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	68 e0       	ldi	r22, 0x08	; 8
     9ce:	60 83       	st	Z, r22
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	69 e0       	ldi	r22, 0x09	; 9
     9d4:	60 83       	st	Z, r22
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	60 e1       	ldi	r22, 0x10	; 16
     9da:	60 83       	st	Z, r22
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	30 83       	st	Z, r19
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	32 e1       	ldi	r19, 0x12	; 18
     9e4:	30 83       	st	Z, r19
     9e6:	31 97       	sbiw	r30, 0x01	; 1
     9e8:	33 e1       	ldi	r19, 0x13	; 19
     9ea:	30 83       	st	Z, r19
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	34 e1       	ldi	r19, 0x14	; 20
     9f0:	30 83       	st	Z, r19
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	35 e1       	ldi	r19, 0x15	; 21
     9f6:	30 83       	st	Z, r19
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	36 e1       	ldi	r19, 0x16	; 22
     9fc:	30 83       	st	Z, r19
     9fe:	31 97       	sbiw	r30, 0x01	; 1
     a00:	37 e1       	ldi	r19, 0x17	; 23
     a02:	30 83       	st	Z, r19
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	38 e1       	ldi	r19, 0x18	; 24
     a08:	30 83       	st	Z, r19
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	39 e1       	ldi	r19, 0x19	; 25
     a0e:	30 83       	st	Z, r19
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	30 e2       	ldi	r19, 0x20	; 32
     a14:	30 83       	st	Z, r19
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	31 e2       	ldi	r19, 0x21	; 33
     a1a:	30 83       	st	Z, r19
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	20 83       	st	Z, r18
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	23 e2       	ldi	r18, 0x23	; 35
     a24:	20 83       	st	Z, r18
     a26:	8a 01       	movw	r16, r20
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	40 83       	st	Z, r20
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	10 83       	st	Z, r17
     a30:	31 97       	sbiw	r30, 0x01	; 1
     a32:	26 e2       	ldi	r18, 0x26	; 38
     a34:	20 83       	st	Z, r18
     a36:	31 97       	sbiw	r30, 0x01	; 1
     a38:	27 e2       	ldi	r18, 0x27	; 39
     a3a:	20 83       	st	Z, r18
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	28 e2       	ldi	r18, 0x28	; 40
     a40:	20 83       	st	Z, r18
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	29 e2       	ldi	r18, 0x29	; 41
     a46:	20 83       	st	Z, r18
     a48:	31 97       	sbiw	r30, 0x01	; 1
     a4a:	20 e3       	ldi	r18, 0x30	; 48
     a4c:	20 83       	st	Z, r18
     a4e:	88 97       	sbiw	r24, 0x28	; 40
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	08 95       	ret

00000a5e <xPortStartScheduler>:
     a5e:	83 ef       	ldi	r24, 0xF3	; 243
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     a66:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     a6a:	65 e0       	ldi	r22, 0x05	; 5
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	98 e0       	ldi	r25, 0x08	; 8
     a70:	0e 94 4e 02 	call	0x49c	; 0x49c <TC0_ConfigClockSource>
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	98 e0       	ldi	r25, 0x08	; 8
     a7a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TC0_SetOverflowIntLevel>
     a7e:	a0 91 a0 34 	lds	r26, 0x34A0	; 0x8034a0 <pxCurrentTCB>
     a82:	b0 91 a1 34 	lds	r27, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
     a86:	0d 90       	ld	r0, X+
     a88:	0d be       	out	0x3d, r0	; 61
     a8a:	0d 90       	ld	r0, X+
     a8c:	0e be       	out	0x3e, r0	; 62
     a8e:	ef 91       	pop	r30
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	bf 91       	pop	r27
     a96:	af 91       	pop	r26
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	7f 91       	pop	r23
     a9e:	6f 91       	pop	r22
     aa0:	5f 91       	pop	r21
     aa2:	4f 91       	pop	r20
     aa4:	3f 91       	pop	r19
     aa6:	2f 91       	pop	r18
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	ff 90       	pop	r15
     aae:	ef 90       	pop	r14
     ab0:	df 90       	pop	r13
     ab2:	cf 90       	pop	r12
     ab4:	bf 90       	pop	r11
     ab6:	af 90       	pop	r10
     ab8:	9f 90       	pop	r9
     aba:	8f 90       	pop	r8
     abc:	7f 90       	pop	r7
     abe:	6f 90       	pop	r6
     ac0:	5f 90       	pop	r5
     ac2:	4f 90       	pop	r4
     ac4:	3f 90       	pop	r3
     ac6:	2f 90       	pop	r2
     ac8:	1f 90       	pop	r1
     aca:	0f 90       	pop	r0
     acc:	ff 91       	pop	r31
     ace:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ad2:	ff 91       	pop	r31
     ad4:	ff bf       	out	0x3f, r31	; 63
     ad6:	ff 91       	pop	r31
     ad8:	08 95       	ret
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	08 95       	ret

00000ade <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     ade:	ff 93       	push	r31
     ae0:	ff b7       	in	r31, 0x3f	; 63
     ae2:	ff 93       	push	r31
     ae4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ae8:	ff 93       	push	r31
     aea:	f8 7f       	andi	r31, 0xF8	; 248
     aec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     af0:	0f 92       	push	r0
     af2:	1f 92       	push	r1
     af4:	11 24       	eor	r1, r1
     af6:	2f 92       	push	r2
     af8:	3f 92       	push	r3
     afa:	4f 92       	push	r4
     afc:	5f 92       	push	r5
     afe:	6f 92       	push	r6
     b00:	7f 92       	push	r7
     b02:	8f 92       	push	r8
     b04:	9f 92       	push	r9
     b06:	af 92       	push	r10
     b08:	bf 92       	push	r11
     b0a:	cf 92       	push	r12
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	2f 93       	push	r18
     b18:	3f 93       	push	r19
     b1a:	4f 93       	push	r20
     b1c:	5f 93       	push	r21
     b1e:	6f 93       	push	r22
     b20:	7f 93       	push	r23
     b22:	8f 93       	push	r24
     b24:	9f 93       	push	r25
     b26:	af 93       	push	r26
     b28:	bf 93       	push	r27
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	ef 93       	push	r30
     b30:	a0 91 a0 34 	lds	r26, 0x34A0	; 0x8034a0 <pxCurrentTCB>
     b34:	b0 91 a1 34 	lds	r27, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
     b38:	0d b6       	in	r0, 0x3d	; 61
     b3a:	0d 92       	st	X+, r0
     b3c:	0e b6       	in	r0, 0x3e	; 62
     b3e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     b40:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b44:	a0 91 a0 34 	lds	r26, 0x34A0	; 0x8034a0 <pxCurrentTCB>
     b48:	b0 91 a1 34 	lds	r27, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
     b4c:	0d 90       	ld	r0, X+
     b4e:	0d be       	out	0x3d, r0	; 61
     b50:	0d 90       	ld	r0, X+
     b52:	0e be       	out	0x3e, r0	; 62
     b54:	ef 91       	pop	r30
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	bf 90       	pop	r11
     b7c:	af 90       	pop	r10
     b7e:	9f 90       	pop	r9
     b80:	8f 90       	pop	r8
     b82:	7f 90       	pop	r7
     b84:	6f 90       	pop	r6
     b86:	5f 90       	pop	r5
     b88:	4f 90       	pop	r4
     b8a:	3f 90       	pop	r3
     b8c:	2f 90       	pop	r2
     b8e:	1f 90       	pop	r1
     b90:	0f 90       	pop	r0
     b92:	ff 91       	pop	r31
     b94:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b98:	ff 91       	pop	r31
     b9a:	ff bf       	out	0x3f, r31	; 63
     b9c:	ff 91       	pop	r31
	asm volatile ( "ret" );
     b9e:	08 95       	ret

00000ba0 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     ba0:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     ba2:	90 91 f4 34 	lds	r25, 0x34F4	; 0x8034f4 <intTaskSwitchPending>
     ba6:	89 2b       	or	r24, r25
     ba8:	80 93 f4 34 	sts	0x34F4, r24	; 0x8034f4 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     bac:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     bb0:	91 30       	cpi	r25, 0x01	; 1
     bb2:	41 f0       	breq	.+16     	; 0xbc4 <portTaskSwitchContext+0x24>
     bb4:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     bb8:	92 30       	cpi	r25, 0x02	; 2
     bba:	21 f0       	breq	.+8      	; 0xbc4 <portTaskSwitchContext+0x24>
     bbc:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     bc0:	94 30       	cpi	r25, 0x04	; 4
     bc2:	59 f4       	brne	.+22     	; 0xbda <portTaskSwitchContext+0x3a>
     bc4:	88 23       	and	r24, r24
     bc6:	49 f0       	breq	.+18     	; 0xbda <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     bc8:	0e 94 a9 04 	call	0x952	; 0x952 <_portSetInterruptMaskFromIsr>
     bcc:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     bce:	10 92 f4 34 	sts	0x34F4, r1	; 0x8034f4 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     bd2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     bd6:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		}                                          					
	}
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     bde:	ff 93       	push	r31
     be0:	ff b7       	in	r31, 0x3f	; 63
     be2:	ff 93       	push	r31
     be4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     be8:	ff 93       	push	r31
     bea:	f8 7f       	andi	r31, 0xF8	; 248
     bec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     bf0:	0f 92       	push	r0
     bf2:	1f 92       	push	r1
     bf4:	11 24       	eor	r1, r1
     bf6:	2f 92       	push	r2
     bf8:	3f 92       	push	r3
     bfa:	4f 92       	push	r4
     bfc:	5f 92       	push	r5
     bfe:	6f 92       	push	r6
     c00:	7f 92       	push	r7
     c02:	8f 92       	push	r8
     c04:	9f 92       	push	r9
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	2f 93       	push	r18
     c18:	3f 93       	push	r19
     c1a:	4f 93       	push	r20
     c1c:	5f 93       	push	r21
     c1e:	6f 93       	push	r22
     c20:	7f 93       	push	r23
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	af 93       	push	r26
     c28:	bf 93       	push	r27
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	ef 93       	push	r30
     c30:	a0 91 a0 34 	lds	r26, 0x34A0	; 0x8034a0 <pxCurrentTCB>
     c34:	b0 91 a1 34 	lds	r27, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
     c38:	0d b6       	in	r0, 0x3d	; 61
     c3a:	0d 92       	st	X+, r0
     c3c:	0e b6       	in	r0, 0x3e	; 62
     c3e:	0d 92       	st	X+, r0
	//
	static void portTaskIncrementTick( void )
	{
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
     c40:	0e 94 a9 04 	call	0x952	; 0x952 <_portSetInterruptMaskFromIsr>
     c44:	c8 2f       	mov	r28, r24
		xTaskIncrementTick();
     c46:	0e 94 9e 0b 	call	0x173c	; 0x173c <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
     c4a:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
		portTaskIncrementTick();
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	0e 94 d0 05 	call	0xba0	; 0xba0 <portTaskSwitchContext>
     c54:	a0 91 a0 34 	lds	r26, 0x34A0	; 0x8034a0 <pxCurrentTCB>
     c58:	b0 91 a1 34 	lds	r27, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
     c5c:	0d 90       	ld	r0, X+
     c5e:	0d be       	out	0x3d, r0	; 61
     c60:	0d 90       	ld	r0, X+
     c62:	0e be       	out	0x3e, r0	; 62
     c64:	ef 91       	pop	r30
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	bf 91       	pop	r27
     c6c:	af 91       	pop	r26
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	7f 91       	pop	r23
     c74:	6f 91       	pop	r22
     c76:	5f 91       	pop	r21
     c78:	4f 91       	pop	r20
     c7a:	3f 91       	pop	r19
     c7c:	2f 91       	pop	r18
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	bf 90       	pop	r11
     c8c:	af 90       	pop	r10
     c8e:	9f 90       	pop	r9
     c90:	8f 90       	pop	r8
     c92:	7f 90       	pop	r7
     c94:	6f 90       	pop	r6
     c96:	5f 90       	pop	r5
     c98:	4f 90       	pop	r4
     c9a:	3f 90       	pop	r3
     c9c:	2f 90       	pop	r2
     c9e:	1f 90       	pop	r1
     ca0:	0f 90       	pop	r0
     ca2:	ff 91       	pop	r31
     ca4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ca8:	ff 91       	pop	r31
     caa:	ff bf       	out	0x3f, r31	; 63
     cac:	ff 91       	pop	r31
     cae:	18 95       	reti

00000cb0 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     cb0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cb4:	ff 93       	push	r31
     cb6:	f8 7f       	andi	r31, 0xF8	; 248
     cb8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cbc:	fc 01       	movw	r30, r24
     cbe:	96 8d       	ldd	r25, Z+30	; 0x1e
     cc0:	ff 91       	pop	r31
     cc2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	91 11       	cpse	r25, r1
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret

00000cce <prvIsQueueFull>:
     cce:	dc 01       	movw	r26, r24
     cd0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cd4:	ff 93       	push	r31
     cd6:	f8 7f       	andi	r31, 0xF8	; 248
     cd8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     cdc:	5e 96       	adiw	r26, 0x1e	; 30
     cde:	9c 91       	ld	r25, X
     ce0:	5e 97       	sbiw	r26, 0x1e	; 30
     ce2:	ff 91       	pop	r31
     ce4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	5f 96       	adiw	r26, 0x1f	; 31
     cec:	2c 91       	ld	r18, X
     cee:	29 13       	cpse	r18, r25
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	08 95       	ret

00000cf4 <prvCopyDataToQueue>:
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ec 01       	movw	r28, r24
     cfe:	04 2f       	mov	r16, r20
     d00:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d02:	48 a1       	ldd	r20, Y+32	; 0x20
     d04:	44 23       	and	r20, r20
     d06:	b1 f1       	breq	.+108    	; 0xd74 <prvCopyDataToQueue+0x80>
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	01 11       	cpse	r16, r1
     d0c:	15 c0       	rjmp	.+42     	; 0xd38 <prvCopyDataToQueue+0x44>
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	9d 81       	ldd	r25, Y+5	; 0x05
     d12:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <memcpy>
     d16:	28 a1       	ldd	r18, Y+32	; 0x20
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	9d 81       	ldd	r25, Y+5	; 0x05
     d1c:	82 0f       	add	r24, r18
     d1e:	91 1d       	adc	r25, r1
     d20:	8c 83       	std	Y+4, r24	; 0x04
     d22:	9d 83       	std	Y+5, r25	; 0x05
     d24:	2a 81       	ldd	r18, Y+2	; 0x02
     d26:	3b 81       	ldd	r19, Y+3	; 0x03
     d28:	82 17       	cp	r24, r18
     d2a:	93 07       	cpc	r25, r19
     d2c:	18 f1       	brcs	.+70     	; 0xd74 <prvCopyDataToQueue+0x80>
     d2e:	88 81       	ld	r24, Y
     d30:	99 81       	ldd	r25, Y+1	; 0x01
     d32:	8c 83       	std	Y+4, r24	; 0x04
     d34:	9d 83       	std	Y+5, r25	; 0x05
     d36:	1e c0       	rjmp	.+60     	; 0xd74 <prvCopyDataToQueue+0x80>
     d38:	8e 81       	ldd	r24, Y+6	; 0x06
     d3a:	9f 81       	ldd	r25, Y+7	; 0x07
     d3c:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <memcpy>
     d40:	88 a1       	ldd	r24, Y+32	; 0x20
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	91 95       	neg	r25
     d46:	81 95       	neg	r24
     d48:	91 09       	sbc	r25, r1
     d4a:	2e 81       	ldd	r18, Y+6	; 0x06
     d4c:	3f 81       	ldd	r19, Y+7	; 0x07
     d4e:	28 0f       	add	r18, r24
     d50:	39 1f       	adc	r19, r25
     d52:	2e 83       	std	Y+6, r18	; 0x06
     d54:	3f 83       	std	Y+7, r19	; 0x07
     d56:	48 81       	ld	r20, Y
     d58:	59 81       	ldd	r21, Y+1	; 0x01
     d5a:	24 17       	cp	r18, r20
     d5c:	35 07       	cpc	r19, r21
     d5e:	30 f4       	brcc	.+12     	; 0xd6c <prvCopyDataToQueue+0x78>
     d60:	2a 81       	ldd	r18, Y+2	; 0x02
     d62:	3b 81       	ldd	r19, Y+3	; 0x03
     d64:	82 0f       	add	r24, r18
     d66:	93 1f       	adc	r25, r19
     d68:	8e 83       	std	Y+6, r24	; 0x06
     d6a:	9f 83       	std	Y+7, r25	; 0x07
     d6c:	02 30       	cpi	r16, 0x02	; 2
     d6e:	11 f4       	brne	.+4      	; 0xd74 <prvCopyDataToQueue+0x80>
     d70:	11 11       	cpse	r17, r1
     d72:	11 50       	subi	r17, 0x01	; 1
     d74:	1f 5f       	subi	r17, 0xFF	; 255
     d76:	1e 8f       	std	Y+30, r17	; 0x1e
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <prvCopyDataFromQueue>:
     d84:	fc 01       	movw	r30, r24
     d86:	cb 01       	movw	r24, r22
     d88:	40 a1       	ldd	r20, Z+32	; 0x20
     d8a:	44 23       	and	r20, r20
     d8c:	a1 f0       	breq	.+40     	; 0xdb6 <prvCopyDataFromQueue+0x32>
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	26 81       	ldd	r18, Z+6	; 0x06
     d92:	37 81       	ldd	r19, Z+7	; 0x07
     d94:	24 0f       	add	r18, r20
     d96:	35 1f       	adc	r19, r21
     d98:	26 83       	std	Z+6, r18	; 0x06
     d9a:	37 83       	std	Z+7, r19	; 0x07
     d9c:	62 81       	ldd	r22, Z+2	; 0x02
     d9e:	73 81       	ldd	r23, Z+3	; 0x03
     da0:	26 17       	cp	r18, r22
     da2:	37 07       	cpc	r19, r23
     da4:	20 f0       	brcs	.+8      	; 0xdae <prvCopyDataFromQueue+0x2a>
     da6:	20 81       	ld	r18, Z
     da8:	31 81       	ldd	r19, Z+1	; 0x01
     daa:	26 83       	std	Z+6, r18	; 0x06
     dac:	37 83       	std	Z+7, r19	; 0x07
     dae:	66 81       	ldd	r22, Z+6	; 0x06
     db0:	77 81       	ldd	r23, Z+7	; 0x07
     db2:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <memcpy>
     db6:	08 95       	ret

00000db8 <prvUnlockQueue>:
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	ec 01       	movw	r28, r24
     dc4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dc8:	ff 93       	push	r31
     dca:	f8 7f       	andi	r31, 0xF8	; 248
     dcc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dd0:	1a a1       	ldd	r17, Y+34	; 0x22
     dd2:	7c 01       	movw	r14, r24
     dd4:	83 e1       	ldi	r24, 0x13	; 19
     dd6:	e8 0e       	add	r14, r24
     dd8:	f1 1c       	adc	r15, r1
     dda:	11 16       	cp	r1, r17
     ddc:	5c f4       	brge	.+22     	; 0xdf4 <prvUnlockQueue+0x3c>
     dde:	8b 89       	ldd	r24, Y+19	; 0x13
     de0:	88 23       	and	r24, r24
     de2:	41 f0       	breq	.+16     	; 0xdf4 <prvUnlockQueue+0x3c>
     de4:	c7 01       	movw	r24, r14
     de6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <xTaskRemoveFromEventList>
     dea:	81 11       	cpse	r24, r1
     dec:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <vTaskMissedYield>
     df0:	11 50       	subi	r17, 0x01	; 1
     df2:	f3 cf       	rjmp	.-26     	; 0xdda <prvUnlockQueue+0x22>
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	8a a3       	std	Y+34, r24	; 0x22
     df8:	ff 91       	pop	r31
     dfa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     dfe:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e02:	ff 93       	push	r31
     e04:	f8 7f       	andi	r31, 0xF8	; 248
     e06:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e0a:	19 a1       	ldd	r17, Y+33	; 0x21
     e0c:	7e 01       	movw	r14, r28
     e0e:	88 e0       	ldi	r24, 0x08	; 8
     e10:	e8 0e       	add	r14, r24
     e12:	f1 1c       	adc	r15, r1
     e14:	11 16       	cp	r1, r17
     e16:	5c f4       	brge	.+22     	; 0xe2e <prvUnlockQueue+0x76>
     e18:	88 85       	ldd	r24, Y+8	; 0x08
     e1a:	88 23       	and	r24, r24
     e1c:	41 f0       	breq	.+16     	; 0xe2e <prvUnlockQueue+0x76>
     e1e:	c7 01       	movw	r24, r14
     e20:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <xTaskRemoveFromEventList>
     e24:	81 11       	cpse	r24, r1
     e26:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <vTaskMissedYield>
     e2a:	11 50       	subi	r17, 0x01	; 1
     e2c:	f3 cf       	rjmp	.-26     	; 0xe14 <prvUnlockQueue+0x5c>
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	89 a3       	std	Y+33, r24	; 0x21
     e32:	ff 91       	pop	r31
     e34:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	08 95       	ret

00000e44 <xQueueGenericReset>:
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
     e4a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e4e:	ff 93       	push	r31
     e50:	f8 7f       	andi	r31, 0xF8	; 248
     e52:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     e56:	28 81       	ld	r18, Y
     e58:	39 81       	ldd	r19, Y+1	; 0x01
     e5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e5c:	48 a1       	ldd	r20, Y+32	; 0x20
     e5e:	94 9f       	mul	r25, r20
     e60:	c0 01       	movw	r24, r0
     e62:	11 24       	eor	r1, r1
     e64:	f9 01       	movw	r30, r18
     e66:	e8 0f       	add	r30, r24
     e68:	f9 1f       	adc	r31, r25
     e6a:	ea 83       	std	Y+2, r30	; 0x02
     e6c:	fb 83       	std	Y+3, r31	; 0x03
     e6e:	1e 8e       	std	Y+30, r1	; 0x1e
     e70:	2c 83       	std	Y+4, r18	; 0x04
     e72:	3d 83       	std	Y+5, r19	; 0x05
     e74:	84 1b       	sub	r24, r20
     e76:	91 09       	sbc	r25, r1
     e78:	82 0f       	add	r24, r18
     e7a:	93 1f       	adc	r25, r19
     e7c:	8e 83       	std	Y+6, r24	; 0x06
     e7e:	9f 83       	std	Y+7, r25	; 0x07
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	89 a3       	std	Y+33, r24	; 0x21
     e84:	8a a3       	std	Y+34, r24	; 0x22
     e86:	61 11       	cpse	r22, r1
     e88:	0c c0       	rjmp	.+24     	; 0xea2 <xQueueGenericReset+0x5e>
     e8a:	88 85       	ldd	r24, Y+8	; 0x08
     e8c:	88 23       	and	r24, r24
     e8e:	89 f0       	breq	.+34     	; 0xeb2 <xQueueGenericReset+0x6e>
     e90:	ce 01       	movw	r24, r28
     e92:	08 96       	adiw	r24, 0x08	; 8
     e94:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <xTaskRemoveFromEventList>
     e98:	88 23       	and	r24, r24
     e9a:	59 f0       	breq	.+22     	; 0xeb2 <xQueueGenericReset+0x6e>
     e9c:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <xQueueGenericReset+0x6e>
     ea2:	ce 01       	movw	r24, r28
     ea4:	08 96       	adiw	r24, 0x08	; 8
     ea6:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
     eaa:	ce 01       	movw	r24, r28
     eac:	43 96       	adiw	r24, 0x13	; 19
     eae:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
     eb2:	ff 91       	pop	r31
     eb4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <xQueueGenericCreate>:
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	08 2f       	mov	r16, r24
     ecc:	16 2f       	mov	r17, r22
     ece:	f4 2e       	mov	r15, r20
     ed0:	66 23       	and	r22, r22
     ed2:	21 f0       	breq	.+8      	; 0xedc <xQueueGenericCreate+0x1c>
     ed4:	86 9f       	mul	r24, r22
     ed6:	c0 01       	movw	r24, r0
     ed8:	11 24       	eor	r1, r1
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <xQueueGenericCreate+0x20>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	85 96       	adiw	r24, 0x25	; 37
     ee2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pvPortMalloc>
     ee6:	ec 01       	movw	r28, r24
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	79 f0       	breq	.+30     	; 0xf0a <xQueueGenericCreate+0x4a>
     eec:	11 11       	cpse	r17, r1
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <xQueueGenericCreate+0x36>
     ef0:	88 83       	st	Y, r24
     ef2:	99 83       	std	Y+1, r25	; 0x01
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <xQueueGenericCreate+0x3c>
     ef6:	85 96       	adiw	r24, 0x25	; 37
     ef8:	88 83       	st	Y, r24
     efa:	99 83       	std	Y+1, r25	; 0x01
     efc:	0f 8f       	std	Y+31, r16	; 0x1f
     efe:	18 a3       	std	Y+32, r17	; 0x20
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	ce 01       	movw	r24, r28
     f04:	0e 94 22 07 	call	0xe44	; 0xe44 <xQueueGenericReset>
     f08:	fc a2       	std	Y+36, r15	; 0x24
     f0a:	ce 01       	movw	r24, r28
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	08 95       	ret

00000f18 <xQueueGenericSend>:
     f18:	af 92       	push	r10
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	29 97       	sbiw	r28, 0x09	; 9
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	7c 01       	movw	r14, r24
     f36:	6b 01       	movw	r12, r22
     f38:	2e 83       	std	Y+6, r18	; 0x06
     f3a:	3f 83       	std	Y+7, r19	; 0x07
     f3c:	48 87       	std	Y+8, r20	; 0x08
     f3e:	59 87       	std	Y+9, r21	; 0x09
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	57 01       	movw	r10, r14
     f44:	98 e0       	ldi	r25, 0x08	; 8
     f46:	a9 0e       	add	r10, r25
     f48:	b1 1c       	adc	r11, r1
     f4a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f4e:	ff 93       	push	r31
     f50:	f8 7f       	andi	r31, 0xF8	; 248
     f52:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f56:	f7 01       	movw	r30, r14
     f58:	26 8d       	ldd	r18, Z+30	; 0x1e
     f5a:	97 8d       	ldd	r25, Z+31	; 0x1f
     f5c:	29 17       	cp	r18, r25
     f5e:	10 f0       	brcs	.+4      	; 0xf64 <xQueueGenericSend+0x4c>
     f60:	02 30       	cpi	r16, 0x02	; 2
     f62:	a9 f4       	brne	.+42     	; 0xf8e <xQueueGenericSend+0x76>
     f64:	40 2f       	mov	r20, r16
     f66:	b6 01       	movw	r22, r12
     f68:	c7 01       	movw	r24, r14
     f6a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <prvCopyDataToQueue>
     f6e:	f7 01       	movw	r30, r14
     f70:	93 89       	ldd	r25, Z+19	; 0x13
     f72:	99 23       	and	r25, r25
     f74:	21 f0       	breq	.+8      	; 0xf7e <xQueueGenericSend+0x66>
     f76:	c7 01       	movw	r24, r14
     f78:	43 96       	adiw	r24, 0x13	; 19
     f7a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <xTaskRemoveFromEventList>
     f7e:	81 11       	cpse	r24, r1
     f80:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
     f84:	ff 91       	pop	r31
     f86:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	57 c0       	rjmp	.+174    	; 0x103c <xQueueGenericSend+0x124>
     f8e:	4e 81       	ldd	r20, Y+6	; 0x06
     f90:	5f 81       	ldd	r21, Y+7	; 0x07
     f92:	68 85       	ldd	r22, Y+8	; 0x08
     f94:	79 85       	ldd	r23, Y+9	; 0x09
     f96:	45 2b       	or	r20, r21
     f98:	46 2b       	or	r20, r22
     f9a:	47 2b       	or	r20, r23
     f9c:	21 f4       	brne	.+8      	; 0xfa6 <xQueueGenericSend+0x8e>
     f9e:	ff 91       	pop	r31
     fa0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fa4:	4a c0       	rjmp	.+148    	; 0x103a <xQueueGenericSend+0x122>
     fa6:	81 11       	cpse	r24, r1
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <xQueueGenericSend+0x9a>
     faa:	ce 01       	movw	r24, r28
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vTaskInternalSetTimeOutState>
     fb2:	ff 91       	pop	r31
     fb4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fb8:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
     fbc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fc0:	ff 93       	push	r31
     fc2:	f8 7f       	andi	r31, 0xF8	; 248
     fc4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fc8:	f7 01       	movw	r30, r14
     fca:	81 a1       	ldd	r24, Z+33	; 0x21
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	09 f4       	brne	.+2      	; 0xfd2 <xQueueGenericSend+0xba>
     fd0:	11 a2       	std	Z+33, r1	; 0x21
     fd2:	f7 01       	movw	r30, r14
     fd4:	82 a1       	ldd	r24, Z+34	; 0x22
     fd6:	8f 3f       	cpi	r24, 0xFF	; 255
     fd8:	09 f4       	brne	.+2      	; 0xfdc <xQueueGenericSend+0xc4>
     fda:	12 a2       	std	Z+34, r1	; 0x22
     fdc:	ff 91       	pop	r31
     fde:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     fe2:	be 01       	movw	r22, r28
     fe4:	6a 5f       	subi	r22, 0xFA	; 250
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <xTaskCheckForTimeOut>
     ff0:	81 11       	cpse	r24, r1
     ff2:	1e c0       	rjmp	.+60     	; 0x1030 <xQueueGenericSend+0x118>
     ff4:	c7 01       	movw	r24, r14
     ff6:	0e 94 67 06 	call	0xcce	; 0xcce <prvIsQueueFull>
     ffa:	88 23       	and	r24, r24
     ffc:	99 f0       	breq	.+38     	; 0x1024 <xQueueGenericSend+0x10c>
     ffe:	4e 81       	ldd	r20, Y+6	; 0x06
    1000:	5f 81       	ldd	r21, Y+7	; 0x07
    1002:	68 85       	ldd	r22, Y+8	; 0x08
    1004:	79 85       	ldd	r23, Y+9	; 0x09
    1006:	c5 01       	movw	r24, r10
    1008:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vTaskPlaceOnEventList>
    100c:	c7 01       	movw	r24, r14
    100e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <prvUnlockQueue>
    1012:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    1016:	88 23       	and	r24, r24
    1018:	11 f0       	breq	.+4      	; 0x101e <xQueueGenericSend+0x106>
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	96 cf       	rjmp	.-212    	; 0xf4a <xQueueGenericSend+0x32>
    101e:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    1022:	fb cf       	rjmp	.-10     	; 0x101a <xQueueGenericSend+0x102>
    1024:	c7 01       	movw	r24, r14
    1026:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <prvUnlockQueue>
    102a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    102e:	f5 cf       	rjmp	.-22     	; 0x101a <xQueueGenericSend+0x102>
    1030:	c7 01       	movw	r24, r14
    1032:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <prvUnlockQueue>
    1036:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	29 96       	adiw	r28, 0x09	; 9
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
    1054:	08 95       	ret

00001056 <xQueueGenericSendFromISR>:
    1056:	af 92       	push	r10
    1058:	bf 92       	push	r11
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	ec 01       	movw	r28, r24
    106a:	5b 01       	movw	r10, r22
    106c:	7a 01       	movw	r14, r20
    106e:	02 2f       	mov	r16, r18
    1070:	0e 94 a9 04 	call	0x952	; 0x952 <_portSetInterruptMaskFromIsr>
    1074:	d8 2e       	mov	r13, r24
    1076:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1078:	8f 8d       	ldd	r24, Y+31	; 0x1f
    107a:	98 17       	cp	r25, r24
    107c:	10 f0       	brcs	.+4      	; 0x1082 <xQueueGenericSendFromISR+0x2c>
    107e:	02 30       	cpi	r16, 0x02	; 2
    1080:	e1 f4       	brne	.+56     	; 0x10ba <xQueueGenericSendFromISR+0x64>
    1082:	1a a1       	ldd	r17, Y+34	; 0x22
    1084:	40 2f       	mov	r20, r16
    1086:	b5 01       	movw	r22, r10
    1088:	ce 01       	movw	r24, r28
    108a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <prvCopyDataToQueue>
    108e:	1f 3f       	cpi	r17, 0xFF	; 255
    1090:	81 f4       	brne	.+32     	; 0x10b2 <xQueueGenericSendFromISR+0x5c>
    1092:	8b 89       	ldd	r24, Y+19	; 0x13
    1094:	88 23       	and	r24, r24
    1096:	79 f0       	breq	.+30     	; 0x10b6 <xQueueGenericSendFromISR+0x60>
    1098:	ce 01       	movw	r24, r28
    109a:	43 96       	adiw	r24, 0x13	; 19
    109c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <xTaskRemoveFromEventList>
    10a0:	88 23       	and	r24, r24
    10a2:	49 f0       	breq	.+18     	; 0x10b6 <xQueueGenericSendFromISR+0x60>
    10a4:	e1 14       	cp	r14, r1
    10a6:	f1 04       	cpc	r15, r1
    10a8:	31 f0       	breq	.+12     	; 0x10b6 <xQueueGenericSendFromISR+0x60>
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	f7 01       	movw	r30, r14
    10ae:	80 83       	st	Z, r24
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <xQueueGenericSendFromISR+0x66>
    10b2:	1f 5f       	subi	r17, 0xFF	; 255
    10b4:	1a a3       	std	Y+34, r17	; 0x22
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <xQueueGenericSendFromISR+0x66>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	d0 92 a2 00 	sts	0x00A2, r13	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	08 95       	ret

000010d4 <xQueueReceive>:
    10d4:	af 92       	push	r10
    10d6:	bf 92       	push	r11
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	29 97       	sbiw	r28, 0x09	; 9
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	8c 01       	movw	r16, r24
    10f2:	6b 01       	movw	r12, r22
    10f4:	2e 83       	std	Y+6, r18	; 0x06
    10f6:	3f 83       	std	Y+7, r19	; 0x07
    10f8:	48 87       	std	Y+8, r20	; 0x08
    10fa:	59 87       	std	Y+9, r21	; 0x09
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	58 01       	movw	r10, r16
    1100:	93 e1       	ldi	r25, 0x13	; 19
    1102:	a9 0e       	add	r10, r25
    1104:	b1 1c       	adc	r11, r1
    1106:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    110a:	ff 93       	push	r31
    110c:	f8 7f       	andi	r31, 0xF8	; 248
    110e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1112:	f8 01       	movw	r30, r16
    1114:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1116:	ff 20       	and	r15, r15
    1118:	b1 f0       	breq	.+44     	; 0x1146 <xQueueReceive+0x72>
    111a:	b6 01       	movw	r22, r12
    111c:	c8 01       	movw	r24, r16
    111e:	0e 94 c2 06 	call	0xd84	; 0xd84 <prvCopyDataFromQueue>
    1122:	fa 94       	dec	r15
    1124:	f8 01       	movw	r30, r16
    1126:	f6 8e       	std	Z+30, r15	; 0x1e
    1128:	80 85       	ldd	r24, Z+8	; 0x08
    112a:	88 23       	and	r24, r24
    112c:	39 f0       	breq	.+14     	; 0x113c <xQueueReceive+0x68>
    112e:	c8 01       	movw	r24, r16
    1130:	08 96       	adiw	r24, 0x08	; 8
    1132:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <xTaskRemoveFromEventList>
    1136:	81 11       	cpse	r24, r1
    1138:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    113c:	ff 91       	pop	r31
    113e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	5c c0       	rjmp	.+184    	; 0x11fe <xQueueReceive+0x12a>
    1146:	4e 81       	ldd	r20, Y+6	; 0x06
    1148:	5f 81       	ldd	r21, Y+7	; 0x07
    114a:	68 85       	ldd	r22, Y+8	; 0x08
    114c:	79 85       	ldd	r23, Y+9	; 0x09
    114e:	45 2b       	or	r20, r21
    1150:	46 2b       	or	r20, r22
    1152:	47 2b       	or	r20, r23
    1154:	21 f4       	brne	.+8      	; 0x115e <xQueueReceive+0x8a>
    1156:	ff 91       	pop	r31
    1158:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    115c:	4f c0       	rjmp	.+158    	; 0x11fc <xQueueReceive+0x128>
    115e:	81 11       	cpse	r24, r1
    1160:	04 c0       	rjmp	.+8      	; 0x116a <xQueueReceive+0x96>
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vTaskInternalSetTimeOutState>
    116a:	ff 91       	pop	r31
    116c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1170:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
    1174:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1178:	ff 93       	push	r31
    117a:	f8 7f       	andi	r31, 0xF8	; 248
    117c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1180:	f8 01       	movw	r30, r16
    1182:	81 a1       	ldd	r24, Z+33	; 0x21
    1184:	8f 3f       	cpi	r24, 0xFF	; 255
    1186:	09 f4       	brne	.+2      	; 0x118a <xQueueReceive+0xb6>
    1188:	11 a2       	std	Z+33, r1	; 0x21
    118a:	f8 01       	movw	r30, r16
    118c:	82 a1       	ldd	r24, Z+34	; 0x22
    118e:	8f 3f       	cpi	r24, 0xFF	; 255
    1190:	09 f4       	brne	.+2      	; 0x1194 <xQueueReceive+0xc0>
    1192:	12 a2       	std	Z+34, r1	; 0x22
    1194:	ff 91       	pop	r31
    1196:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    119a:	be 01       	movw	r22, r28
    119c:	6a 5f       	subi	r22, 0xFA	; 250
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <xTaskCheckForTimeOut>
    11a8:	81 11       	cpse	r24, r1
    11aa:	1e c0       	rjmp	.+60     	; 0x11e8 <xQueueReceive+0x114>
    11ac:	c8 01       	movw	r24, r16
    11ae:	0e 94 58 06 	call	0xcb0	; 0xcb0 <prvIsQueueEmpty>
    11b2:	88 23       	and	r24, r24
    11b4:	99 f0       	breq	.+38     	; 0x11dc <xQueueReceive+0x108>
    11b6:	4e 81       	ldd	r20, Y+6	; 0x06
    11b8:	5f 81       	ldd	r21, Y+7	; 0x07
    11ba:	68 85       	ldd	r22, Y+8	; 0x08
    11bc:	79 85       	ldd	r23, Y+9	; 0x09
    11be:	c5 01       	movw	r24, r10
    11c0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <vTaskPlaceOnEventList>
    11c4:	c8 01       	movw	r24, r16
    11c6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <prvUnlockQueue>
    11ca:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    11ce:	88 23       	and	r24, r24
    11d0:	11 f0       	breq	.+4      	; 0x11d6 <xQueueReceive+0x102>
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	98 cf       	rjmp	.-208    	; 0x1106 <xQueueReceive+0x32>
    11d6:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    11da:	fb cf       	rjmp	.-10     	; 0x11d2 <xQueueReceive+0xfe>
    11dc:	c8 01       	movw	r24, r16
    11de:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <prvUnlockQueue>
    11e2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    11e6:	f5 cf       	rjmp	.-22     	; 0x11d2 <xQueueReceive+0xfe>
    11e8:	c8 01       	movw	r24, r16
    11ea:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <prvUnlockQueue>
    11ee:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    11f2:	c8 01       	movw	r24, r16
    11f4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <prvIsQueueEmpty>
    11f8:	88 23       	and	r24, r24
    11fa:	59 f3       	breq	.-42     	; 0x11d2 <xQueueReceive+0xfe>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	29 96       	adiw	r28, 0x09	; 9
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	bf 90       	pop	r11
    1214:	af 90       	pop	r10
    1216:	08 95       	ret

00001218 <uxQueueMessagesWaiting>:
    1218:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    121c:	ff 93       	push	r31
    121e:	f8 7f       	andi	r31, 0xF8	; 248
    1220:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1224:	fc 01       	movw	r30, r24
    1226:	86 8d       	ldd	r24, Z+30	; 0x1e
    1228:	ff 91       	pop	r31
    122a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    122e:	08 95       	ret

00001230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1236:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    123a:	ff 93       	push	r31
    123c:	f8 7f       	andi	r31, 0xF8	; 248
    123e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1242:	89 a1       	ldd	r24, Y+33	; 0x21
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	09 f4       	brne	.+2      	; 0x124a <vQueueWaitForMessageRestricted+0x1a>
    1248:	19 a2       	std	Y+33, r1	; 0x21
    124a:	8a a1       	ldd	r24, Y+34	; 0x22
    124c:	8f 3f       	cpi	r24, 0xFF	; 255
    124e:	09 f4       	brne	.+2      	; 0x1252 <vQueueWaitForMessageRestricted+0x22>
    1250:	1a a2       	std	Y+34, r1	; 0x22
    1252:	ff 91       	pop	r31
    1254:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1258:	8e 8d       	ldd	r24, Y+30	; 0x1e
    125a:	81 11       	cpse	r24, r1
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    125e:	ce 01       	movw	r24, r28
    1260:	43 96       	adiw	r24, 0x13	; 19
    1262:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1266:	ce 01       	movw	r24, r28
	}
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    126c:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <prvUnlockQueue>

00001270 <prvIdleTask>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    1270:	80 91 74 34 	lds	r24, 0x3474	; 0x803474 <pxReadyTasksLists>
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	10 f0       	brcs	.+4      	; 0x127c <prvIdleTask+0xc>
    1278:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    127c:	0e 94 b7 13 	call	0x276e	; 0x276e <vApplicationIdleHook>
    1280:	f7 cf       	rjmp	.-18     	; 0x1270 <prvIdleTask>

00001282 <prvResetNextTaskUnblockTime>:
    1282:	e0 91 5c 34 	lds	r30, 0x345C	; 0x80345c <pxDelayedTaskList>
    1286:	f0 91 5d 34 	lds	r31, 0x345D	; 0x80345d <pxDelayedTaskList+0x1>
    128a:	80 81       	ld	r24, Z
    128c:	81 11       	cpse	r24, r1
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <prvResetNextTaskUnblockTime+0x16>
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	9f ef       	ldi	r25, 0xFF	; 255
    1294:	dc 01       	movw	r26, r24
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <prvResetNextTaskUnblockTime+0x32>
    1298:	e0 91 5c 34 	lds	r30, 0x345C	; 0x80345c <pxDelayedTaskList>
    129c:	f0 91 5d 34 	lds	r31, 0x345D	; 0x80345d <pxDelayedTaskList+0x1>
    12a0:	07 80       	ldd	r0, Z+7	; 0x07
    12a2:	f0 85       	ldd	r31, Z+8	; 0x08
    12a4:	e0 2d       	mov	r30, r0
    12a6:	00 84       	ldd	r0, Z+8	; 0x08
    12a8:	f1 85       	ldd	r31, Z+9	; 0x09
    12aa:	e0 2d       	mov	r30, r0
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	a4 81       	ldd	r26, Z+4	; 0x04
    12b2:	b5 81       	ldd	r27, Z+5	; 0x05
    12b4:	80 93 35 34 	sts	0x3435, r24	; 0x803435 <xNextTaskUnblockTime>
    12b8:	90 93 36 34 	sts	0x3436, r25	; 0x803436 <xNextTaskUnblockTime+0x1>
    12bc:	a0 93 37 34 	sts	0x3437, r26	; 0x803437 <xNextTaskUnblockTime+0x2>
    12c0:	b0 93 38 34 	sts	0x3438, r27	; 0x803438 <xNextTaskUnblockTime+0x3>
    12c4:	08 95       	ret

000012c6 <prvAddCurrentTaskToDelayedList>:
    12c6:	8f 92       	push	r8
    12c8:	9f 92       	push	r9
    12ca:	af 92       	push	r10
    12cc:	bf 92       	push	r11
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	cf 93       	push	r28
    12d8:	6b 01       	movw	r12, r22
    12da:	7c 01       	movw	r14, r24
    12dc:	c4 2f       	mov	r28, r20
    12de:	80 90 3f 34 	lds	r8, 0x343F	; 0x80343f <xTickCount>
    12e2:	90 90 40 34 	lds	r9, 0x3440	; 0x803440 <xTickCount+0x1>
    12e6:	a0 90 41 34 	lds	r10, 0x3441	; 0x803441 <xTickCount+0x2>
    12ea:	b0 90 42 34 	lds	r11, 0x3442	; 0x803442 <xTickCount+0x3>
    12ee:	80 91 a0 34 	lds	r24, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    12f2:	90 91 a1 34 	lds	r25, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    12f6:	02 96       	adiw	r24, 0x02	; 2
    12f8:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	c8 16       	cp	r12, r24
    1300:	d8 06       	cpc	r13, r24
    1302:	e8 06       	cpc	r14, r24
    1304:	f8 06       	cpc	r15, r24
    1306:	a9 f4       	brne	.+42     	; 0x1332 <prvAddCurrentTaskToDelayedList+0x6c>
    1308:	cc 23       	and	r28, r28
    130a:	99 f0       	breq	.+38     	; 0x1332 <prvAddCurrentTaskToDelayedList+0x6c>
    130c:	60 91 a0 34 	lds	r22, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1310:	70 91 a1 34 	lds	r23, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1314:	6e 5f       	subi	r22, 0xFE	; 254
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	84 e4       	ldi	r24, 0x44	; 68
    131a:	94 e3       	ldi	r25, 0x34	; 52
    131c:	cf 91       	pop	r28
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	df 90       	pop	r13
    1324:	cf 90       	pop	r12
    1326:	bf 90       	pop	r11
    1328:	af 90       	pop	r10
    132a:	9f 90       	pop	r9
    132c:	8f 90       	pop	r8
    132e:	0c 94 20 04 	jmp	0x840	; 0x840 <vListInsertEnd>
    1332:	c8 0c       	add	r12, r8
    1334:	d9 1c       	adc	r13, r9
    1336:	ea 1c       	adc	r14, r10
    1338:	fb 1c       	adc	r15, r11
    133a:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    133e:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1342:	c2 82       	std	Z+2, r12	; 0x02
    1344:	d3 82       	std	Z+3, r13	; 0x03
    1346:	e4 82       	std	Z+4, r14	; 0x04
    1348:	f5 82       	std	Z+5, r15	; 0x05
    134a:	60 91 a0 34 	lds	r22, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    134e:	70 91 a1 34 	lds	r23, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1352:	c8 14       	cp	r12, r8
    1354:	d9 04       	cpc	r13, r9
    1356:	ea 04       	cpc	r14, r10
    1358:	fb 04       	cpc	r15, r11
    135a:	88 f4       	brcc	.+34     	; 0x137e <prvAddCurrentTaskToDelayedList+0xb8>
    135c:	80 91 5a 34 	lds	r24, 0x345A	; 0x80345a <pxOverflowDelayedTaskList>
    1360:	90 91 5b 34 	lds	r25, 0x345B	; 0x80345b <pxOverflowDelayedTaskList+0x1>
    1364:	6e 5f       	subi	r22, 0xFE	; 254
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	cf 91       	pop	r28
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	af 90       	pop	r10
    1376:	9f 90       	pop	r9
    1378:	8f 90       	pop	r8
    137a:	0c 94 41 04 	jmp	0x882	; 0x882 <vListInsert>
    137e:	80 91 5c 34 	lds	r24, 0x345C	; 0x80345c <pxDelayedTaskList>
    1382:	90 91 5d 34 	lds	r25, 0x345D	; 0x80345d <pxDelayedTaskList+0x1>
    1386:	6e 5f       	subi	r22, 0xFE	; 254
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	0e 94 41 04 	call	0x882	; 0x882 <vListInsert>
    138e:	80 91 35 34 	lds	r24, 0x3435	; 0x803435 <xNextTaskUnblockTime>
    1392:	90 91 36 34 	lds	r25, 0x3436	; 0x803436 <xNextTaskUnblockTime+0x1>
    1396:	a0 91 37 34 	lds	r26, 0x3437	; 0x803437 <xNextTaskUnblockTime+0x2>
    139a:	b0 91 38 34 	lds	r27, 0x3438	; 0x803438 <xNextTaskUnblockTime+0x3>
    139e:	c8 16       	cp	r12, r24
    13a0:	d9 06       	cpc	r13, r25
    13a2:	ea 06       	cpc	r14, r26
    13a4:	fb 06       	cpc	r15, r27
    13a6:	40 f4       	brcc	.+16     	; 0x13b8 <prvAddCurrentTaskToDelayedList+0xf2>
    13a8:	c0 92 35 34 	sts	0x3435, r12	; 0x803435 <xNextTaskUnblockTime>
    13ac:	d0 92 36 34 	sts	0x3436, r13	; 0x803436 <xNextTaskUnblockTime+0x1>
    13b0:	e0 92 37 34 	sts	0x3437, r14	; 0x803437 <xNextTaskUnblockTime+0x2>
    13b4:	f0 92 38 34 	sts	0x3438, r15	; 0x803438 <xNextTaskUnblockTime+0x3>
    13b8:	cf 91       	pop	r28
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
    13c2:	bf 90       	pop	r11
    13c4:	af 90       	pop	r10
    13c6:	9f 90       	pop	r9
    13c8:	8f 90       	pop	r8
    13ca:	08 95       	ret

000013cc <xTaskCreate>:
    13cc:	5f 92       	push	r5
    13ce:	6f 92       	push	r6
    13d0:	7f 92       	push	r7
    13d2:	8f 92       	push	r8
    13d4:	9f 92       	push	r9
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	4c 01       	movw	r8, r24
    13ec:	16 2f       	mov	r17, r22
    13ee:	57 2e       	mov	r5, r23
    13f0:	ea 01       	movw	r28, r20
    13f2:	59 01       	movw	r10, r18
    13f4:	ca 01       	movw	r24, r20
    13f6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pvPortMalloc>
    13fa:	6c 01       	movw	r12, r24
    13fc:	89 2b       	or	r24, r25
    13fe:	09 f4       	brne	.+2      	; 0x1402 <xTaskCreate+0x36>
    1400:	ec c0       	rjmp	.+472    	; 0x15da <xTaskCreate+0x20e>
    1402:	84 e3       	ldi	r24, 0x34	; 52
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pvPortMalloc>
    140a:	3c 01       	movw	r6, r24
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	c9 f0       	breq	.+50     	; 0x1442 <xTaskCreate+0x76>
    1410:	dc 01       	movw	r26, r24
    1412:	5b 96       	adiw	r26, 0x1b	; 27
    1414:	cd 92       	st	X+, r12
    1416:	dc 92       	st	X, r13
    1418:	5c 97       	sbiw	r26, 0x1c	; 28
    141a:	ae 01       	movw	r20, r28
    141c:	65 ea       	ldi	r22, 0xA5	; 165
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	c6 01       	movw	r24, r12
    1422:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <memset>
    1426:	21 97       	sbiw	r28, 0x01	; 1
    1428:	f3 01       	movw	r30, r6
    142a:	83 8d       	ldd	r24, Z+27	; 0x1b
    142c:	94 8d       	ldd	r25, Z+28	; 0x1c
    142e:	c8 0f       	add	r28, r24
    1430:	d9 1f       	adc	r29, r25
    1432:	b3 01       	movw	r22, r6
    1434:	63 5e       	subi	r22, 0xE3	; 227
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	e1 2f       	mov	r30, r17
    143a:	f5 2d       	mov	r31, r5
    143c:	cf 01       	movw	r24, r30
    143e:	40 96       	adiw	r24, 0x10	; 16
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <xTaskCreate+0x84>
    1442:	c6 01       	movw	r24, r12
    1444:	0e 94 0a 04 	call	0x814	; 0x814 <vPortFree>
    1448:	c8 c0       	rjmp	.+400    	; 0x15da <xTaskCreate+0x20e>
    144a:	e8 17       	cp	r30, r24
    144c:	f9 07       	cpc	r31, r25
    144e:	49 f0       	breq	.+18     	; 0x1462 <xTaskCreate+0x96>
    1450:	9f 01       	movw	r18, r30
    1452:	41 91       	ld	r20, Z+
    1454:	db 01       	movw	r26, r22
    1456:	4d 93       	st	X+, r20
    1458:	bd 01       	movw	r22, r26
    145a:	d9 01       	movw	r26, r18
    145c:	2c 91       	ld	r18, X
    145e:	21 11       	cpse	r18, r1
    1460:	f4 cf       	rjmp	.-24     	; 0x144a <xTaskCreate+0x7e>
    1462:	f3 01       	movw	r30, r6
    1464:	14 a6       	std	Z+44, r1	; 0x2c
    1466:	04 30       	cpi	r16, 0x04	; 4
    1468:	08 f0       	brcs	.+2      	; 0x146c <xTaskCreate+0xa0>
    146a:	03 e0       	ldi	r16, 0x03	; 3
    146c:	d3 01       	movw	r26, r6
    146e:	5a 96       	adiw	r26, 0x1a	; 26
    1470:	0c 93       	st	X, r16
    1472:	63 01       	movw	r12, r6
    1474:	b2 e0       	ldi	r27, 0x02	; 2
    1476:	cb 0e       	add	r12, r27
    1478:	d1 1c       	adc	r13, r1
    147a:	c6 01       	movw	r24, r12
    147c:	0e 94 1c 04 	call	0x838	; 0x838 <vListInitialiseItem>
    1480:	c3 01       	movw	r24, r6
    1482:	0e 96       	adiw	r24, 0x0e	; 14
    1484:	0e 94 1c 04 	call	0x838	; 0x838 <vListInitialiseItem>
    1488:	f3 01       	movw	r30, r6
    148a:	62 86       	std	Z+10, r6	; 0x0a
    148c:	73 86       	std	Z+11, r7	; 0x0b
    148e:	84 e0       	ldi	r24, 0x04	; 4
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e0       	ldi	r26, 0x00	; 0
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	80 1b       	sub	r24, r16
    1498:	91 09       	sbc	r25, r1
    149a:	a1 09       	sbc	r26, r1
    149c:	b1 09       	sbc	r27, r1
    149e:	86 87       	std	Z+14, r24	; 0x0e
    14a0:	97 87       	std	Z+15, r25	; 0x0f
    14a2:	a0 8b       	std	Z+16, r26	; 0x10
    14a4:	b1 8b       	std	Z+17, r27	; 0x11
    14a6:	66 8a       	std	Z+22, r6	; 0x16
    14a8:	77 8a       	std	Z+23, r7	; 0x17
    14aa:	17 a6       	std	Z+47, r1	; 0x2f
    14ac:	10 aa       	std	Z+48, r1	; 0x30
    14ae:	11 aa       	std	Z+49, r1	; 0x31
    14b0:	12 aa       	std	Z+50, r1	; 0x32
    14b2:	13 aa       	std	Z+51, r1	; 0x33
    14b4:	a5 01       	movw	r20, r10
    14b6:	b4 01       	movw	r22, r8
    14b8:	ce 01       	movw	r24, r28
    14ba:	0e 94 b0 04 	call	0x960	; 0x960 <pxPortInitialiseStack>
    14be:	f3 01       	movw	r30, r6
    14c0:	80 83       	st	Z, r24
    14c2:	91 83       	std	Z+1, r25	; 0x01
    14c4:	e1 14       	cp	r14, r1
    14c6:	f1 04       	cpc	r15, r1
    14c8:	19 f0       	breq	.+6      	; 0x14d0 <xTaskCreate+0x104>
    14ca:	d7 01       	movw	r26, r14
    14cc:	6d 92       	st	X+, r6
    14ce:	7c 92       	st	X, r7
    14d0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14d4:	ff 93       	push	r31
    14d6:	f8 7f       	andi	r31, 0xF8	; 248
    14d8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14dc:	80 91 43 34 	lds	r24, 0x3443	; 0x803443 <uxCurrentNumberOfTasks>
    14e0:	8f 5f       	subi	r24, 0xFF	; 255
    14e2:	80 93 43 34 	sts	0x3443, r24	; 0x803443 <uxCurrentNumberOfTasks>
    14e6:	80 91 a0 34 	lds	r24, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    14ea:	90 91 a1 34 	lds	r25, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    14ee:	89 2b       	or	r24, r25
    14f0:	a9 f5       	brne	.+106    	; 0x155c <xTaskCreate+0x190>
    14f2:	60 92 a0 34 	sts	0x34A0, r6	; 0x8034a0 <pxCurrentTCB>
    14f6:	70 92 a1 34 	sts	0x34A1, r7	; 0x8034a1 <pxCurrentTCB+0x1>
    14fa:	80 91 43 34 	lds	r24, 0x3443	; 0x803443 <uxCurrentNumberOfTasks>
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	f1 f5       	brne	.+124    	; 0x157e <xTaskCreate+0x1b2>
    1502:	84 e7       	ldi	r24, 0x74	; 116
    1504:	94 e3       	ldi	r25, 0x34	; 52
    1506:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    150a:	8f e7       	ldi	r24, 0x7F	; 127
    150c:	94 e3       	ldi	r25, 0x34	; 52
    150e:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    1512:	8a e8       	ldi	r24, 0x8A	; 138
    1514:	94 e3       	ldi	r25, 0x34	; 52
    1516:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    151a:	85 e9       	ldi	r24, 0x95	; 149
    151c:	94 e3       	ldi	r25, 0x34	; 52
    151e:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    1522:	89 e6       	ldi	r24, 0x69	; 105
    1524:	94 e3       	ldi	r25, 0x34	; 52
    1526:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    152a:	8e e5       	ldi	r24, 0x5E	; 94
    152c:	94 e3       	ldi	r25, 0x34	; 52
    152e:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    1532:	8f e4       	ldi	r24, 0x4F	; 79
    1534:	94 e3       	ldi	r25, 0x34	; 52
    1536:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    153a:	84 e4       	ldi	r24, 0x44	; 68
    153c:	94 e3       	ldi	r25, 0x34	; 52
    153e:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    1542:	89 e6       	ldi	r24, 0x69	; 105
    1544:	94 e3       	ldi	r25, 0x34	; 52
    1546:	80 93 5c 34 	sts	0x345C, r24	; 0x80345c <pxDelayedTaskList>
    154a:	90 93 5d 34 	sts	0x345D, r25	; 0x80345d <pxDelayedTaskList+0x1>
    154e:	8e e5       	ldi	r24, 0x5E	; 94
    1550:	94 e3       	ldi	r25, 0x34	; 52
    1552:	80 93 5a 34 	sts	0x345A, r24	; 0x80345a <pxOverflowDelayedTaskList>
    1556:	90 93 5b 34 	sts	0x345B, r25	; 0x80345b <pxOverflowDelayedTaskList+0x1>
    155a:	11 c0       	rjmp	.+34     	; 0x157e <xTaskCreate+0x1b2>
    155c:	80 91 3d 34 	lds	r24, 0x343D	; 0x80343d <xSchedulerRunning>
    1560:	81 11       	cpse	r24, r1
    1562:	0d c0       	rjmp	.+26     	; 0x157e <xTaskCreate+0x1b2>
    1564:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1568:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    156c:	92 8d       	ldd	r25, Z+26	; 0x1a
    156e:	f3 01       	movw	r30, r6
    1570:	82 8d       	ldd	r24, Z+26	; 0x1a
    1572:	89 17       	cp	r24, r25
    1574:	20 f0       	brcs	.+8      	; 0x157e <xTaskCreate+0x1b2>
    1576:	60 92 a0 34 	sts	0x34A0, r6	; 0x8034a0 <pxCurrentTCB>
    157a:	70 92 a1 34 	sts	0x34A1, r7	; 0x8034a1 <pxCurrentTCB+0x1>
    157e:	80 91 39 34 	lds	r24, 0x3439	; 0x803439 <uxTaskNumber>
    1582:	8f 5f       	subi	r24, 0xFF	; 255
    1584:	80 93 39 34 	sts	0x3439, r24	; 0x803439 <uxTaskNumber>
    1588:	d3 01       	movw	r26, r6
    158a:	9d 96       	adiw	r26, 0x2d	; 45
    158c:	8c 93       	st	X, r24
    158e:	9d 97       	sbiw	r26, 0x2d	; 45
    1590:	5a 96       	adiw	r26, 0x1a	; 26
    1592:	8c 91       	ld	r24, X
    1594:	90 91 3e 34 	lds	r25, 0x343E	; 0x80343e <uxTopReadyPriority>
    1598:	98 17       	cp	r25, r24
    159a:	10 f4       	brcc	.+4      	; 0x15a0 <xTaskCreate+0x1d4>
    159c:	80 93 3e 34 	sts	0x343E, r24	; 0x80343e <uxTopReadyPriority>
    15a0:	bb e0       	ldi	r27, 0x0B	; 11
    15a2:	8b 9f       	mul	r24, r27
    15a4:	c0 01       	movw	r24, r0
    15a6:	11 24       	eor	r1, r1
    15a8:	b6 01       	movw	r22, r12
    15aa:	8c 58       	subi	r24, 0x8C	; 140
    15ac:	9b 4c       	sbci	r25, 0xCB	; 203
    15ae:	0e 94 20 04 	call	0x840	; 0x840 <vListInsertEnd>
    15b2:	ff 91       	pop	r31
    15b4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    15b8:	80 91 3d 34 	lds	r24, 0x343D	; 0x80343d <xSchedulerRunning>
    15bc:	88 23       	and	r24, r24
    15be:	59 f0       	breq	.+22     	; 0x15d6 <xTaskCreate+0x20a>
    15c0:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    15c4:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    15c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    15ca:	f3 01       	movw	r30, r6
    15cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    15ce:	98 17       	cp	r25, r24
    15d0:	10 f4       	brcc	.+4      	; 0x15d6 <xTaskCreate+0x20a>
    15d2:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <xTaskCreate+0x210>
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	df 90       	pop	r13
    15ea:	cf 90       	pop	r12
    15ec:	bf 90       	pop	r11
    15ee:	af 90       	pop	r10
    15f0:	9f 90       	pop	r9
    15f2:	8f 90       	pop	r8
    15f4:	7f 90       	pop	r7
    15f6:	6f 90       	pop	r6
    15f8:	5f 90       	pop	r5
    15fa:	08 95       	ret

000015fc <vTaskResume>:
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	09 f4       	brne	.+2      	; 0x160a <vTaskResume+0xe>
    1608:	41 c0       	rjmp	.+130    	; 0x168c <vTaskResume+0x90>
    160a:	20 91 a0 34 	lds	r18, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    160e:	30 91 a1 34 	lds	r19, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1612:	82 17       	cp	r24, r18
    1614:	93 07       	cpc	r25, r19
    1616:	09 f4       	brne	.+2      	; 0x161a <vTaskResume+0x1e>
    1618:	39 c0       	rjmp	.+114    	; 0x168c <vTaskResume+0x90>
    161a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    161e:	ff 93       	push	r31
    1620:	f8 7f       	andi	r31, 0xF8	; 248
    1622:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1626:	fc 01       	movw	r30, r24
    1628:	24 85       	ldd	r18, Z+12	; 0x0c
    162a:	35 85       	ldd	r19, Z+13	; 0x0d
    162c:	24 54       	subi	r18, 0x44	; 68
    162e:	34 43       	sbci	r19, 0x34	; 52
    1630:	51 f5       	brne	.+84     	; 0x1686 <vTaskResume+0x8a>
    1632:	fc 01       	movw	r30, r24
    1634:	20 8d       	ldd	r18, Z+24	; 0x18
    1636:	31 8d       	ldd	r19, Z+25	; 0x19
    1638:	f4 e3       	ldi	r31, 0x34	; 52
    163a:	2f 34       	cpi	r18, 0x4F	; 79
    163c:	3f 07       	cpc	r19, r31
    163e:	19 f1       	breq	.+70     	; 0x1686 <vTaskResume+0x8a>
    1640:	23 2b       	or	r18, r19
    1642:	09 f5       	brne	.+66     	; 0x1686 <vTaskResume+0x8a>
    1644:	ec 01       	movw	r28, r24
    1646:	8c 01       	movw	r16, r24
    1648:	0e 5f       	subi	r16, 0xFE	; 254
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	c8 01       	movw	r24, r16
    164e:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    1652:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1654:	90 91 3e 34 	lds	r25, 0x343E	; 0x80343e <uxTopReadyPriority>
    1658:	98 17       	cp	r25, r24
    165a:	10 f4       	brcc	.+4      	; 0x1660 <vTaskResume+0x64>
    165c:	80 93 3e 34 	sts	0x343E, r24	; 0x80343e <uxTopReadyPriority>
    1660:	2b e0       	ldi	r18, 0x0B	; 11
    1662:	82 9f       	mul	r24, r18
    1664:	c0 01       	movw	r24, r0
    1666:	11 24       	eor	r1, r1
    1668:	b8 01       	movw	r22, r16
    166a:	8c 58       	subi	r24, 0x8C	; 140
    166c:	9b 4c       	sbci	r25, 0xCB	; 203
    166e:	0e 94 20 04 	call	0x840	; 0x840 <vListInsertEnd>
    1672:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1676:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    167a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    167c:	82 8d       	ldd	r24, Z+26	; 0x1a
    167e:	98 17       	cp	r25, r24
    1680:	10 f0       	brcs	.+4      	; 0x1686 <vTaskResume+0x8a>
    1682:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    1686:	ff 91       	pop	r31
    1688:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	08 95       	ret

00001696 <vTaskStartScheduler>:
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	83 e3       	ldi	r24, 0x33	; 51
    169e:	e8 2e       	mov	r14, r24
    16a0:	84 e3       	ldi	r24, 0x34	; 52
    16a2:	f8 2e       	mov	r15, r24
    16a4:	00 e0       	ldi	r16, 0x00	; 0
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	48 ec       	ldi	r20, 0xC8	; 200
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	70 e2       	ldi	r23, 0x20	; 32
    16b2:	88 e3       	ldi	r24, 0x38	; 56
    16b4:	99 e0       	ldi	r25, 0x09	; 9
    16b6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	19 f5       	brne	.+70     	; 0x1704 <vTaskStartScheduler+0x6e>
    16be:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <xTimerCreateTimerTask>
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	f9 f4       	brne	.+62     	; 0x1704 <vTaskStartScheduler+0x6e>
    16c6:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16ca:	98 7f       	andi	r25, 0xF8	; 248
    16cc:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    16d0:	4f ef       	ldi	r20, 0xFF	; 255
    16d2:	5f ef       	ldi	r21, 0xFF	; 255
    16d4:	ba 01       	movw	r22, r20
    16d6:	40 93 35 34 	sts	0x3435, r20	; 0x803435 <xNextTaskUnblockTime>
    16da:	50 93 36 34 	sts	0x3436, r21	; 0x803436 <xNextTaskUnblockTime+0x1>
    16de:	60 93 37 34 	sts	0x3437, r22	; 0x803437 <xNextTaskUnblockTime+0x2>
    16e2:	70 93 38 34 	sts	0x3438, r23	; 0x803438 <xNextTaskUnblockTime+0x3>
    16e6:	80 93 3d 34 	sts	0x343D, r24	; 0x80343d <xSchedulerRunning>
    16ea:	10 92 3f 34 	sts	0x343F, r1	; 0x80343f <xTickCount>
    16ee:	10 92 40 34 	sts	0x3440, r1	; 0x803440 <xTickCount+0x1>
    16f2:	10 92 41 34 	sts	0x3441, r1	; 0x803441 <xTickCount+0x2>
    16f6:	10 92 42 34 	sts	0x3442, r1	; 0x803442 <xTickCount+0x3>
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <xPortStartScheduler>
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	08 95       	ret

0000170c <vTaskSuspendAll>:
    170c:	80 91 32 34 	lds	r24, 0x3432	; 0x803432 <uxSchedulerSuspended>
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	80 93 32 34 	sts	0x3432, r24	; 0x803432 <uxSchedulerSuspended>
    1716:	08 95       	ret

00001718 <xTaskGetTickCount>:
    1718:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    171c:	ff 93       	push	r31
    171e:	f8 7f       	andi	r31, 0xF8	; 248
    1720:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1724:	60 91 3f 34 	lds	r22, 0x343F	; 0x80343f <xTickCount>
    1728:	70 91 40 34 	lds	r23, 0x3440	; 0x803440 <xTickCount+0x1>
    172c:	80 91 41 34 	lds	r24, 0x3441	; 0x803441 <xTickCount+0x2>
    1730:	90 91 42 34 	lds	r25, 0x3442	; 0x803442 <xTickCount+0x3>
    1734:	ff 91       	pop	r31
    1736:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    173a:	08 95       	ret

0000173c <xTaskIncrementTick>:
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	80 91 32 34 	lds	r24, 0x3432	; 0x803432 <uxSchedulerSuspended>
    1754:	81 11       	cpse	r24, r1
    1756:	a7 c0       	rjmp	.+334    	; 0x18a6 <xTaskIncrementTick+0x16a>
    1758:	c0 90 3f 34 	lds	r12, 0x343F	; 0x80343f <xTickCount>
    175c:	d0 90 40 34 	lds	r13, 0x3440	; 0x803440 <xTickCount+0x1>
    1760:	e0 90 41 34 	lds	r14, 0x3441	; 0x803441 <xTickCount+0x2>
    1764:	f0 90 42 34 	lds	r15, 0x3442	; 0x803442 <xTickCount+0x3>
    1768:	8f ef       	ldi	r24, 0xFF	; 255
    176a:	c8 1a       	sub	r12, r24
    176c:	d8 0a       	sbc	r13, r24
    176e:	e8 0a       	sbc	r14, r24
    1770:	f8 0a       	sbc	r15, r24
    1772:	c0 92 3f 34 	sts	0x343F, r12	; 0x80343f <xTickCount>
    1776:	d0 92 40 34 	sts	0x3440, r13	; 0x803440 <xTickCount+0x1>
    177a:	e0 92 41 34 	sts	0x3441, r14	; 0x803441 <xTickCount+0x2>
    177e:	f0 92 42 34 	sts	0x3442, r15	; 0x803442 <xTickCount+0x3>
    1782:	c1 14       	cp	r12, r1
    1784:	d1 04       	cpc	r13, r1
    1786:	e1 04       	cpc	r14, r1
    1788:	f1 04       	cpc	r15, r1
    178a:	b9 f4       	brne	.+46     	; 0x17ba <xTaskIncrementTick+0x7e>
    178c:	80 91 5c 34 	lds	r24, 0x345C	; 0x80345c <pxDelayedTaskList>
    1790:	90 91 5d 34 	lds	r25, 0x345D	; 0x80345d <pxDelayedTaskList+0x1>
    1794:	20 91 5a 34 	lds	r18, 0x345A	; 0x80345a <pxOverflowDelayedTaskList>
    1798:	30 91 5b 34 	lds	r19, 0x345B	; 0x80345b <pxOverflowDelayedTaskList+0x1>
    179c:	20 93 5c 34 	sts	0x345C, r18	; 0x80345c <pxDelayedTaskList>
    17a0:	30 93 5d 34 	sts	0x345D, r19	; 0x80345d <pxDelayedTaskList+0x1>
    17a4:	80 93 5a 34 	sts	0x345A, r24	; 0x80345a <pxOverflowDelayedTaskList>
    17a8:	90 93 5b 34 	sts	0x345B, r25	; 0x80345b <pxOverflowDelayedTaskList+0x1>
    17ac:	80 91 3a 34 	lds	r24, 0x343A	; 0x80343a <xNumOfOverflows>
    17b0:	8f 5f       	subi	r24, 0xFF	; 255
    17b2:	80 93 3a 34 	sts	0x343A, r24	; 0x80343a <xNumOfOverflows>
    17b6:	0e 94 41 09 	call	0x1282	; 0x1282 <prvResetNextTaskUnblockTime>
    17ba:	80 91 35 34 	lds	r24, 0x3435	; 0x803435 <xNextTaskUnblockTime>
    17be:	90 91 36 34 	lds	r25, 0x3436	; 0x803436 <xNextTaskUnblockTime+0x1>
    17c2:	a0 91 37 34 	lds	r26, 0x3437	; 0x803437 <xNextTaskUnblockTime+0x2>
    17c6:	b0 91 38 34 	lds	r27, 0x3438	; 0x803438 <xNextTaskUnblockTime+0x3>
    17ca:	c0 e0       	ldi	r28, 0x00	; 0
    17cc:	c8 16       	cp	r12, r24
    17ce:	d9 06       	cpc	r13, r25
    17d0:	ea 06       	cpc	r14, r26
    17d2:	fb 06       	cpc	r15, r27
    17d4:	08 f4       	brcc	.+2      	; 0x17d8 <xTaskIncrementTick+0x9c>
    17d6:	57 c0       	rjmp	.+174    	; 0x1886 <xTaskIncrementTick+0x14a>
    17d8:	db e0       	ldi	r29, 0x0B	; 11
    17da:	e0 91 5c 34 	lds	r30, 0x345C	; 0x80345c <pxDelayedTaskList>
    17de:	f0 91 5d 34 	lds	r31, 0x345D	; 0x80345d <pxDelayedTaskList+0x1>
    17e2:	80 81       	ld	r24, Z
    17e4:	81 11       	cpse	r24, r1
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <xTaskIncrementTick+0xb4>
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	dc 01       	movw	r26, r24
    17ee:	13 c0       	rjmp	.+38     	; 0x1816 <xTaskIncrementTick+0xda>
    17f0:	e0 91 5c 34 	lds	r30, 0x345C	; 0x80345c <pxDelayedTaskList>
    17f4:	f0 91 5d 34 	lds	r31, 0x345D	; 0x80345d <pxDelayedTaskList+0x1>
    17f8:	07 80       	ldd	r0, Z+7	; 0x07
    17fa:	f0 85       	ldd	r31, Z+8	; 0x08
    17fc:	e0 2d       	mov	r30, r0
    17fe:	00 85       	ldd	r16, Z+8	; 0x08
    1800:	11 85       	ldd	r17, Z+9	; 0x09
    1802:	f8 01       	movw	r30, r16
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	a4 81       	ldd	r26, Z+4	; 0x04
    180a:	b5 81       	ldd	r27, Z+5	; 0x05
    180c:	c8 16       	cp	r12, r24
    180e:	d9 06       	cpc	r13, r25
    1810:	ea 06       	cpc	r14, r26
    1812:	fb 06       	cpc	r15, r27
    1814:	48 f4       	brcc	.+18     	; 0x1828 <xTaskIncrementTick+0xec>
    1816:	80 93 35 34 	sts	0x3435, r24	; 0x803435 <xNextTaskUnblockTime>
    181a:	90 93 36 34 	sts	0x3436, r25	; 0x803436 <xNextTaskUnblockTime+0x1>
    181e:	a0 93 37 34 	sts	0x3437, r26	; 0x803437 <xNextTaskUnblockTime+0x2>
    1822:	b0 93 38 34 	sts	0x3438, r27	; 0x803438 <xNextTaskUnblockTime+0x3>
    1826:	2f c0       	rjmp	.+94     	; 0x1886 <xTaskIncrementTick+0x14a>
    1828:	58 01       	movw	r10, r16
    182a:	f2 e0       	ldi	r31, 0x02	; 2
    182c:	af 0e       	add	r10, r31
    182e:	b1 1c       	adc	r11, r1
    1830:	c5 01       	movw	r24, r10
    1832:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    1836:	d8 01       	movw	r26, r16
    1838:	58 96       	adiw	r26, 0x18	; 24
    183a:	8d 91       	ld	r24, X+
    183c:	9c 91       	ld	r25, X
    183e:	59 97       	sbiw	r26, 0x19	; 25
    1840:	89 2b       	or	r24, r25
    1842:	21 f0       	breq	.+8      	; 0x184c <xTaskIncrementTick+0x110>
    1844:	c8 01       	movw	r24, r16
    1846:	0e 96       	adiw	r24, 0x0e	; 14
    1848:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    184c:	f8 01       	movw	r30, r16
    184e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1850:	90 91 3e 34 	lds	r25, 0x343E	; 0x80343e <uxTopReadyPriority>
    1854:	98 17       	cp	r25, r24
    1856:	10 f4       	brcc	.+4      	; 0x185c <xTaskIncrementTick+0x120>
    1858:	80 93 3e 34 	sts	0x343E, r24	; 0x80343e <uxTopReadyPriority>
    185c:	d8 9f       	mul	r29, r24
    185e:	c0 01       	movw	r24, r0
    1860:	11 24       	eor	r1, r1
    1862:	b5 01       	movw	r22, r10
    1864:	8c 58       	subi	r24, 0x8C	; 140
    1866:	9b 4c       	sbci	r25, 0xCB	; 203
    1868:	0e 94 20 04 	call	0x840	; 0x840 <vListInsertEnd>
    186c:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1870:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1874:	d8 01       	movw	r26, r16
    1876:	5a 96       	adiw	r26, 0x1a	; 26
    1878:	9c 91       	ld	r25, X
    187a:	82 8d       	ldd	r24, Z+26	; 0x1a
    187c:	98 17       	cp	r25, r24
    187e:	08 f4       	brcc	.+2      	; 0x1882 <xTaskIncrementTick+0x146>
    1880:	ac cf       	rjmp	.-168    	; 0x17da <xTaskIncrementTick+0x9e>
    1882:	c1 e0       	ldi	r28, 0x01	; 1
    1884:	aa cf       	rjmp	.-172    	; 0x17da <xTaskIncrementTick+0x9e>
    1886:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    188a:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    188e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1890:	bb e0       	ldi	r27, 0x0B	; 11
    1892:	eb 9f       	mul	r30, r27
    1894:	f0 01       	movw	r30, r0
    1896:	11 24       	eor	r1, r1
    1898:	ec 58       	subi	r30, 0x8C	; 140
    189a:	fb 4c       	sbci	r31, 0xCB	; 203
    189c:	80 81       	ld	r24, Z
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	40 f0       	brcs	.+16     	; 0x18b2 <xTaskIncrementTick+0x176>
    18a2:	c1 e0       	ldi	r28, 0x01	; 1
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <xTaskIncrementTick+0x176>
    18a6:	80 91 3c 34 	lds	r24, 0x343C	; 0x80343c <uxPendedTicks>
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	80 93 3c 34 	sts	0x343C, r24	; 0x80343c <uxPendedTicks>
    18b0:	c0 e0       	ldi	r28, 0x00	; 0
    18b2:	80 91 3b 34 	lds	r24, 0x343B	; 0x80343b <xYieldPending>
    18b6:	81 11       	cpse	r24, r1
    18b8:	c1 e0       	ldi	r28, 0x01	; 1
    18ba:	8c 2f       	mov	r24, r28
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	ff 90       	pop	r15
    18c6:	ef 90       	pop	r14
    18c8:	df 90       	pop	r13
    18ca:	cf 90       	pop	r12
    18cc:	bf 90       	pop	r11
    18ce:	af 90       	pop	r10
    18d0:	08 95       	ret

000018d2 <xTaskResumeAll>:
    18d2:	ef 92       	push	r14
    18d4:	ff 92       	push	r15
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18e2:	ff 93       	push	r31
    18e4:	f8 7f       	andi	r31, 0xF8	; 248
    18e6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18ea:	80 91 32 34 	lds	r24, 0x3432	; 0x803432 <uxSchedulerSuspended>
    18ee:	81 50       	subi	r24, 0x01	; 1
    18f0:	80 93 32 34 	sts	0x3432, r24	; 0x803432 <uxSchedulerSuspended>
    18f4:	80 91 32 34 	lds	r24, 0x3432	; 0x803432 <uxSchedulerSuspended>
    18f8:	88 23       	and	r24, r24
    18fa:	11 f0       	breq	.+4      	; 0x1900 <xTaskResumeAll+0x2e>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	52 c0       	rjmp	.+164    	; 0x19a4 <xTaskResumeAll+0xd2>
    1900:	80 91 43 34 	lds	r24, 0x3443	; 0x803443 <uxCurrentNumberOfTasks>
    1904:	88 23       	and	r24, r24
    1906:	d1 f3       	breq	.-12     	; 0x18fc <xTaskResumeAll+0x2a>
    1908:	c0 e0       	ldi	r28, 0x00	; 0
    190a:	d0 e0       	ldi	r29, 0x00	; 0
    190c:	8b e0       	ldi	r24, 0x0B	; 11
    190e:	f8 2e       	mov	r15, r24
    1910:	ee 24       	eor	r14, r14
    1912:	e3 94       	inc	r14
    1914:	80 91 4f 34 	lds	r24, 0x344F	; 0x80344f <xPendingReadyList>
    1918:	88 23       	and	r24, r24
    191a:	51 f1       	breq	.+84     	; 0x1970 <xTaskResumeAll+0x9e>
    191c:	e0 91 56 34 	lds	r30, 0x3456	; 0x803456 <xPendingReadyList+0x7>
    1920:	f0 91 57 34 	lds	r31, 0x3457	; 0x803457 <xPendingReadyList+0x8>
    1924:	c0 85       	ldd	r28, Z+8	; 0x08
    1926:	d1 85       	ldd	r29, Z+9	; 0x09
    1928:	ce 01       	movw	r24, r28
    192a:	0e 96       	adiw	r24, 0x0e	; 14
    192c:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    1930:	8e 01       	movw	r16, r28
    1932:	0e 5f       	subi	r16, 0xFE	; 254
    1934:	1f 4f       	sbci	r17, 0xFF	; 255
    1936:	c8 01       	movw	r24, r16
    1938:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    193c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    193e:	90 91 3e 34 	lds	r25, 0x343E	; 0x80343e <uxTopReadyPriority>
    1942:	98 17       	cp	r25, r24
    1944:	10 f4       	brcc	.+4      	; 0x194a <xTaskResumeAll+0x78>
    1946:	80 93 3e 34 	sts	0x343E, r24	; 0x80343e <uxTopReadyPriority>
    194a:	f8 9e       	mul	r15, r24
    194c:	c0 01       	movw	r24, r0
    194e:	11 24       	eor	r1, r1
    1950:	b8 01       	movw	r22, r16
    1952:	8c 58       	subi	r24, 0x8C	; 140
    1954:	9b 4c       	sbci	r25, 0xCB	; 203
    1956:	0e 94 20 04 	call	0x840	; 0x840 <vListInsertEnd>
    195a:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    195e:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1962:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1964:	82 8d       	ldd	r24, Z+26	; 0x1a
    1966:	98 17       	cp	r25, r24
    1968:	a8 f2       	brcs	.-86     	; 0x1914 <xTaskResumeAll+0x42>
    196a:	e0 92 3b 34 	sts	0x343B, r14	; 0x80343b <xYieldPending>
    196e:	d2 cf       	rjmp	.-92     	; 0x1914 <xTaskResumeAll+0x42>
    1970:	cd 2b       	or	r28, r29
    1972:	11 f0       	breq	.+4      	; 0x1978 <xTaskResumeAll+0xa6>
    1974:	0e 94 41 09 	call	0x1282	; 0x1282 <prvResetNextTaskUnblockTime>
    1978:	c0 91 3c 34 	lds	r28, 0x343C	; 0x80343c <uxPendedTicks>
    197c:	cc 23       	and	r28, r28
    197e:	51 f0       	breq	.+20     	; 0x1994 <xTaskResumeAll+0xc2>
    1980:	d1 e0       	ldi	r29, 0x01	; 1
    1982:	0e 94 9e 0b 	call	0x173c	; 0x173c <xTaskIncrementTick>
    1986:	81 11       	cpse	r24, r1
    1988:	d0 93 3b 34 	sts	0x343B, r29	; 0x80343b <xYieldPending>
    198c:	c1 50       	subi	r28, 0x01	; 1
    198e:	c9 f7       	brne	.-14     	; 0x1982 <xTaskResumeAll+0xb0>
    1990:	10 92 3c 34 	sts	0x343C, r1	; 0x80343c <uxPendedTicks>
    1994:	80 91 3b 34 	lds	r24, 0x343B	; 0x80343b <xYieldPending>
    1998:	88 23       	and	r24, r24
    199a:	09 f4       	brne	.+2      	; 0x199e <xTaskResumeAll+0xcc>
    199c:	af cf       	rjmp	.-162    	; 0x18fc <xTaskResumeAll+0x2a>
    199e:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	ff 91       	pop	r31
    19a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	08 95       	ret

000019b8 <vTaskDelay>:
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	6b 01       	movw	r12, r22
    19c2:	7c 01       	movw	r14, r24
    19c4:	67 2b       	or	r22, r23
    19c6:	68 2b       	or	r22, r24
    19c8:	69 2b       	or	r22, r25
    19ca:	19 f4       	brne	.+6      	; 0x19d2 <vTaskDelay+0x1a>
    19cc:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    19d0:	0b c0       	rjmp	.+22     	; 0x19e8 <vTaskDelay+0x30>
    19d2:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	c7 01       	movw	r24, r14
    19da:	b6 01       	movw	r22, r12
    19dc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <prvAddCurrentTaskToDelayedList>
    19e0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    19e4:	88 23       	and	r24, r24
    19e6:	91 f3       	breq	.-28     	; 0x19cc <vTaskDelay+0x14>
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	08 95       	ret

000019f2 <vTaskSwitchContext>:
    19f2:	80 91 32 34 	lds	r24, 0x3432	; 0x803432 <uxSchedulerSuspended>
    19f6:	88 23       	and	r24, r24
    19f8:	21 f0       	breq	.+8      	; 0x1a02 <vTaskSwitchContext+0x10>
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 93 3b 34 	sts	0x343B, r24	; 0x80343b <xYieldPending>
    1a00:	08 95       	ret
    1a02:	10 92 3b 34 	sts	0x343B, r1	; 0x80343b <xYieldPending>
    1a06:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1a0a:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1a0e:	03 8c       	ldd	r0, Z+27	; 0x1b
    1a10:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1a12:	e0 2d       	mov	r30, r0
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	a2 81       	ldd	r26, Z+2	; 0x02
    1a1a:	b3 81       	ldd	r27, Z+3	; 0x03
    1a1c:	85 3a       	cpi	r24, 0xA5	; 165
    1a1e:	95 4a       	sbci	r25, 0xA5	; 165
    1a20:	a5 4a       	sbci	r26, 0xA5	; 165
    1a22:	b5 4a       	sbci	r27, 0xA5	; 165
    1a24:	d9 f4       	brne	.+54     	; 0x1a5c <vTaskSwitchContext+0x6a>
    1a26:	84 81       	ldd	r24, Z+4	; 0x04
    1a28:	95 81       	ldd	r25, Z+5	; 0x05
    1a2a:	a6 81       	ldd	r26, Z+6	; 0x06
    1a2c:	b7 81       	ldd	r27, Z+7	; 0x07
    1a2e:	85 3a       	cpi	r24, 0xA5	; 165
    1a30:	95 4a       	sbci	r25, 0xA5	; 165
    1a32:	a5 4a       	sbci	r26, 0xA5	; 165
    1a34:	b5 4a       	sbci	r27, 0xA5	; 165
    1a36:	91 f4       	brne	.+36     	; 0x1a5c <vTaskSwitchContext+0x6a>
    1a38:	80 85       	ldd	r24, Z+8	; 0x08
    1a3a:	91 85       	ldd	r25, Z+9	; 0x09
    1a3c:	a2 85       	ldd	r26, Z+10	; 0x0a
    1a3e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1a40:	85 3a       	cpi	r24, 0xA5	; 165
    1a42:	95 4a       	sbci	r25, 0xA5	; 165
    1a44:	a5 4a       	sbci	r26, 0xA5	; 165
    1a46:	b5 4a       	sbci	r27, 0xA5	; 165
    1a48:	49 f4       	brne	.+18     	; 0x1a5c <vTaskSwitchContext+0x6a>
    1a4a:	84 85       	ldd	r24, Z+12	; 0x0c
    1a4c:	95 85       	ldd	r25, Z+13	; 0x0d
    1a4e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a50:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a52:	85 3a       	cpi	r24, 0xA5	; 165
    1a54:	95 4a       	sbci	r25, 0xA5	; 165
    1a56:	a5 4a       	sbci	r26, 0xA5	; 165
    1a58:	b5 4a       	sbci	r27, 0xA5	; 165
    1a5a:	61 f0       	breq	.+24     	; 0x1a74 <vTaskSwitchContext+0x82>
    1a5c:	60 91 a0 34 	lds	r22, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1a60:	70 91 a1 34 	lds	r23, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1a64:	80 91 a0 34 	lds	r24, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1a68:	90 91 a1 34 	lds	r25, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1a6c:	63 5e       	subi	r22, 0xE3	; 227
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	0e 94 67 02 	call	0x4ce	; 0x4ce <vApplicationStackOverflowHook>
    1a74:	80 91 3e 34 	lds	r24, 0x343E	; 0x80343e <uxTopReadyPriority>
    1a78:	6b e0       	ldi	r22, 0x0B	; 11
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	64 9f       	mul	r22, r20
    1a80:	90 01       	movw	r18, r0
    1a82:	65 9f       	mul	r22, r21
    1a84:	30 0d       	add	r19, r0
    1a86:	11 24       	eor	r1, r1
    1a88:	f9 01       	movw	r30, r18
    1a8a:	ec 58       	subi	r30, 0x8C	; 140
    1a8c:	fb 4c       	sbci	r31, 0xCB	; 203
    1a8e:	90 81       	ld	r25, Z
    1a90:	91 11       	cpse	r25, r1
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <vTaskSwitchContext+0xa6>
    1a94:	81 50       	subi	r24, 0x01	; 1
    1a96:	f1 cf       	rjmp	.-30     	; 0x1a7a <vTaskSwitchContext+0x88>
    1a98:	a1 81       	ldd	r26, Z+1	; 0x01
    1a9a:	b2 81       	ldd	r27, Z+2	; 0x02
    1a9c:	14 96       	adiw	r26, 0x04	; 4
    1a9e:	0d 90       	ld	r0, X+
    1aa0:	bc 91       	ld	r27, X
    1aa2:	a0 2d       	mov	r26, r0
    1aa4:	a1 83       	std	Z+1, r26	; 0x01
    1aa6:	b2 83       	std	Z+2, r27	; 0x02
    1aa8:	29 58       	subi	r18, 0x89	; 137
    1aaa:	3b 4c       	sbci	r19, 0xCB	; 203
    1aac:	a2 17       	cp	r26, r18
    1aae:	b3 07       	cpc	r27, r19
    1ab0:	31 f4       	brne	.+12     	; 0x1abe <vTaskSwitchContext+0xcc>
    1ab2:	14 96       	adiw	r26, 0x04	; 4
    1ab4:	2d 91       	ld	r18, X+
    1ab6:	3c 91       	ld	r19, X
    1ab8:	15 97       	sbiw	r26, 0x05	; 5
    1aba:	21 83       	std	Z+1, r18	; 0x01
    1abc:	32 83       	std	Z+2, r19	; 0x02
    1abe:	9b e0       	ldi	r25, 0x0B	; 11
    1ac0:	94 9f       	mul	r25, r20
    1ac2:	f0 01       	movw	r30, r0
    1ac4:	95 9f       	mul	r25, r21
    1ac6:	f0 0d       	add	r31, r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	ec 58       	subi	r30, 0x8C	; 140
    1acc:	fb 4c       	sbci	r31, 0xCB	; 203
    1ace:	01 80       	ldd	r0, Z+1	; 0x01
    1ad0:	f2 81       	ldd	r31, Z+2	; 0x02
    1ad2:	e0 2d       	mov	r30, r0
    1ad4:	20 85       	ldd	r18, Z+8	; 0x08
    1ad6:	31 85       	ldd	r19, Z+9	; 0x09
    1ad8:	20 93 a0 34 	sts	0x34A0, r18	; 0x8034a0 <pxCurrentTCB>
    1adc:	30 93 a1 34 	sts	0x34A1, r19	; 0x8034a1 <pxCurrentTCB+0x1>
    1ae0:	80 93 3e 34 	sts	0x343E, r24	; 0x80343e <uxTopReadyPriority>
    1ae4:	08 95       	ret

00001ae6 <vTaskSuspend>:
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ec 01       	movw	r28, r24
    1af0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1af4:	ff 93       	push	r31
    1af6:	f8 7f       	andi	r31, 0xF8	; 248
    1af8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1afc:	89 2b       	or	r24, r25
    1afe:	21 f4       	brne	.+8      	; 0x1b08 <vTaskSuspend+0x22>
    1b00:	c0 91 a0 34 	lds	r28, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1b04:	d0 91 a1 34 	lds	r29, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1b08:	8e 01       	movw	r16, r28
    1b0a:	0e 5f       	subi	r16, 0xFE	; 254
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	c8 01       	movw	r24, r16
    1b10:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    1b14:	88 8d       	ldd	r24, Y+24	; 0x18
    1b16:	99 8d       	ldd	r25, Y+25	; 0x19
    1b18:	89 2b       	or	r24, r25
    1b1a:	21 f0       	breq	.+8      	; 0x1b24 <vTaskSuspend+0x3e>
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	0e 96       	adiw	r24, 0x0e	; 14
    1b20:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    1b24:	b8 01       	movw	r22, r16
    1b26:	84 e4       	ldi	r24, 0x44	; 68
    1b28:	94 e3       	ldi	r25, 0x34	; 52
    1b2a:	0e 94 20 04 	call	0x840	; 0x840 <vListInsertEnd>
    1b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <vTaskSuspend+0x50>
    1b34:	1b aa       	std	Y+51, r1	; 0x33
    1b36:	ff 91       	pop	r31
    1b38:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b3c:	80 91 3d 34 	lds	r24, 0x343D	; 0x80343d <xSchedulerRunning>
    1b40:	88 23       	and	r24, r24
    1b42:	59 f0       	breq	.+22     	; 0x1b5a <vTaskSuspend+0x74>
    1b44:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b48:	ff 93       	push	r31
    1b4a:	f8 7f       	andi	r31, 0xF8	; 248
    1b4c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b50:	0e 94 41 09 	call	0x1282	; 0x1282 <prvResetNextTaskUnblockTime>
    1b54:	ff 91       	pop	r31
    1b56:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b5a:	80 91 a0 34 	lds	r24, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1b5e:	90 91 a1 34 	lds	r25, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1b62:	c8 17       	cp	r28, r24
    1b64:	d9 07       	cpc	r29, r25
    1b66:	c1 f4       	brne	.+48     	; 0x1b98 <vTaskSuspend+0xb2>
    1b68:	80 91 3d 34 	lds	r24, 0x343D	; 0x80343d <xSchedulerRunning>
    1b6c:	88 23       	and	r24, r24
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <vTaskSuspend+0x90>
    1b70:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    1b74:	11 c0       	rjmp	.+34     	; 0x1b98 <vTaskSuspend+0xb2>
    1b76:	90 91 44 34 	lds	r25, 0x3444	; 0x803444 <xSuspendedTaskList>
    1b7a:	80 91 43 34 	lds	r24, 0x3443	; 0x803443 <uxCurrentNumberOfTasks>
    1b7e:	98 13       	cpse	r25, r24
    1b80:	05 c0       	rjmp	.+10     	; 0x1b8c <vTaskSuspend+0xa6>
    1b82:	10 92 a0 34 	sts	0x34A0, r1	; 0x8034a0 <pxCurrentTCB>
    1b86:	10 92 a1 34 	sts	0x34A1, r1	; 0x8034a1 <pxCurrentTCB+0x1>
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <vTaskSuspend+0xb2>
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <vTaskSwitchContext>
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	08 95       	ret

00001ba2 <vTaskPlaceOnEventList>:
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	6a 01       	movw	r12, r20
    1bac:	7b 01       	movw	r14, r22
    1bae:	60 91 a0 34 	lds	r22, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1bb2:	70 91 a1 34 	lds	r23, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1bb6:	62 5f       	subi	r22, 0xF2	; 242
    1bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bba:	0e 94 41 04 	call	0x882	; 0x882 <vListInsert>
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	c7 01       	movw	r24, r14
    1bc2:	b6 01       	movw	r22, r12
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	df 90       	pop	r13
    1bca:	cf 90       	pop	r12
    1bcc:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <prvAddCurrentTaskToDelayedList>

00001bd0 <vTaskPlaceOnUnorderedEventList>:
    1bd0:	cf 92       	push	r12
    1bd2:	df 92       	push	r13
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	68 01       	movw	r12, r16
    1bde:	79 01       	movw	r14, r18
    1be0:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1be4:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1be8:	70 68       	ori	r23, 0x80	; 128
    1bea:	46 87       	std	Z+14, r20	; 0x0e
    1bec:	57 87       	std	Z+15, r21	; 0x0f
    1bee:	60 8b       	std	Z+16, r22	; 0x10
    1bf0:	71 8b       	std	Z+17, r23	; 0x11
    1bf2:	60 91 a0 34 	lds	r22, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1bf6:	70 91 a1 34 	lds	r23, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1bfa:	62 5f       	subi	r22, 0xF2	; 242
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	0e 94 20 04 	call	0x840	; 0x840 <vListInsertEnd>
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	c7 01       	movw	r24, r14
    1c06:	b6 01       	movw	r22, r12
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
    1c14:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <prvAddCurrentTaskToDelayedList>

00001c18 <vTaskPlaceOnEventListRestricted>:
    1c18:	cf 92       	push	r12
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	cf 93       	push	r28
    1c22:	6a 01       	movw	r12, r20
    1c24:	7b 01       	movw	r14, r22
    1c26:	c2 2f       	mov	r28, r18
    1c28:	60 91 a0 34 	lds	r22, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1c2c:	70 91 a1 34 	lds	r23, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1c30:	62 5f       	subi	r22, 0xF2	; 242
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	0e 94 20 04 	call	0x840	; 0x840 <vListInsertEnd>
    1c38:	cc 23       	and	r28, r28
    1c3a:	21 f0       	breq	.+8      	; 0x1c44 <vTaskPlaceOnEventListRestricted+0x2c>
    1c3c:	cc 24       	eor	r12, r12
    1c3e:	ca 94       	dec	r12
    1c40:	dc 2c       	mov	r13, r12
    1c42:	76 01       	movw	r14, r12
    1c44:	4c 2f       	mov	r20, r28
    1c46:	c7 01       	movw	r24, r14
    1c48:	b6 01       	movw	r22, r12
    1c4a:	cf 91       	pop	r28
    1c4c:	ff 90       	pop	r15
    1c4e:	ef 90       	pop	r14
    1c50:	df 90       	pop	r13
    1c52:	cf 90       	pop	r12
    1c54:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <prvAddCurrentTaskToDelayedList>

00001c58 <xTaskRemoveFromEventList>:
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	dc 01       	movw	r26, r24
    1c62:	17 96       	adiw	r26, 0x07	; 7
    1c64:	ed 91       	ld	r30, X+
    1c66:	fc 91       	ld	r31, X
    1c68:	18 97       	sbiw	r26, 0x08	; 8
    1c6a:	c0 85       	ldd	r28, Z+8	; 0x08
    1c6c:	d1 85       	ldd	r29, Z+9	; 0x09
    1c6e:	8e 01       	movw	r16, r28
    1c70:	02 5f       	subi	r16, 0xF2	; 242
    1c72:	1f 4f       	sbci	r17, 0xFF	; 255
    1c74:	c8 01       	movw	r24, r16
    1c76:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    1c7a:	80 91 32 34 	lds	r24, 0x3432	; 0x803432 <uxSchedulerSuspended>
    1c7e:	81 11       	cpse	r24, r1
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <xTaskRemoveFromEventList+0x52>
    1c82:	0c 50       	subi	r16, 0x0C	; 12
    1c84:	11 09       	sbc	r17, r1
    1c86:	c8 01       	movw	r24, r16
    1c88:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    1c8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c8e:	90 91 3e 34 	lds	r25, 0x343E	; 0x80343e <uxTopReadyPriority>
    1c92:	98 17       	cp	r25, r24
    1c94:	10 f4       	brcc	.+4      	; 0x1c9a <xTaskRemoveFromEventList+0x42>
    1c96:	80 93 3e 34 	sts	0x343E, r24	; 0x80343e <uxTopReadyPriority>
    1c9a:	bb e0       	ldi	r27, 0x0B	; 11
    1c9c:	8b 9f       	mul	r24, r27
    1c9e:	c0 01       	movw	r24, r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	b8 01       	movw	r22, r16
    1ca4:	8c 58       	subi	r24, 0x8C	; 140
    1ca6:	9b 4c       	sbci	r25, 0xCB	; 203
    1ca8:	03 c0       	rjmp	.+6      	; 0x1cb0 <xTaskRemoveFromEventList+0x58>
    1caa:	b8 01       	movw	r22, r16
    1cac:	8f e4       	ldi	r24, 0x4F	; 79
    1cae:	94 e3       	ldi	r25, 0x34	; 52
    1cb0:	0e 94 20 04 	call	0x840	; 0x840 <vListInsertEnd>
    1cb4:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1cb8:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1cbc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cc0:	89 17       	cp	r24, r25
    1cc2:	20 f4       	brcc	.+8      	; 0x1ccc <xTaskRemoveFromEventList+0x74>
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	80 93 3b 34 	sts	0x343B, r24	; 0x80343b <xYieldPending>
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <xTaskRemoveFromEventList+0x76>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	08 95       	ret

00001cd8 <vTaskRemoveFromUnorderedEventList>:
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	70 68       	ori	r23, 0x80	; 128
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	40 83       	st	Z, r20
    1ce6:	51 83       	std	Z+1, r21	; 0x01
    1ce8:	62 83       	std	Z+2, r22	; 0x02
    1cea:	73 83       	std	Z+3, r23	; 0x03
    1cec:	c0 85       	ldd	r28, Z+8	; 0x08
    1cee:	d1 85       	ldd	r29, Z+9	; 0x09
    1cf0:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    1cf4:	8e 01       	movw	r16, r28
    1cf6:	0e 5f       	subi	r16, 0xFE	; 254
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	c8 01       	movw	r24, r16
    1cfc:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    1d00:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d02:	90 91 3e 34 	lds	r25, 0x343E	; 0x80343e <uxTopReadyPriority>
    1d06:	98 17       	cp	r25, r24
    1d08:	10 f4       	brcc	.+4      	; 0x1d0e <vTaskRemoveFromUnorderedEventList+0x36>
    1d0a:	80 93 3e 34 	sts	0x343E, r24	; 0x80343e <uxTopReadyPriority>
    1d0e:	fb e0       	ldi	r31, 0x0B	; 11
    1d10:	8f 9f       	mul	r24, r31
    1d12:	c0 01       	movw	r24, r0
    1d14:	11 24       	eor	r1, r1
    1d16:	b8 01       	movw	r22, r16
    1d18:	8c 58       	subi	r24, 0x8C	; 140
    1d1a:	9b 4c       	sbci	r25, 0xCB	; 203
    1d1c:	0e 94 20 04 	call	0x840	; 0x840 <vListInsertEnd>
    1d20:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1d24:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1d28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d2c:	89 17       	cp	r24, r25
    1d2e:	18 f4       	brcc	.+6      	; 0x1d36 <vTaskRemoveFromUnorderedEventList+0x5e>
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	80 93 3b 34 	sts	0x343B, r24	; 0x80343b <xYieldPending>
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	08 95       	ret

00001d40 <vTaskInternalSetTimeOutState>:
    1d40:	20 91 3a 34 	lds	r18, 0x343A	; 0x80343a <xNumOfOverflows>
    1d44:	fc 01       	movw	r30, r24
    1d46:	20 83       	st	Z, r18
    1d48:	40 91 3f 34 	lds	r20, 0x343F	; 0x80343f <xTickCount>
    1d4c:	50 91 40 34 	lds	r21, 0x3440	; 0x803440 <xTickCount+0x1>
    1d50:	60 91 41 34 	lds	r22, 0x3441	; 0x803441 <xTickCount+0x2>
    1d54:	70 91 42 34 	lds	r23, 0x3442	; 0x803442 <xTickCount+0x3>
    1d58:	41 83       	std	Z+1, r20	; 0x01
    1d5a:	52 83       	std	Z+2, r21	; 0x02
    1d5c:	63 83       	std	Z+3, r22	; 0x03
    1d5e:	74 83       	std	Z+4, r23	; 0x04
    1d60:	08 95       	ret

00001d62 <xTaskCheckForTimeOut>:
    1d62:	cf 92       	push	r12
    1d64:	df 92       	push	r13
    1d66:	ef 92       	push	r14
    1d68:	ff 92       	push	r15
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	db 01       	movw	r26, r22
    1d74:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d78:	ff 93       	push	r31
    1d7a:	f8 7f       	andi	r31, 0xF8	; 248
    1d7c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1d80:	00 91 3f 34 	lds	r16, 0x343F	; 0x80343f <xTickCount>
    1d84:	10 91 40 34 	lds	r17, 0x3440	; 0x803440 <xTickCount+0x1>
    1d88:	20 91 41 34 	lds	r18, 0x3441	; 0x803441 <xTickCount+0x2>
    1d8c:	30 91 42 34 	lds	r19, 0x3442	; 0x803442 <xTickCount+0x3>
    1d90:	4d 91       	ld	r20, X+
    1d92:	5d 91       	ld	r21, X+
    1d94:	6d 91       	ld	r22, X+
    1d96:	7c 91       	ld	r23, X
    1d98:	13 97       	sbiw	r26, 0x03	; 3
    1d9a:	4f 3f       	cpi	r20, 0xFF	; 255
    1d9c:	cf ef       	ldi	r28, 0xFF	; 255
    1d9e:	5c 07       	cpc	r21, r28
    1da0:	6c 07       	cpc	r22, r28
    1da2:	7c 07       	cpc	r23, r28
    1da4:	59 f1       	breq	.+86     	; 0x1dfc <xTaskCheckForTimeOut+0x9a>
    1da6:	fc 01       	movw	r30, r24
    1da8:	c1 80       	ldd	r12, Z+1	; 0x01
    1daa:	d2 80       	ldd	r13, Z+2	; 0x02
    1dac:	e3 80       	ldd	r14, Z+3	; 0x03
    1dae:	f4 80       	ldd	r15, Z+4	; 0x04
    1db0:	e0 91 3a 34 	lds	r30, 0x343A	; 0x80343a <xNumOfOverflows>
    1db4:	ec 01       	movw	r28, r24
    1db6:	f8 81       	ld	r31, Y
    1db8:	fe 17       	cp	r31, r30
    1dba:	29 f0       	breq	.+10     	; 0x1dc6 <xTaskCheckForTimeOut+0x64>
    1dbc:	0c 15       	cp	r16, r12
    1dbe:	1d 05       	cpc	r17, r13
    1dc0:	2e 05       	cpc	r18, r14
    1dc2:	3f 05       	cpc	r19, r15
    1dc4:	e8 f4       	brcc	.+58     	; 0x1e00 <xTaskCheckForTimeOut+0x9e>
    1dc6:	0c 19       	sub	r16, r12
    1dc8:	1d 09       	sbc	r17, r13
    1dca:	2e 09       	sbc	r18, r14
    1dcc:	3f 09       	sbc	r19, r15
    1dce:	04 17       	cp	r16, r20
    1dd0:	15 07       	cpc	r17, r21
    1dd2:	26 07       	cpc	r18, r22
    1dd4:	37 07       	cpc	r19, r23
    1dd6:	60 f4       	brcc	.+24     	; 0x1df0 <xTaskCheckForTimeOut+0x8e>
    1dd8:	fd 01       	movw	r30, r26
    1dda:	40 1b       	sub	r20, r16
    1ddc:	51 0b       	sbc	r21, r17
    1dde:	62 0b       	sbc	r22, r18
    1de0:	73 0b       	sbc	r23, r19
    1de2:	40 83       	st	Z, r20
    1de4:	51 83       	std	Z+1, r21	; 0x01
    1de6:	62 83       	std	Z+2, r22	; 0x02
    1de8:	73 83       	std	Z+3, r23	; 0x03
    1dea:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <vTaskInternalSetTimeOutState>
    1dee:	06 c0       	rjmp	.+12     	; 0x1dfc <xTaskCheckForTimeOut+0x9a>
    1df0:	1d 92       	st	X+, r1
    1df2:	1d 92       	st	X+, r1
    1df4:	1d 92       	st	X+, r1
    1df6:	1c 92       	st	X, r1
    1df8:	13 97       	sbiw	r26, 0x03	; 3
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <xTaskCheckForTimeOut+0x9e>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <xTaskCheckForTimeOut+0xa0>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	ff 91       	pop	r31
    1e04:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	08 95       	ret

00001e1a <vTaskMissedYield>:
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	80 93 3b 34 	sts	0x343B, r24	; 0x80343b <xYieldPending>
    1e20:	08 95       	ret

00001e22 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1e22:	80 91 3d 34 	lds	r24, 0x343D	; 0x80343d <xSchedulerRunning>
    1e26:	88 23       	and	r24, r24
    1e28:	31 f0       	breq	.+12     	; 0x1e36 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1e2a:	80 91 32 34 	lds	r24, 0x3432	; 0x803432 <uxSchedulerSuspended>
    1e2e:	88 23       	and	r24, r24
    1e30:	21 f0       	breq	.+8      	; 0x1e3a <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1e3c:	08 95       	ret

00001e3e <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1e52:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1e56:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1e5a:	66 85       	ldd	r22, Z+14	; 0x0e
    1e5c:	77 85       	ldd	r23, Z+15	; 0x0f
    1e5e:	80 89       	ldd	r24, Z+16	; 0x10
    1e60:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e62:	e0 91 a0 34 	lds	r30, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1e66:	f0 91 a1 34 	lds	r31, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1e6a:	a0 91 a0 34 	lds	r26, 0x34A0	; 0x8034a0 <pxCurrentTCB>
    1e6e:	b0 91 a1 34 	lds	r27, 0x34A1	; 0x8034a1 <pxCurrentTCB+0x1>
    1e72:	5a 96       	adiw	r26, 0x1a	; 26
    1e74:	2c 91       	ld	r18, X
    1e76:	34 e0       	ldi	r19, 0x04	; 4
    1e78:	c3 2e       	mov	r12, r19
    1e7a:	d1 2c       	mov	r13, r1
    1e7c:	e1 2c       	mov	r14, r1
    1e7e:	f1 2c       	mov	r15, r1
    1e80:	46 01       	movw	r8, r12
    1e82:	57 01       	movw	r10, r14
    1e84:	82 1a       	sub	r8, r18
    1e86:	91 08       	sbc	r9, r1
    1e88:	a1 08       	sbc	r10, r1
    1e8a:	b1 08       	sbc	r11, r1
    1e8c:	86 86       	std	Z+14, r8	; 0x0e
    1e8e:	97 86       	std	Z+15, r9	; 0x0f
    1e90:	a0 8a       	std	Z+16, r10	; 0x10
    1e92:	b1 8a       	std	Z+17, r11	; 0x11

	return uxReturn;
}
    1e94:	1f 91       	pop	r17
    1e96:	0f 91       	pop	r16
    1e98:	ff 90       	pop	r15
    1e9a:	ef 90       	pop	r14
    1e9c:	df 90       	pop	r13
    1e9e:	cf 90       	pop	r12
    1ea0:	bf 90       	pop	r11
    1ea2:	af 90       	pop	r10
    1ea4:	9f 90       	pop	r9
    1ea6:	8f 90       	pop	r8
    1ea8:	08 95       	ret

00001eaa <prvCheckForValidListAndQueue>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1eaa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1eae:	ff 93       	push	r31
    1eb0:	f8 7f       	andi	r31, 0xF8	; 248
    1eb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1eb6:	80 91 a8 34 	lds	r24, 0x34A8	; 0x8034a8 <xTimerQueue>
    1eba:	90 91 a9 34 	lds	r25, 0x34A9	; 0x8034a9 <xTimerQueue+0x1>
    1ebe:	89 2b       	or	r24, r25
    1ec0:	e9 f4       	brne	.+58     	; 0x1efc <prvCheckForValidListAndQueue+0x52>
    1ec2:	89 eb       	ldi	r24, 0xB9	; 185
    1ec4:	94 e3       	ldi	r25, 0x34	; 52
    1ec6:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    1eca:	8e ea       	ldi	r24, 0xAE	; 174
    1ecc:	94 e3       	ldi	r25, 0x34	; 52
    1ece:	0e 94 0b 04 	call	0x816	; 0x816 <vListInitialise>
    1ed2:	89 eb       	ldi	r24, 0xB9	; 185
    1ed4:	94 e3       	ldi	r25, 0x34	; 52
    1ed6:	80 93 ac 34 	sts	0x34AC, r24	; 0x8034ac <pxCurrentTimerList>
    1eda:	90 93 ad 34 	sts	0x34AD, r25	; 0x8034ad <pxCurrentTimerList+0x1>
    1ede:	8e ea       	ldi	r24, 0xAE	; 174
    1ee0:	94 e3       	ldi	r25, 0x34	; 52
    1ee2:	80 93 aa 34 	sts	0x34AA, r24	; 0x8034aa <pxOverflowTimerList>
    1ee6:	90 93 ab 34 	sts	0x34AB, r25	; 0x8034ab <pxOverflowTimerList+0x1>
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	69 e0       	ldi	r22, 0x09	; 9
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	0e 94 60 07 	call	0xec0	; 0xec0 <xQueueGenericCreate>
    1ef4:	80 93 a8 34 	sts	0x34A8, r24	; 0x8034a8 <xTimerQueue>
    1ef8:	90 93 a9 34 	sts	0x34A9, r25	; 0x8034a9 <xTimerQueue+0x1>
    1efc:	ff 91       	pop	r31
    1efe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f02:	08 95       	ret

00001f04 <prvInsertTimerInActiveList>:
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	fc 01       	movw	r30, r24
    1f12:	42 83       	std	Z+2, r20	; 0x02
    1f14:	53 83       	std	Z+3, r21	; 0x03
    1f16:	64 83       	std	Z+4, r22	; 0x04
    1f18:	75 83       	std	Z+5, r23	; 0x05
    1f1a:	82 87       	std	Z+10, r24	; 0x0a
    1f1c:	93 87       	std	Z+11, r25	; 0x0b
    1f1e:	04 17       	cp	r16, r20
    1f20:	15 07       	cpc	r17, r21
    1f22:	26 07       	cpc	r18, r22
    1f24:	37 07       	cpc	r19, r23
    1f26:	a8 f0       	brcs	.+42     	; 0x1f52 <prvInsertTimerInActiveList+0x4e>
    1f28:	0c 19       	sub	r16, r12
    1f2a:	1d 09       	sbc	r17, r13
    1f2c:	2e 09       	sbc	r18, r14
    1f2e:	3f 09       	sbc	r19, r15
    1f30:	86 85       	ldd	r24, Z+14	; 0x0e
    1f32:	97 85       	ldd	r25, Z+15	; 0x0f
    1f34:	a0 89       	ldd	r26, Z+16	; 0x10
    1f36:	b1 89       	ldd	r27, Z+17	; 0x11
    1f38:	08 17       	cp	r16, r24
    1f3a:	19 07       	cpc	r17, r25
    1f3c:	2a 07       	cpc	r18, r26
    1f3e:	3b 07       	cpc	r19, r27
    1f40:	e8 f4       	brcc	.+58     	; 0x1f7c <prvInsertTimerInActiveList+0x78>
    1f42:	bf 01       	movw	r22, r30
    1f44:	6e 5f       	subi	r22, 0xFE	; 254
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	80 91 aa 34 	lds	r24, 0x34AA	; 0x8034aa <pxOverflowTimerList>
    1f4c:	90 91 ab 34 	lds	r25, 0x34AB	; 0x8034ab <pxOverflowTimerList+0x1>
    1f50:	11 c0       	rjmp	.+34     	; 0x1f74 <prvInsertTimerInActiveList+0x70>
    1f52:	0c 15       	cp	r16, r12
    1f54:	1d 05       	cpc	r17, r13
    1f56:	2e 05       	cpc	r18, r14
    1f58:	3f 05       	cpc	r19, r15
    1f5a:	28 f4       	brcc	.+10     	; 0x1f66 <prvInsertTimerInActiveList+0x62>
    1f5c:	4c 15       	cp	r20, r12
    1f5e:	5d 05       	cpc	r21, r13
    1f60:	6e 05       	cpc	r22, r14
    1f62:	7f 05       	cpc	r23, r15
    1f64:	58 f4       	brcc	.+22     	; 0x1f7c <prvInsertTimerInActiveList+0x78>
    1f66:	bf 01       	movw	r22, r30
    1f68:	6e 5f       	subi	r22, 0xFE	; 254
    1f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6c:	80 91 ac 34 	lds	r24, 0x34AC	; 0x8034ac <pxCurrentTimerList>
    1f70:	90 91 ad 34 	lds	r25, 0x34AD	; 0x8034ad <pxCurrentTimerList+0x1>
    1f74:	0e 94 41 04 	call	0x882	; 0x882 <vListInsert>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <prvInsertTimerInActiveList+0x7a>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	08 95       	ret

00001f8c <xTimerCreateTimerTask>:
    1f8c:	ef 92       	push	r14
    1f8e:	ff 92       	push	r15
    1f90:	0f 93       	push	r16
    1f92:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <prvCheckForValidListAndQueue>
    1f96:	80 91 a8 34 	lds	r24, 0x34A8	; 0x8034a8 <xTimerQueue>
    1f9a:	90 91 a9 34 	lds	r25, 0x34A9	; 0x8034a9 <xTimerQueue+0x1>
    1f9e:	89 2b       	or	r24, r25
    1fa0:	81 f0       	breq	.+32     	; 0x1fc2 <xTimerCreateTimerTask+0x36>
    1fa2:	86 ea       	ldi	r24, 0xA6	; 166
    1fa4:	e8 2e       	mov	r14, r24
    1fa6:	84 e3       	ldi	r24, 0x34	; 52
    1fa8:	f8 2e       	mov	r15, r24
    1faa:	03 e0       	ldi	r16, 0x03	; 3
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	48 ec       	ldi	r20, 0xC8	; 200
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	65 e0       	ldi	r22, 0x05	; 5
    1fb6:	70 e2       	ldi	r23, 0x20	; 32
    1fb8:	8f e9       	ldi	r24, 0x9F	; 159
    1fba:	90 e1       	ldi	r25, 0x10	; 16
    1fbc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
    1fc0:	01 c0       	rjmp	.+2      	; 0x1fc4 <xTimerCreateTimerTask+0x38>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	0f 91       	pop	r16
    1fc6:	ff 90       	pop	r15
    1fc8:	ef 90       	pop	r14
    1fca:	08 95       	ret

00001fcc <xTimerGenericCommand>:
    1fcc:	8f 92       	push	r8
    1fce:	9f 92       	push	r9
    1fd0:	af 92       	push	r10
    1fd2:	bf 92       	push	r11
    1fd4:	cf 92       	push	r12
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	29 97       	sbiw	r28, 0x09	; 9
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	a0 91 a8 34 	lds	r26, 0x34A8	; 0x8034a8 <xTimerQueue>
    1ff2:	b0 91 a9 34 	lds	r27, 0x34A9	; 0x8034a9 <xTimerQueue+0x1>
    1ff6:	10 97       	sbiw	r26, 0x00	; 0
    1ff8:	41 f1       	breq	.+80     	; 0x204a <xTimerGenericCommand+0x7e>
    1ffa:	69 83       	std	Y+1, r22	; 0x01
    1ffc:	2a 83       	std	Y+2, r18	; 0x02
    1ffe:	3b 83       	std	Y+3, r19	; 0x03
    2000:	4c 83       	std	Y+4, r20	; 0x04
    2002:	5d 83       	std	Y+5, r21	; 0x05
    2004:	8e 83       	std	Y+6, r24	; 0x06
    2006:	9f 83       	std	Y+7, r25	; 0x07
    2008:	66 30       	cpi	r22, 0x06	; 6
    200a:	b4 f4       	brge	.+44     	; 0x2038 <xTimerGenericCommand+0x6c>
    200c:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskGetSchedulerState>
    2010:	e0 91 a8 34 	lds	r30, 0x34A8	; 0x8034a8 <xTimerQueue>
    2014:	f0 91 a9 34 	lds	r31, 0x34A9	; 0x8034a9 <xTimerQueue+0x1>
    2018:	00 e0       	ldi	r16, 0x00	; 0
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	19 f4       	brne	.+6      	; 0x2024 <xTimerGenericCommand+0x58>
    201e:	a7 01       	movw	r20, r14
    2020:	96 01       	movw	r18, r12
    2022:	03 c0       	rjmp	.+6      	; 0x202a <xTimerGenericCommand+0x5e>
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	a9 01       	movw	r20, r18
    202a:	be 01       	movw	r22, r28
    202c:	6f 5f       	subi	r22, 0xFF	; 255
    202e:	7f 4f       	sbci	r23, 0xFF	; 255
    2030:	cf 01       	movw	r24, r30
    2032:	0e 94 8c 07 	call	0xf18	; 0xf18 <xQueueGenericSend>
    2036:	0a c0       	rjmp	.+20     	; 0x204c <xTimerGenericCommand+0x80>
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	a8 01       	movw	r20, r16
    203c:	be 01       	movw	r22, r28
    203e:	6f 5f       	subi	r22, 0xFF	; 255
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 2b 08 	call	0x1056	; 0x1056 <xQueueGenericSendFromISR>
    2048:	01 c0       	rjmp	.+2      	; 0x204c <xTimerGenericCommand+0x80>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	29 96       	adiw	r28, 0x09	; 9
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	9f 90       	pop	r9
    2068:	8f 90       	pop	r8
    206a:	08 95       	ret

0000206c <prvSwitchTimerLists>:
    206c:	8f 92       	push	r8
    206e:	9f 92       	push	r9
    2070:	af 92       	push	r10
    2072:	bf 92       	push	r11
    2074:	cf 92       	push	r12
    2076:	df 92       	push	r13
    2078:	ef 92       	push	r14
    207a:	ff 92       	push	r15
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	e0 91 ac 34 	lds	r30, 0x34AC	; 0x8034ac <pxCurrentTimerList>
    2088:	f0 91 ad 34 	lds	r31, 0x34AD	; 0x8034ad <pxCurrentTimerList+0x1>
    208c:	80 81       	ld	r24, Z
    208e:	88 23       	and	r24, r24
    2090:	e9 f1       	breq	.+122    	; 0x210c <prvSwitchTimerLists+0xa0>
    2092:	07 80       	ldd	r0, Z+7	; 0x07
    2094:	f0 85       	ldd	r31, Z+8	; 0x08
    2096:	e0 2d       	mov	r30, r0
    2098:	80 80       	ld	r8, Z
    209a:	91 80       	ldd	r9, Z+1	; 0x01
    209c:	a2 80       	ldd	r10, Z+2	; 0x02
    209e:	b3 80       	ldd	r11, Z+3	; 0x03
    20a0:	c0 85       	ldd	r28, Z+8	; 0x08
    20a2:	d1 85       	ldd	r29, Z+9	; 0x09
    20a4:	8e 01       	movw	r16, r28
    20a6:	0e 5f       	subi	r16, 0xFE	; 254
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	c8 01       	movw	r24, r16
    20ac:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    20b0:	ed 89       	ldd	r30, Y+21	; 0x15
    20b2:	fe 89       	ldd	r31, Y+22	; 0x16
    20b4:	ce 01       	movw	r24, r28
    20b6:	19 95       	eicall
    20b8:	8a 89       	ldd	r24, Y+18	; 0x12
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	19 f7       	brne	.-58     	; 0x2084 <prvSwitchTimerLists+0x18>
    20be:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c2:	a8 89       	ldd	r26, Y+16	; 0x10
    20c4:	b9 89       	ldd	r27, Y+17	; 0x11
    20c6:	88 0d       	add	r24, r8
    20c8:	99 1d       	adc	r25, r9
    20ca:	aa 1d       	adc	r26, r10
    20cc:	bb 1d       	adc	r27, r11
    20ce:	88 16       	cp	r8, r24
    20d0:	99 06       	cpc	r9, r25
    20d2:	aa 06       	cpc	r10, r26
    20d4:	bb 06       	cpc	r11, r27
    20d6:	70 f4       	brcc	.+28     	; 0x20f4 <prvSwitchTimerLists+0x88>
    20d8:	8a 83       	std	Y+2, r24	; 0x02
    20da:	9b 83       	std	Y+3, r25	; 0x03
    20dc:	ac 83       	std	Y+4, r26	; 0x04
    20de:	bd 83       	std	Y+5, r27	; 0x05
    20e0:	ca 87       	std	Y+10, r28	; 0x0a
    20e2:	db 87       	std	Y+11, r29	; 0x0b
    20e4:	b8 01       	movw	r22, r16
    20e6:	80 91 ac 34 	lds	r24, 0x34AC	; 0x8034ac <pxCurrentTimerList>
    20ea:	90 91 ad 34 	lds	r25, 0x34AD	; 0x8034ad <pxCurrentTimerList+0x1>
    20ee:	0e 94 41 04 	call	0x882	; 0x882 <vListInsert>
    20f2:	c8 cf       	rjmp	.-112    	; 0x2084 <prvSwitchTimerLists+0x18>
    20f4:	c1 2c       	mov	r12, r1
    20f6:	d1 2c       	mov	r13, r1
    20f8:	76 01       	movw	r14, r12
    20fa:	00 e0       	ldi	r16, 0x00	; 0
    20fc:	10 e0       	ldi	r17, 0x00	; 0
    20fe:	a5 01       	movw	r20, r10
    2100:	94 01       	movw	r18, r8
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	ce 01       	movw	r24, r28
    2106:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <xTimerGenericCommand>
    210a:	bc cf       	rjmp	.-136    	; 0x2084 <prvSwitchTimerLists+0x18>
    210c:	80 91 aa 34 	lds	r24, 0x34AA	; 0x8034aa <pxOverflowTimerList>
    2110:	90 91 ab 34 	lds	r25, 0x34AB	; 0x8034ab <pxOverflowTimerList+0x1>
    2114:	80 93 ac 34 	sts	0x34AC, r24	; 0x8034ac <pxCurrentTimerList>
    2118:	90 93 ad 34 	sts	0x34AD, r25	; 0x8034ad <pxCurrentTimerList+0x1>
    211c:	e0 93 aa 34 	sts	0x34AA, r30	; 0x8034aa <pxOverflowTimerList>
    2120:	f0 93 ab 34 	sts	0x34AB, r31	; 0x8034ab <pxOverflowTimerList+0x1>
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	cf 90       	pop	r12
    2134:	bf 90       	pop	r11
    2136:	af 90       	pop	r10
    2138:	9f 90       	pop	r9
    213a:	8f 90       	pop	r8
    213c:	08 95       	ret

0000213e <prvTimerTask>:
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	29 97       	sbiw	r28, 0x09	; 9
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	e0 91 ac 34 	lds	r30, 0x34AC	; 0x8034ac <pxCurrentTimerList>
    2150:	f0 91 ad 34 	lds	r31, 0x34AD	; 0x8034ad <pxCurrentTimerList+0x1>
    2154:	f0 80       	ld	r15, Z
    2156:	ff 20       	and	r15, r15
    2158:	41 f0       	breq	.+16     	; 0x216a <prvTimerTask+0x2c>
    215a:	07 80       	ldd	r0, Z+7	; 0x07
    215c:	f0 85       	ldd	r31, Z+8	; 0x08
    215e:	e0 2d       	mov	r30, r0
    2160:	80 80       	ld	r8, Z
    2162:	91 80       	ldd	r9, Z+1	; 0x01
    2164:	a2 80       	ldd	r10, Z+2	; 0x02
    2166:	b3 80       	ldd	r11, Z+3	; 0x03
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <prvTimerTask+0x32>
    216a:	81 2c       	mov	r8, r1
    216c:	91 2c       	mov	r9, r1
    216e:	54 01       	movw	r10, r8
    2170:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
    2174:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xTaskGetTickCount>
    2178:	1b 01       	movw	r2, r22
    217a:	2c 01       	movw	r4, r24
    217c:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <xLastTime.4745>
    2180:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <xLastTime.4745+0x1>
    2184:	a0 91 a4 34 	lds	r26, 0x34A4	; 0x8034a4 <xLastTime.4745+0x2>
    2188:	b0 91 a5 34 	lds	r27, 0x34A5	; 0x8034a5 <xLastTime.4745+0x3>
    218c:	28 16       	cp	r2, r24
    218e:	39 06       	cpc	r3, r25
    2190:	4a 06       	cpc	r4, r26
    2192:	5b 06       	cpc	r5, r27
    2194:	20 f4       	brcc	.+8      	; 0x219e <prvTimerTask+0x60>
    2196:	0e 94 36 10 	call	0x206c	; 0x206c <prvSwitchTimerLists>
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <prvTimerTask+0x62>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	20 92 a2 34 	sts	0x34A2, r2	; 0x8034a2 <xLastTime.4745>
    21a4:	30 92 a3 34 	sts	0x34A3, r3	; 0x8034a3 <xLastTime.4745+0x1>
    21a8:	40 92 a4 34 	sts	0x34A4, r4	; 0x8034a4 <xLastTime.4745+0x2>
    21ac:	50 92 a5 34 	sts	0x34A5, r5	; 0x8034a5 <xLastTime.4745+0x3>
    21b0:	81 11       	cpse	r24, r1
    21b2:	5f c0       	rjmp	.+190    	; 0x2272 <prvTimerTask+0x134>
    21b4:	ff 20       	and	r15, r15
    21b6:	09 f4       	brne	.+2      	; 0x21ba <prvTimerTask+0x7c>
    21b8:	41 c0       	rjmp	.+130    	; 0x223c <prvTimerTask+0xfe>
    21ba:	28 14       	cp	r2, r8
    21bc:	39 04       	cpc	r3, r9
    21be:	4a 04       	cpc	r4, r10
    21c0:	5b 04       	cpc	r5, r11
    21c2:	08 f4       	brcc	.+2      	; 0x21c6 <prvTimerTask+0x88>
    21c4:	42 c0       	rjmp	.+132    	; 0x224a <prvTimerTask+0x10c>
    21c6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    21ca:	e0 91 ac 34 	lds	r30, 0x34AC	; 0x8034ac <pxCurrentTimerList>
    21ce:	f0 91 ad 34 	lds	r31, 0x34AD	; 0x8034ad <pxCurrentTimerList+0x1>
    21d2:	07 80       	ldd	r0, Z+7	; 0x07
    21d4:	f0 85       	ldd	r31, Z+8	; 0x08
    21d6:	e0 2d       	mov	r30, r0
    21d8:	60 84       	ldd	r6, Z+8	; 0x08
    21da:	71 84       	ldd	r7, Z+9	; 0x09
    21dc:	c3 01       	movw	r24, r6
    21de:	02 96       	adiw	r24, 0x02	; 2
    21e0:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    21e4:	d3 01       	movw	r26, r6
    21e6:	52 96       	adiw	r26, 0x12	; 18
    21e8:	8c 91       	ld	r24, X
    21ea:	52 97       	sbiw	r26, 0x12	; 18
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	f1 f4       	brne	.+60     	; 0x222c <prvTimerTask+0xee>
    21f0:	1e 96       	adiw	r26, 0x0e	; 14
    21f2:	4d 91       	ld	r20, X+
    21f4:	5d 91       	ld	r21, X+
    21f6:	6d 91       	ld	r22, X+
    21f8:	7c 91       	ld	r23, X
    21fa:	51 97       	sbiw	r26, 0x11	; 17
    21fc:	48 0d       	add	r20, r8
    21fe:	59 1d       	adc	r21, r9
    2200:	6a 1d       	adc	r22, r10
    2202:	7b 1d       	adc	r23, r11
    2204:	75 01       	movw	r14, r10
    2206:	64 01       	movw	r12, r8
    2208:	92 01       	movw	r18, r4
    220a:	81 01       	movw	r16, r2
    220c:	c3 01       	movw	r24, r6
    220e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <prvInsertTimerInActiveList>
    2212:	88 23       	and	r24, r24
    2214:	59 f0       	breq	.+22     	; 0x222c <prvTimerTask+0xee>
    2216:	c1 2c       	mov	r12, r1
    2218:	d1 2c       	mov	r13, r1
    221a:	76 01       	movw	r14, r12
    221c:	00 e0       	ldi	r16, 0x00	; 0
    221e:	10 e0       	ldi	r17, 0x00	; 0
    2220:	a5 01       	movw	r20, r10
    2222:	94 01       	movw	r18, r8
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	c3 01       	movw	r24, r6
    2228:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <xTimerGenericCommand>
    222c:	d3 01       	movw	r26, r6
    222e:	55 96       	adiw	r26, 0x15	; 21
    2230:	ed 91       	ld	r30, X+
    2232:	fc 91       	ld	r31, X
    2234:	56 97       	sbiw	r26, 0x16	; 22
    2236:	c3 01       	movw	r24, r6
    2238:	19 95       	eicall
    223a:	2d c0       	rjmp	.+90     	; 0x2296 <prvTimerTask+0x158>
    223c:	e0 91 aa 34 	lds	r30, 0x34AA	; 0x8034aa <pxOverflowTimerList>
    2240:	f0 91 ab 34 	lds	r31, 0x34AB	; 0x8034ab <pxOverflowTimerList+0x1>
    2244:	80 81       	ld	r24, Z
    2246:	21 e0       	ldi	r18, 0x01	; 1
    2248:	81 11       	cpse	r24, r1
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	b5 01       	movw	r22, r10
    224e:	a4 01       	movw	r20, r8
    2250:	42 19       	sub	r20, r2
    2252:	53 09       	sbc	r21, r3
    2254:	64 09       	sbc	r22, r4
    2256:	75 09       	sbc	r23, r5
    2258:	80 91 a8 34 	lds	r24, 0x34A8	; 0x8034a8 <xTimerQueue>
    225c:	90 91 a9 34 	lds	r25, 0x34A9	; 0x8034a9 <xTimerQueue+0x1>
    2260:	0e 94 18 09 	call	0x1230	; 0x1230 <vQueueWaitForMessageRestricted>
    2264:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    2268:	81 11       	cpse	r24, r1
    226a:	15 c0       	rjmp	.+42     	; 0x2296 <prvTimerTask+0x158>
    226c:	0e 94 6f 05 	call	0xade	; 0xade <vPortYield>
    2270:	12 c0       	rjmp	.+36     	; 0x2296 <prvTimerTask+0x158>
    2272:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <xTaskResumeAll>
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <prvTimerTask+0x158>
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	87 ff       	sbrs	r24, 7
    227c:	09 c0       	rjmp	.+18     	; 0x2290 <prvTimerTask+0x152>
    227e:	4e 81       	ldd	r20, Y+6	; 0x06
    2280:	5f 81       	ldd	r21, Y+7	; 0x07
    2282:	68 85       	ldd	r22, Y+8	; 0x08
    2284:	79 85       	ldd	r23, Y+9	; 0x09
    2286:	ea 81       	ldd	r30, Y+2	; 0x02
    2288:	fb 81       	ldd	r31, Y+3	; 0x03
    228a:	8c 81       	ldd	r24, Y+4	; 0x04
    228c:	9d 81       	ldd	r25, Y+5	; 0x05
    228e:	19 95       	eicall
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	87 ff       	sbrs	r24, 7
    2294:	0f c0       	rjmp	.+30     	; 0x22b4 <prvTimerTask+0x176>
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	a9 01       	movw	r20, r18
    229c:	be 01       	movw	r22, r28
    229e:	6f 5f       	subi	r22, 0xFF	; 255
    22a0:	7f 4f       	sbci	r23, 0xFF	; 255
    22a2:	80 91 a8 34 	lds	r24, 0x34A8	; 0x8034a8 <xTimerQueue>
    22a6:	90 91 a9 34 	lds	r25, 0x34A9	; 0x8034a9 <xTimerQueue+0x1>
    22aa:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <xQueueReceive>
    22ae:	81 11       	cpse	r24, r1
    22b0:	e3 cf       	rjmp	.-58     	; 0x2278 <prvTimerTask+0x13a>
    22b2:	4c cf       	rjmp	.-360    	; 0x214c <prvTimerTask+0xe>
    22b4:	ae 80       	ldd	r10, Y+6	; 0x06
    22b6:	bf 80       	ldd	r11, Y+7	; 0x07
    22b8:	f5 01       	movw	r30, r10
    22ba:	84 85       	ldd	r24, Z+12	; 0x0c
    22bc:	95 85       	ldd	r25, Z+13	; 0x0d
    22be:	89 2b       	or	r24, r25
    22c0:	21 f0       	breq	.+8      	; 0x22ca <prvTimerTask+0x18c>
    22c2:	c5 01       	movw	r24, r10
    22c4:	02 96       	adiw	r24, 0x02	; 2
    22c6:	0e 94 85 04 	call	0x90a	; 0x90a <uxListRemove>
    22ca:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xTaskGetTickCount>
    22ce:	2b 01       	movw	r4, r22
    22d0:	3c 01       	movw	r6, r24
    22d2:	80 91 a2 34 	lds	r24, 0x34A2	; 0x8034a2 <xLastTime.4745>
    22d6:	90 91 a3 34 	lds	r25, 0x34A3	; 0x8034a3 <xLastTime.4745+0x1>
    22da:	a0 91 a4 34 	lds	r26, 0x34A4	; 0x8034a4 <xLastTime.4745+0x2>
    22de:	b0 91 a5 34 	lds	r27, 0x34A5	; 0x8034a5 <xLastTime.4745+0x3>
    22e2:	48 16       	cp	r4, r24
    22e4:	59 06       	cpc	r5, r25
    22e6:	6a 06       	cpc	r6, r26
    22e8:	7b 06       	cpc	r7, r27
    22ea:	10 f4       	brcc	.+4      	; 0x22f0 <prvTimerTask+0x1b2>
    22ec:	0e 94 36 10 	call	0x206c	; 0x206c <prvSwitchTimerLists>
    22f0:	40 92 a2 34 	sts	0x34A2, r4	; 0x8034a2 <xLastTime.4745>
    22f4:	50 92 a3 34 	sts	0x34A3, r5	; 0x8034a3 <xLastTime.4745+0x1>
    22f8:	60 92 a4 34 	sts	0x34A4, r6	; 0x8034a4 <xLastTime.4745+0x2>
    22fc:	70 92 a5 34 	sts	0x34A5, r7	; 0x8034a5 <xLastTime.4745+0x3>
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	08 2e       	mov	r0, r24
    2304:	00 0c       	add	r0, r0
    2306:	99 0b       	sbc	r25, r25
    2308:	aa 0b       	sbc	r26, r26
    230a:	bb 0b       	sbc	r27, r27
    230c:	8a 30       	cpi	r24, 0x0A	; 10
    230e:	91 05       	cpc	r25, r1
    2310:	10 f6       	brcc	.-124    	; 0x2296 <prvTimerTask+0x158>
    2312:	fc 01       	movw	r30, r24
    2314:	88 27       	eor	r24, r24
    2316:	e2 50       	subi	r30, 0x02	; 2
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	8f 4f       	sbci	r24, 0xFF	; 255
    231c:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__tablejump2__>
    2320:	ca 80       	ldd	r12, Y+2	; 0x02
    2322:	db 80       	ldd	r13, Y+3	; 0x03
    2324:	ec 80       	ldd	r14, Y+4	; 0x04
    2326:	fd 80       	ldd	r15, Y+5	; 0x05
    2328:	d5 01       	movw	r26, r10
    232a:	1e 96       	adiw	r26, 0x0e	; 14
    232c:	4d 91       	ld	r20, X+
    232e:	5d 91       	ld	r21, X+
    2330:	6d 91       	ld	r22, X+
    2332:	7c 91       	ld	r23, X
    2334:	51 97       	sbiw	r26, 0x11	; 17
    2336:	4c 0d       	add	r20, r12
    2338:	5d 1d       	adc	r21, r13
    233a:	6e 1d       	adc	r22, r14
    233c:	7f 1d       	adc	r23, r15
    233e:	93 01       	movw	r18, r6
    2340:	82 01       	movw	r16, r4
    2342:	c5 01       	movw	r24, r10
    2344:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <prvInsertTimerInActiveList>
    2348:	88 23       	and	r24, r24
    234a:	09 f4       	brne	.+2      	; 0x234e <prvTimerTask+0x210>
    234c:	a4 cf       	rjmp	.-184    	; 0x2296 <prvTimerTask+0x158>
    234e:	d5 01       	movw	r26, r10
    2350:	55 96       	adiw	r26, 0x15	; 21
    2352:	ed 91       	ld	r30, X+
    2354:	fc 91       	ld	r31, X
    2356:	56 97       	sbiw	r26, 0x16	; 22
    2358:	c5 01       	movw	r24, r10
    235a:	19 95       	eicall
    235c:	f5 01       	movw	r30, r10
    235e:	82 89       	ldd	r24, Z+18	; 0x12
    2360:	81 30       	cpi	r24, 0x01	; 1
    2362:	09 f0       	breq	.+2      	; 0x2366 <prvTimerTask+0x228>
    2364:	98 cf       	rjmp	.-208    	; 0x2296 <prvTimerTask+0x158>
    2366:	4a 81       	ldd	r20, Y+2	; 0x02
    2368:	5b 81       	ldd	r21, Y+3	; 0x03
    236a:	6c 81       	ldd	r22, Y+4	; 0x04
    236c:	7d 81       	ldd	r23, Y+5	; 0x05
    236e:	86 85       	ldd	r24, Z+14	; 0x0e
    2370:	97 85       	ldd	r25, Z+15	; 0x0f
    2372:	a0 89       	ldd	r26, Z+16	; 0x10
    2374:	b1 89       	ldd	r27, Z+17	; 0x11
    2376:	9a 01       	movw	r18, r20
    2378:	ab 01       	movw	r20, r22
    237a:	28 0f       	add	r18, r24
    237c:	39 1f       	adc	r19, r25
    237e:	4a 1f       	adc	r20, r26
    2380:	5b 1f       	adc	r21, r27
    2382:	c1 2c       	mov	r12, r1
    2384:	d1 2c       	mov	r13, r1
    2386:	76 01       	movw	r14, r12
    2388:	00 e0       	ldi	r16, 0x00	; 0
    238a:	10 e0       	ldi	r17, 0x00	; 0
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	c5 01       	movw	r24, r10
    2390:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <xTimerGenericCommand>
    2394:	80 cf       	rjmp	.-256    	; 0x2296 <prvTimerTask+0x158>
    2396:	4a 81       	ldd	r20, Y+2	; 0x02
    2398:	5b 81       	ldd	r21, Y+3	; 0x03
    239a:	6c 81       	ldd	r22, Y+4	; 0x04
    239c:	7d 81       	ldd	r23, Y+5	; 0x05
    239e:	d5 01       	movw	r26, r10
    23a0:	1e 96       	adiw	r26, 0x0e	; 14
    23a2:	4d 93       	st	X+, r20
    23a4:	5d 93       	st	X+, r21
    23a6:	6d 93       	st	X+, r22
    23a8:	7c 93       	st	X, r23
    23aa:	51 97       	sbiw	r26, 0x11	; 17
    23ac:	44 0d       	add	r20, r4
    23ae:	55 1d       	adc	r21, r5
    23b0:	66 1d       	adc	r22, r6
    23b2:	77 1d       	adc	r23, r7
    23b4:	73 01       	movw	r14, r6
    23b6:	62 01       	movw	r12, r4
    23b8:	93 01       	movw	r18, r6
    23ba:	82 01       	movw	r16, r4
    23bc:	c5 01       	movw	r24, r10
    23be:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <prvInsertTimerInActiveList>
    23c2:	69 cf       	rjmp	.-302    	; 0x2296 <prvTimerTask+0x158>
    23c4:	c5 01       	movw	r24, r10
    23c6:	0e 94 0a 04 	call	0x814	; 0x814 <vPortFree>
    23ca:	65 cf       	rjmp	.-310    	; 0x2296 <prvTimerTask+0x158>

000023cc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	29 97       	sbiw	r28, 0x09	; 9
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    23de:	ee ef       	ldi	r30, 0xFE	; 254
    23e0:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    23e2:	8a 83       	std	Y+2, r24	; 0x02
    23e4:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    23e6:	6c 83       	std	Y+4, r22	; 0x04
    23e8:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    23ea:	2e 83       	std	Y+6, r18	; 0x06
    23ec:	3f 83       	std	Y+7, r19	; 0x07
    23ee:	48 87       	std	Y+8, r20	; 0x08
    23f0:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	a8 01       	movw	r20, r16
    23f6:	be 01       	movw	r22, r28
    23f8:	6f 5f       	subi	r22, 0xFF	; 255
    23fa:	7f 4f       	sbci	r23, 0xFF	; 255
    23fc:	80 91 a8 34 	lds	r24, 0x34A8	; 0x8034a8 <xTimerQueue>
    2400:	90 91 a9 34 	lds	r25, 0x34A9	; 0x8034a9 <xTimerQueue+0x1>
    2404:	0e 94 2b 08 	call	0x1056	; 0x1056 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    2408:	29 96       	adiw	r28, 0x09	; 9
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	08 95       	ret

00002418 <vInitClock>:
    2418:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    241c:	81 60       	ori	r24, 0x01	; 1
    241e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    2422:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2426:	80 ff       	sbrs	r24, 0
    2428:	fc cf       	rjmp	.-8      	; 0x2422 <vInitClock+0xa>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	0e 94 39 02 	call	0x472	; 0x472 <CLKSYS_Main_ClockSource_Select>
    2430:	8e e1       	ldi	r24, 0x1E	; 30
    2432:	0e 94 2a 02 	call	0x454	; 0x454 <CLKSYS_Disable>
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	0e 94 34 02 	call	0x468	; 0x468 <CLKSYS_Prescalers_Config>
    243e:	43 e0       	ldi	r20, 0x03	; 3
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	80 e4       	ldi	r24, 0x40	; 64
    2444:	0e 94 1b 02 	call	0x436	; 0x436 <CLKSYS_XOSC_Config>
    2448:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    244c:	88 60       	ori	r24, 0x08	; 8
    244e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    2452:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2456:	83 ff       	sbrs	r24, 3
    2458:	fc cf       	rjmp	.-8      	; 0x2452 <vInitClock+0x3a>
    245a:	64 e0       	ldi	r22, 0x04	; 4
    245c:	80 ec       	ldi	r24, 0xC0	; 192
    245e:	0e 94 25 02 	call	0x44a	; 0x44a <CLKSYS_PLL_Config>
    2462:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    2466:	80 61       	ori	r24, 0x10	; 16
    2468:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	0e 94 34 02 	call	0x468	; 0x468 <CLKSYS_Prescalers_Config>
    2474:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2478:	84 ff       	sbrs	r24, 4
    247a:	fc cf       	rjmp	.-8      	; 0x2474 <vInitClock+0x5c>
    247c:	84 e0       	ldi	r24, 0x04	; 4
    247e:	0e 94 39 02 	call	0x472	; 0x472 <CLKSYS_Main_ClockSource_Select>
    2482:	87 e0       	ldi	r24, 0x07	; 7
    2484:	0c 94 2a 02 	jmp	0x454	; 0x454 <CLKSYS_Disable>

00002488 <vLoadKiller>:
		loadcounter = 0;
		vTaskDelay(1000/portTICK_RATE_MS);
	}
}

void vLoadKiller(void *pvParameter) {	
    2488:	ff cf       	rjmp	.-2      	; 0x2488 <vLoadKiller>

0000248a <vButtonManager>:
	vTaskStartScheduler();
	return 0;
}

void vButtonManager(void *pvParameter){
	initButtons();
    248a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <initButtons>
	for(;;) {
		updateButtons();
    248e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <updateButtons>
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <getButtonPress>
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	69 f4       	brne	.+26     	; 0x24b6 <vButtonManager+0x2c>
			vTaskSuspend(led1Task);
    249c:	80 91 f9 34 	lds	r24, 0x34F9	; 0x8034f9 <led1Task>
    24a0:	90 91 fa 34 	lds	r25, 0x34FA	; 0x8034fa <led1Task+0x1>
    24a4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
			vTaskSuspend(led2Task);
    24a8:	80 91 fd 34 	lds	r24, 0x34FD	; 0x8034fd <led2Task>
    24ac:	90 91 fe 34 	lds	r25, 0x34FE	; 0x8034fe <led2Task+0x1>
    24b0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
    24b4:	11 c0       	rjmp	.+34     	; 0x24d8 <vButtonManager+0x4e>
		} else if(getButtonPress(BUTTON1) == LONG_PRESSED) {
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <getButtonPress>
    24bc:	81 11       	cpse	r24, r1
    24be:	0c c0       	rjmp	.+24     	; 0x24d8 <vButtonManager+0x4e>
			vTaskResume(led1Task);
    24c0:	80 91 f9 34 	lds	r24, 0x34F9	; 0x8034f9 <led1Task>
    24c4:	90 91 fa 34 	lds	r25, 0x34FA	; 0x8034fa <led1Task+0x1>
    24c8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vTaskResume>
			vTaskResume(led2Task);
    24cc:	80 91 fd 34 	lds	r24, 0x34FD	; 0x8034fd <led2Task>
    24d0:	90 91 fe 34 	lds	r25, 0x34FE	; 0x8034fe <led2Task+0x1>
    24d4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vTaskResume>
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <getButtonPress>
    24de:	81 30       	cpi	r24, 0x01	; 1
    24e0:	29 f5       	brne	.+74     	; 0x252c <vButtonManager+0xa2>
			vTaskSuspend(led3Task);
    24e2:	80 91 f5 34 	lds	r24, 0x34F5	; 0x8034f5 <led3Task>
    24e6:	90 91 f6 34 	lds	r25, 0x34F6	; 0x8034f6 <led3Task+0x1>
    24ea:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
			vTaskSuspend(led4Task);
    24ee:	80 91 ff 34 	lds	r24, 0x34FF	; 0x8034ff <led4Task>
    24f2:	90 91 00 35 	lds	r25, 0x3500	; 0x803500 <led4Task+0x1>
    24f6:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
			vTaskSuspend(led5Task);
    24fa:	80 91 fb 34 	lds	r24, 0x34FB	; 0x8034fb <led5Task>
    24fe:	90 91 fc 34 	lds	r25, 0x34FC	; 0x8034fc <led5Task+0x1>
    2502:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
			vTaskSuspend(led6Task);
    2506:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <led6Task>
    250a:	90 91 06 35 	lds	r25, 0x3506	; 0x803506 <led6Task+0x1>
    250e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
			vTaskSuspend(led7Task);
    2512:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <led7Task>
    2516:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <led7Task+0x1>
    251a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
			vTaskSuspend(led8Task);
    251e:	80 91 03 35 	lds	r24, 0x3503	; 0x803503 <led8Task>
    2522:	90 91 04 35 	lds	r25, 0x3504	; 0x803504 <led8Task+0x1>
    2526:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
    252a:	29 c0       	rjmp	.+82     	; 0x257e <vButtonManager+0xf4>
		} else if(getButtonPress(BUTTON2) == LONG_PRESSED) {
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <getButtonPress>
    2532:	81 11       	cpse	r24, r1
    2534:	24 c0       	rjmp	.+72     	; 0x257e <vButtonManager+0xf4>
			vTaskResume(led3Task);
    2536:	80 91 f5 34 	lds	r24, 0x34F5	; 0x8034f5 <led3Task>
    253a:	90 91 f6 34 	lds	r25, 0x34F6	; 0x8034f6 <led3Task+0x1>
    253e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vTaskResume>
			vTaskResume(led4Task);
    2542:	80 91 ff 34 	lds	r24, 0x34FF	; 0x8034ff <led4Task>
    2546:	90 91 00 35 	lds	r25, 0x3500	; 0x803500 <led4Task+0x1>
    254a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vTaskResume>
			vTaskResume(led5Task);
    254e:	80 91 fb 34 	lds	r24, 0x34FB	; 0x8034fb <led5Task>
    2552:	90 91 fc 34 	lds	r25, 0x34FC	; 0x8034fc <led5Task+0x1>
    2556:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vTaskResume>
			vTaskResume(led6Task);
    255a:	80 91 05 35 	lds	r24, 0x3505	; 0x803505 <led6Task>
    255e:	90 91 06 35 	lds	r25, 0x3506	; 0x803506 <led6Task+0x1>
    2562:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vTaskResume>
			vTaskResume(led7Task);
    2566:	80 91 01 35 	lds	r24, 0x3501	; 0x803501 <led7Task>
    256a:	90 91 02 35 	lds	r25, 0x3502	; 0x803502 <led7Task+0x1>
    256e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vTaskResume>
			vTaskResume(led8Task);
    2572:	80 91 03 35 	lds	r24, 0x3503	; 0x803503 <led8Task>
    2576:	90 91 04 35 	lds	r25, 0x3504	; 0x803504 <led8Task+0x1>
    257a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vTaskResume>
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    257e:	82 e0       	ldi	r24, 0x02	; 2
    2580:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <getButtonPress>
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	19 f0       	breq	.+6      	; 0x258e <vButtonManager+0x104>

		} else if(getButtonPress(BUTTON3) == LONG_PRESSED) {
    2588:	82 e0       	ldi	r24, 0x02	; 2
    258a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <getButtonPress>

		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <getButtonPress>
    2594:	81 30       	cpi	r24, 0x01	; 1
    2596:	39 f4       	brne	.+14     	; 0x25a6 <vButtonManager+0x11c>
			vTaskResume(loadkillerTask);
    2598:	80 91 f7 34 	lds	r24, 0x34F7	; 0x8034f7 <loadkillerTask>
    259c:	90 91 f8 34 	lds	r25, 0x34F8	; 0x8034f8 <loadkillerTask+0x1>
    25a0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <vTaskResume>
    25a4:	0b c0       	rjmp	.+22     	; 0x25bc <vButtonManager+0x132>
		} else if(getButtonPress(BUTTON4) == LONG_PRESSED) {
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <getButtonPress>
    25ac:	81 11       	cpse	r24, r1
    25ae:	06 c0       	rjmp	.+12     	; 0x25bc <vButtonManager+0x132>
			vTaskSuspend(loadkillerTask);
    25b0:	80 91 f7 34 	lds	r24, 0x34F7	; 0x8034f7 <loadkillerTask>
    25b4:	90 91 f8 34 	lds	r25, 0x34F8	; 0x8034f8 <loadkillerTask+0x1>
    25b8:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
		}

		vTaskDelay(10/portTICK_RATE_MS);
    25bc:	6a e0       	ldi	r22, 0x0A	; 10
    25be:	70 e0       	ldi	r23, 0x00	; 0
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
	}
    25c8:	62 cf       	rjmp	.-316    	; 0x248e <vButtonManager+0x4>

000025ca <vDisplayManager>:
}

void vDisplayManager(void *pvParameter) {
	vTaskDelay(100/portTICK_RATE_MS);
    25ca:	64 e6       	ldi	r22, 0x64	; 100
    25cc:	70 e0       	ldi	r23, 0x00	; 0
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
	for(;;) {
		vDisplayClear();
		vDisplayWriteStringAtPos(0,0,"FreeRTOS 10.0.1");
    25d6:	8d e0       	ldi	r24, 0x0D	; 13
    25d8:	c8 2e       	mov	r12, r24
    25da:	80 e2       	ldi	r24, 0x20	; 32
    25dc:	d8 2e       	mov	r13, r24
 		vDisplayWriteStringAtPos(1,0,"EDUBoard 1.0");
    25de:	9d e1       	ldi	r25, 0x1D	; 29
    25e0:	e9 2e       	mov	r14, r25
    25e2:	90 e2       	ldi	r25, 0x20	; 32
    25e4:	f9 2e       	mov	r15, r25
    25e6:	99 24       	eor	r9, r9
    25e8:	93 94       	inc	r9
 		vDisplayWriteStringAtPos(2,0,"TaskManagement");
    25ea:	0a e2       	ldi	r16, 0x2A	; 42
    25ec:	10 e2       	ldi	r17, 0x20	; 32
    25ee:	22 e0       	ldi	r18, 0x02	; 2
    25f0:	a2 2e       	mov	r10, r18
 		vDisplayWriteStringAtPos(3,0,"Load: %f", loadcounter);
    25f2:	c9 e3       	ldi	r28, 0x39	; 57
    25f4:	d0 e2       	ldi	r29, 0x20	; 32
    25f6:	33 e0       	ldi	r19, 0x03	; 3
    25f8:	b3 2e       	mov	r11, r19
}

void vDisplayManager(void *pvParameter) {
	vTaskDelay(100/portTICK_RATE_MS);
	for(;;) {
		vDisplayClear();
    25fa:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vDisplayClear>
		vDisplayWriteStringAtPos(0,0,"FreeRTOS 10.0.1");
    25fe:	df 92       	push	r13
    2600:	cf 92       	push	r12
    2602:	1f 92       	push	r1
    2604:	1f 92       	push	r1
    2606:	1f 92       	push	r1
    2608:	1f 92       	push	r1
    260a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vDisplayWriteStringAtPos>
 		vDisplayWriteStringAtPos(1,0,"EDUBoard 1.0");
    260e:	ff 92       	push	r15
    2610:	ef 92       	push	r14
    2612:	1f 92       	push	r1
    2614:	1f 92       	push	r1
    2616:	1f 92       	push	r1
    2618:	9f 92       	push	r9
    261a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vDisplayWriteStringAtPos>
 		vDisplayWriteStringAtPos(2,0,"TaskManagement");
    261e:	1f 93       	push	r17
    2620:	0f 93       	push	r16
    2622:	1f 92       	push	r1
    2624:	1f 92       	push	r1
    2626:	1f 92       	push	r1
    2628:	af 92       	push	r10
    262a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vDisplayWriteStringAtPos>
 		vDisplayWriteStringAtPos(3,0,"Load: %f", loadcounter);
    262e:	80 91 c7 34 	lds	r24, 0x34C7	; 0x8034c7 <loadcounter+0x3>
    2632:	8f 93       	push	r24
    2634:	80 91 c6 34 	lds	r24, 0x34C6	; 0x8034c6 <loadcounter+0x2>
    2638:	8f 93       	push	r24
    263a:	80 91 c5 34 	lds	r24, 0x34C5	; 0x8034c5 <loadcounter+0x1>
    263e:	8f 93       	push	r24
    2640:	80 91 c4 34 	lds	r24, 0x34C4	; 0x8034c4 <loadcounter>
    2644:	8f 93       	push	r24
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	1f 92       	push	r1
    264c:	1f 92       	push	r1
    264e:	1f 92       	push	r1
    2650:	bf 92       	push	r11
    2652:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vDisplayWriteStringAtPos>
		loadcounter = 0;
    2656:	10 92 c4 34 	sts	0x34C4, r1	; 0x8034c4 <loadcounter>
    265a:	10 92 c5 34 	sts	0x34C5, r1	; 0x8034c5 <loadcounter+0x1>
    265e:	10 92 c6 34 	sts	0x34C6, r1	; 0x8034c6 <loadcounter+0x2>
    2662:	10 92 c7 34 	sts	0x34C7, r1	; 0x8034c7 <loadcounter+0x3>
		vTaskDelay(1000/portTICK_RATE_MS);
    2666:	68 ee       	ldi	r22, 0xE8	; 232
    2668:	73 e0       	ldi	r23, 0x03	; 3
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
    2672:	8d b7       	in	r24, 0x3d	; 61
    2674:	9e b7       	in	r25, 0x3e	; 62
    2676:	4c 96       	adiw	r24, 0x1c	; 28
    2678:	8d bf       	out	0x3d, r24	; 61
    267a:	9e bf       	out	0x3e, r25	; 62
    267c:	be cf       	rjmp	.-132    	; 0x25fa <vDisplayManager+0x30>

0000267e <vLed1Handler>:
		
	}
}

void vLed1Handler(void *pvParameter) {
	PORTF.DIRSET = PIN0_bm;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTF.OUTSET = 0x01;
    2684:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
	for(;;) {
		PORTF.OUTTGL = 0x01;
    2688:	c1 e0       	ldi	r28, 0x01	; 1
    268a:	c0 93 a7 06 	sts	0x06A7, r28	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
		vTaskDelay(200/portTICK_RATE_MS);
    268e:	68 ec       	ldi	r22, 0xC8	; 200
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
    269a:	f7 cf       	rjmp	.-18     	; 0x268a <vLed1Handler+0xc>

0000269c <vLed2Handler>:
	}
}

void vLed2Handler(void *pvParameter) {
	PORTF.DIRSET = PIN1_bm;
    269c:	82 e0       	ldi	r24, 0x02	; 2
    269e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTF.OUTSET = 0x02;
    26a2:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
	for(;;) {
		PORTF.OUTTGL = 0x02;
    26a6:	c2 e0       	ldi	r28, 0x02	; 2
    26a8:	c0 93 a7 06 	sts	0x06A7, r28	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
		vTaskDelay(190/portTICK_RATE_MS);
    26ac:	6e eb       	ldi	r22, 0xBE	; 190
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
    26b8:	f7 cf       	rjmp	.-18     	; 0x26a8 <vLed2Handler+0xc>

000026ba <vLed3Handler>:
	}
}

void vLed3Handler(void *pvParameter) {
	PORTF.DIRSET = PIN2_bm;
    26ba:	84 e0       	ldi	r24, 0x04	; 4
    26bc:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTF.OUTSET = 0x04;
    26c0:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
	for(;;) {
		PORTF.OUTTGL = 0x04;
    26c4:	c4 e0       	ldi	r28, 0x04	; 4
    26c6:	c0 93 a7 06 	sts	0x06A7, r28	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
		vTaskDelay(180/portTICK_RATE_MS);
    26ca:	64 eb       	ldi	r22, 0xB4	; 180
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
    26d6:	f7 cf       	rjmp	.-18     	; 0x26c6 <vLed3Handler+0xc>

000026d8 <vLed4Handler>:
	}
}

void vLed4Handler(void *pvParameter) {
	PORTF.DIRSET = PIN3_bm;
    26d8:	88 e0       	ldi	r24, 0x08	; 8
    26da:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	PORTF.OUTSET = 0x08;
    26de:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
	for(;;) {
		PORTF.OUTTGL = 0x08;
    26e2:	c8 e0       	ldi	r28, 0x08	; 8
    26e4:	c0 93 a7 06 	sts	0x06A7, r28	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
		vTaskDelay(170/portTICK_RATE_MS);
    26e8:	6a ea       	ldi	r22, 0xAA	; 170
    26ea:	70 e0       	ldi	r23, 0x00	; 0
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
    26f4:	f7 cf       	rjmp	.-18     	; 0x26e4 <vLed4Handler+0xc>

000026f6 <vLed5Handler>:
	}
}

void vLed5Handler(void *pvParameter) {
	PORTE.DIRSET = PIN0_bm;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTE.OUTSET = 0x01;
    26fc:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	for(;;) {
		PORTE.OUTTGL = 0x01;
    2700:	c1 e0       	ldi	r28, 0x01	; 1
    2702:	c0 93 87 06 	sts	0x0687, r28	; 0x800687 <__TEXT_REGION_LENGTH__+0x700687>
		vTaskDelay(160/portTICK_RATE_MS);
    2706:	60 ea       	ldi	r22, 0xA0	; 160
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
    2712:	f7 cf       	rjmp	.-18     	; 0x2702 <vLed5Handler+0xc>

00002714 <vLed6Handler>:
	}
}

void vLed6Handler(void *pvParameter) {
	PORTE.DIRSET = PIN1_bm;
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTE.OUTSET = 0x02;
    271a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	for(;;) {
		PORTE.OUTTGL = 0x02;
    271e:	c2 e0       	ldi	r28, 0x02	; 2
    2720:	c0 93 87 06 	sts	0x0687, r28	; 0x800687 <__TEXT_REGION_LENGTH__+0x700687>
		vTaskDelay(150/portTICK_RATE_MS);
    2724:	66 e9       	ldi	r22, 0x96	; 150
    2726:	70 e0       	ldi	r23, 0x00	; 0
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
    2730:	f7 cf       	rjmp	.-18     	; 0x2720 <vLed6Handler+0xc>

00002732 <vLed7Handler>:
	}
}

void vLed7Handler(void *pvParameter) {
	PORTE.DIRSET = PIN2_bm;
    2732:	84 e0       	ldi	r24, 0x04	; 4
    2734:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTE.OUTSET = 0x04;
    2738:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	for(;;) {
		PORTE.OUTTGL = 0x04;
    273c:	c4 e0       	ldi	r28, 0x04	; 4
    273e:	c0 93 87 06 	sts	0x0687, r28	; 0x800687 <__TEXT_REGION_LENGTH__+0x700687>
		vTaskDelay(140/portTICK_RATE_MS);
    2742:	6c e8       	ldi	r22, 0x8C	; 140
    2744:	70 e0       	ldi	r23, 0x00	; 0
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
    274e:	f7 cf       	rjmp	.-18     	; 0x273e <vLed7Handler+0xc>

00002750 <vLed8Handler>:
	}
}

void vLed8Handler(void *pvParameter) {
	PORTE.DIRSET = PIN3_bm;
    2750:	88 e0       	ldi	r24, 0x08	; 8
    2752:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	PORTE.OUTSET = 0x08;
    2756:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	for(;;) {
		PORTE.OUTTGL = 0x08;
    275a:	c8 e0       	ldi	r28, 0x08	; 8
    275c:	c0 93 87 06 	sts	0x0687, r28	; 0x800687 <__TEXT_REGION_LENGTH__+0x700687>
		vTaskDelay(130/portTICK_RATE_MS);
    2760:	62 e8       	ldi	r22, 0x82	; 130
    2762:	70 e0       	ldi	r23, 0x00	; 0
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
    276c:	f7 cf       	rjmp	.-18     	; 0x275c <vLed8Handler+0xc>

0000276e <vApplicationIdleHook>:

double loadcounter = 0;

void vApplicationIdleHook( void )
{	
	portENTER_CRITICAL();
    276e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2772:	ff 93       	push	r31
    2774:	f8 7f       	andi	r31, 0xF8	; 248
    2776:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	loadcounter++;
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e8       	ldi	r20, 0x80	; 128
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	60 91 c4 34 	lds	r22, 0x34C4	; 0x8034c4 <loadcounter>
    2786:	70 91 c5 34 	lds	r23, 0x34C5	; 0x8034c5 <loadcounter+0x1>
    278a:	80 91 c6 34 	lds	r24, 0x34C6	; 0x8034c6 <loadcounter+0x2>
    278e:	90 91 c7 34 	lds	r25, 0x34C7	; 0x8034c7 <loadcounter+0x3>
    2792:	0e 94 1e 1a 	call	0x343c	; 0x343c <__addsf3>
    2796:	60 93 c4 34 	sts	0x34C4, r22	; 0x8034c4 <loadcounter>
    279a:	70 93 c5 34 	sts	0x34C5, r23	; 0x8034c5 <loadcounter+0x1>
    279e:	80 93 c6 34 	sts	0x34C6, r24	; 0x8034c6 <loadcounter+0x2>
    27a2:	90 93 c7 34 	sts	0x34C7, r25	; 0x8034c7 <loadcounter+0x3>
	portEXIT_CRITICAL();
    27a6:	ff 91       	pop	r31
    27a8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    27ac:	08 95       	ret

000027ae <main>:
}

int main(void)
{
    27ae:	ef 92       	push	r14
    27b0:	ff 92       	push	r15
    27b2:	0f 93       	push	r16
    27b4:	cf 93       	push	r28
    resetReason_t reason = getResetReason();
    27b6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <getResetReason>
    27ba:	c8 2f       	mov	r28, r24

	vInitClock();	
    27bc:	0e 94 0c 12 	call	0x2418	; 0x2418 <vInitClock>
	vInitDisplay();
    27c0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <vInitDisplay>
	xTaskCreate(vButtonManager, (const char *) "btManager", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    27c4:	e1 2c       	mov	r14, r1
    27c6:	f1 2c       	mov	r15, r1
    27c8:	03 e0       	ldi	r16, 0x03	; 3
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	48 ec       	ldi	r20, 0xC8	; 200
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	62 e4       	ldi	r22, 0x42	; 66
    27d4:	70 e2       	ldi	r23, 0x20	; 32
    27d6:	85 e4       	ldi	r24, 0x45	; 69
    27d8:	92 e1       	ldi	r25, 0x12	; 18
    27da:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vLed1Handler, (const char *) "led1", configMINIMAL_STACK_SIZE, NULL, 1, &led1Task);
    27de:	89 ef       	ldi	r24, 0xF9	; 249
    27e0:	e8 2e       	mov	r14, r24
    27e2:	84 e3       	ldi	r24, 0x34	; 52
    27e4:	f8 2e       	mov	r15, r24
    27e6:	01 e0       	ldi	r16, 0x01	; 1
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	48 ec       	ldi	r20, 0xC8	; 200
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	6c e4       	ldi	r22, 0x4C	; 76
    27f2:	70 e2       	ldi	r23, 0x20	; 32
    27f4:	8f e3       	ldi	r24, 0x3F	; 63
    27f6:	93 e1       	ldi	r25, 0x13	; 19
    27f8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vLed2Handler, (const char *) "led2", configMINIMAL_STACK_SIZE, NULL, 1, &led2Task);
    27fc:	9d ef       	ldi	r25, 0xFD	; 253
    27fe:	e9 2e       	mov	r14, r25
    2800:	94 e3       	ldi	r25, 0x34	; 52
    2802:	f9 2e       	mov	r15, r25
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	48 ec       	ldi	r20, 0xC8	; 200
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	61 e5       	ldi	r22, 0x51	; 81
    280e:	70 e2       	ldi	r23, 0x20	; 32
    2810:	8e e4       	ldi	r24, 0x4E	; 78
    2812:	93 e1       	ldi	r25, 0x13	; 19
    2814:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vLed3Handler, (const char *) "led3", configMINIMAL_STACK_SIZE, NULL, 1, &led3Task);
    2818:	25 ef       	ldi	r18, 0xF5	; 245
    281a:	e2 2e       	mov	r14, r18
    281c:	24 e3       	ldi	r18, 0x34	; 52
    281e:	f2 2e       	mov	r15, r18
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	48 ec       	ldi	r20, 0xC8	; 200
    2826:	50 e0       	ldi	r21, 0x00	; 0
    2828:	66 e5       	ldi	r22, 0x56	; 86
    282a:	70 e2       	ldi	r23, 0x20	; 32
    282c:	8d e5       	ldi	r24, 0x5D	; 93
    282e:	93 e1       	ldi	r25, 0x13	; 19
    2830:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vLed4Handler, (const char *) "led4", configMINIMAL_STACK_SIZE, NULL, 1, &led4Task);
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	e3 2e       	mov	r14, r19
    2838:	34 e3       	ldi	r19, 0x34	; 52
    283a:	f3 2e       	mov	r15, r19
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	48 ec       	ldi	r20, 0xC8	; 200
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	6b e5       	ldi	r22, 0x5B	; 91
    2846:	70 e2       	ldi	r23, 0x20	; 32
    2848:	8c e6       	ldi	r24, 0x6C	; 108
    284a:	93 e1       	ldi	r25, 0x13	; 19
    284c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vLed5Handler, (const char *) "led5", configMINIMAL_STACK_SIZE, NULL, 1, &led5Task);
    2850:	4b ef       	ldi	r20, 0xFB	; 251
    2852:	e4 2e       	mov	r14, r20
    2854:	44 e3       	ldi	r20, 0x34	; 52
    2856:	f4 2e       	mov	r15, r20
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	48 ec       	ldi	r20, 0xC8	; 200
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	60 e6       	ldi	r22, 0x60	; 96
    2862:	70 e2       	ldi	r23, 0x20	; 32
    2864:	8b e7       	ldi	r24, 0x7B	; 123
    2866:	93 e1       	ldi	r25, 0x13	; 19
    2868:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vLed6Handler, (const char *) "led6", configMINIMAL_STACK_SIZE, NULL, 1, &led6Task);
    286c:	55 e0       	ldi	r21, 0x05	; 5
    286e:	e5 2e       	mov	r14, r21
    2870:	55 e3       	ldi	r21, 0x35	; 53
    2872:	f5 2e       	mov	r15, r21
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	48 ec       	ldi	r20, 0xC8	; 200
    287a:	50 e0       	ldi	r21, 0x00	; 0
    287c:	65 e6       	ldi	r22, 0x65	; 101
    287e:	70 e2       	ldi	r23, 0x20	; 32
    2880:	8a e8       	ldi	r24, 0x8A	; 138
    2882:	93 e1       	ldi	r25, 0x13	; 19
    2884:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vLed7Handler, (const char *) "led7", configMINIMAL_STACK_SIZE, NULL, 1, &led7Task);
    2888:	61 e0       	ldi	r22, 0x01	; 1
    288a:	e6 2e       	mov	r14, r22
    288c:	65 e3       	ldi	r22, 0x35	; 53
    288e:	f6 2e       	mov	r15, r22
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	48 ec       	ldi	r20, 0xC8	; 200
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	6a e6       	ldi	r22, 0x6A	; 106
    289a:	70 e2       	ldi	r23, 0x20	; 32
    289c:	89 e9       	ldi	r24, 0x99	; 153
    289e:	93 e1       	ldi	r25, 0x13	; 19
    28a0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vLed8Handler, (const char *) "led8", configMINIMAL_STACK_SIZE, NULL, 1, &led8Task);
    28a4:	73 e0       	ldi	r23, 0x03	; 3
    28a6:	e7 2e       	mov	r14, r23
    28a8:	75 e3       	ldi	r23, 0x35	; 53
    28aa:	f7 2e       	mov	r15, r23
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	48 ec       	ldi	r20, 0xC8	; 200
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	6f e6       	ldi	r22, 0x6F	; 111
    28b6:	70 e2       	ldi	r23, 0x20	; 32
    28b8:	88 ea       	ldi	r24, 0xA8	; 168
    28ba:	93 e1       	ldi	r25, 0x13	; 19
    28bc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vLoadKiller, (const char *) "loadkill", configMINIMAL_STACK_SIZE, NULL, 2, &loadkillerTask);
    28c0:	e7 ef       	ldi	r30, 0xF7	; 247
    28c2:	ee 2e       	mov	r14, r30
    28c4:	e4 e3       	ldi	r30, 0x34	; 52
    28c6:	fe 2e       	mov	r15, r30
    28c8:	02 e0       	ldi	r16, 0x02	; 2
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	48 ec       	ldi	r20, 0xC8	; 200
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	64 e7       	ldi	r22, 0x74	; 116
    28d4:	70 e2       	ldi	r23, 0x20	; 32
    28d6:	84 e4       	ldi	r24, 0x44	; 68
    28d8:	92 e1       	ldi	r25, 0x12	; 18
    28da:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
	xTaskCreate( vDisplayManager, (const char *) "dispmng", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    28de:	e1 2c       	mov	r14, r1
    28e0:	f1 2c       	mov	r15, r1
    28e2:	03 e0       	ldi	r16, 0x03	; 3
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	48 ec       	ldi	r20, 0xC8	; 200
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	6d e7       	ldi	r22, 0x7D	; 125
    28ee:	70 e2       	ldi	r23, 0x20	; 32
    28f0:	85 ee       	ldi	r24, 0xE5	; 229
    28f2:	92 e1       	ldi	r25, 0x12	; 18
    28f4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>

	vTaskSuspend(loadkillerTask);
    28f8:	80 91 f7 34 	lds	r24, 0x34F7	; 0x8034f7 <loadkillerTask>
    28fc:	90 91 f8 34 	lds	r25, 0x34F8	; 0x8034f8 <loadkillerTask+0x1>
    2900:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <vTaskSuspend>
	
	vDisplayClear();
    2904:	0e 94 09 17 	call	0x2e12	; 0x2e12 <vDisplayClear>
	vDisplayWriteStringAtPos(0,0,"FreeRTOS 10.0.1");
    2908:	8d e0       	ldi	r24, 0x0D	; 13
    290a:	90 e2       	ldi	r25, 0x20	; 32
    290c:	9f 93       	push	r25
    290e:	8f 93       	push	r24
    2910:	1f 92       	push	r1
    2912:	1f 92       	push	r1
    2914:	1f 92       	push	r1
    2916:	1f 92       	push	r1
    2918:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vDisplayWriteStringAtPos>
 	vDisplayWriteStringAtPos(1,0,"EDUBoard 1.0");
    291c:	8d e1       	ldi	r24, 0x1D	; 29
    291e:	90 e2       	ldi	r25, 0x20	; 32
    2920:	9f 93       	push	r25
    2922:	8f 93       	push	r24
    2924:	1f 92       	push	r1
    2926:	1f 92       	push	r1
    2928:	1f 92       	push	r1
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	8f 93       	push	r24
    292e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vDisplayWriteStringAtPos>
 	vDisplayWriteStringAtPos(2,0,"TaskManagement");
    2932:	8a e2       	ldi	r24, 0x2A	; 42
    2934:	90 e2       	ldi	r25, 0x20	; 32
    2936:	9f 93       	push	r25
    2938:	8f 93       	push	r24
    293a:	1f 92       	push	r1
    293c:	1f 92       	push	r1
    293e:	1f 92       	push	r1
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	8f 93       	push	r24
    2944:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vDisplayWriteStringAtPos>
 	vDisplayWriteStringAtPos(3,0,"ResetReason: %d", reason);
    2948:	1f 92       	push	r1
    294a:	cf 93       	push	r28
    294c:	85 e8       	ldi	r24, 0x85	; 133
    294e:	90 e2       	ldi	r25, 0x20	; 32
    2950:	9f 93       	push	r25
    2952:	8f 93       	push	r24
    2954:	1f 92       	push	r1
    2956:	1f 92       	push	r1
    2958:	1f 92       	push	r1
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	8f 93       	push	r24
    295e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vDisplayWriteStringAtPos>
	vTaskStartScheduler();
    2962:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vTaskStartScheduler>
    2966:	8d b7       	in	r24, 0x3d	; 61
    2968:	9e b7       	in	r25, 0x3e	; 62
    296a:	4a 96       	adiw	r24, 0x1a	; 26
    296c:	8d bf       	out	0x3d, r24	; 61
    296e:	9e bf       	out	0x3e, r25	; 62
	return 0;
}
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	cf 91       	pop	r28
    2976:	0f 91       	pop	r16
    2978:	ff 90       	pop	r15
    297a:	ef 90       	pop	r14
    297c:	08 95       	ret

0000297e <__vector_108>:
 void displayHome() {
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
    297e:	1f 92       	push	r1
    2980:	0f 92       	push	r0
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	0f 92       	push	r0
    2986:	11 24       	eor	r1, r1
    2988:	0b b6       	in	r0, 0x3b	; 59
    298a:	0f 92       	push	r0
    298c:	2f 93       	push	r18
    298e:	3f 93       	push	r19
    2990:	4f 93       	push	r20
    2992:	5f 93       	push	r21
    2994:	6f 93       	push	r22
    2996:	7f 93       	push	r23
    2998:	8f 93       	push	r24
    299a:	9f 93       	push	r25
    299c:	af 93       	push	r26
    299e:	bf 93       	push	r27
    29a0:	ef 93       	push	r30
    29a2:	ff 93       	push	r31
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	1f 92       	push	r1
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	19 82       	std	Y+1, r1	; 0x01
    29b0:	9e 01       	movw	r18, r28
    29b2:	2f 5f       	subi	r18, 0xFF	; 255
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	41 e0       	ldi	r20, 0x01	; 1
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <egDisplayTiming>
    29c2:	90 91 0a 35 	lds	r25, 0x350A	; 0x80350a <egDisplayTiming+0x1>
    29c6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <xEventGroupSetBitsFromISR>
    29ca:	60 e0       	ldi	r22, 0x00	; 0
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	9b e0       	ldi	r25, 0x0B	; 11
    29d0:	0e 94 4e 02 	call	0x49c	; 0x49c <TC0_ConfigClockSource>
    29d4:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x700b06>
    29d8:	0f 90       	pop	r0
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	ff 91       	pop	r31
    29e0:	ef 91       	pop	r30
    29e2:	bf 91       	pop	r27
    29e4:	af 91       	pop	r26
    29e6:	9f 91       	pop	r25
    29e8:	8f 91       	pop	r24
    29ea:	7f 91       	pop	r23
    29ec:	6f 91       	pop	r22
    29ee:	5f 91       	pop	r21
    29f0:	4f 91       	pop	r20
    29f2:	3f 91       	pop	r19
    29f4:	2f 91       	pop	r18
    29f6:	0f 90       	pop	r0
    29f8:	0b be       	out	0x3b, r0	; 59
    29fa:	0f 90       	pop	r0
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	0f 90       	pop	r0
    2a00:	1f 90       	pop	r1
    2a02:	18 95       	reti

00002a04 <delayUS>:
    2a04:	cf 92       	push	r12
    2a06:	df 92       	push	r13
    2a08:	ef 92       	push	r14
    2a0a:	ff 92       	push	r15
    2a0c:	0f 93       	push	r16
    2a0e:	6b 01       	movw	r12, r22
    2a10:	7c 01       	movw	r14, r24
    2a12:	82 e0       	ldi	r24, 0x02	; 2
    2a14:	c8 16       	cp	r12, r24
    2a16:	d1 04       	cpc	r13, r1
    2a18:	e1 04       	cpc	r14, r1
    2a1a:	f1 04       	cpc	r15, r1
    2a1c:	28 f4       	brcc	.+10     	; 0x2a28 <delayUS+0x24>
    2a1e:	32 e0       	ldi	r19, 0x02	; 2
    2a20:	c3 2e       	mov	r12, r19
    2a22:	d1 2c       	mov	r13, r1
    2a24:	e1 2c       	mov	r14, r1
    2a26:	f1 2c       	mov	r15, r1
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x700b06>
    2a2e:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <__TEXT_REGION_LENGTH__+0x700b20>
    2a32:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <__TEXT_REGION_LENGTH__+0x700b21>
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	9b e0       	ldi	r25, 0x0B	; 11
    2a3c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <TC0_ConfigWGM>
    2a40:	8e ef       	ldi	r24, 0xFE	; 254
    2a42:	c8 16       	cp	r12, r24
    2a44:	8f ef       	ldi	r24, 0xFF	; 255
    2a46:	d8 06       	cpc	r13, r24
    2a48:	e1 04       	cpc	r14, r1
    2a4a:	f1 04       	cpc	r15, r1
    2a4c:	50 f4       	brcc	.+20     	; 0x2a62 <delayUS+0x5e>
    2a4e:	f6 94       	lsr	r15
    2a50:	e7 94       	ror	r14
    2a52:	d7 94       	ror	r13
    2a54:	c7 94       	ror	r12
    2a56:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    2a5a:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    2a5e:	65 e0       	ldi	r22, 0x05	; 5
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <delayUS+0x86>
    2a62:	80 e4       	ldi	r24, 0x40	; 64
    2a64:	c8 16       	cp	r12, r24
    2a66:	82 e4       	ldi	r24, 0x42	; 66
    2a68:	d8 06       	cpc	r13, r24
    2a6a:	8f e0       	ldi	r24, 0x0F	; 15
    2a6c:	e8 06       	cpc	r14, r24
    2a6e:	f1 04       	cpc	r15, r1
    2a70:	80 f4       	brcc	.+32     	; 0x2a92 <delayUS+0x8e>
    2a72:	95 e0       	ldi	r25, 0x05	; 5
    2a74:	f6 94       	lsr	r15
    2a76:	e7 94       	ror	r14
    2a78:	d7 94       	ror	r13
    2a7a:	c7 94       	ror	r12
    2a7c:	9a 95       	dec	r25
    2a7e:	d1 f7       	brne	.-12     	; 0x2a74 <delayUS+0x70>
    2a80:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x700b26>
    2a84:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x700b27>
    2a88:	67 e0       	ldi	r22, 0x07	; 7
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	9b e0       	ldi	r25, 0x0B	; 11
    2a8e:	0e 94 4e 02 	call	0x49c	; 0x49c <TC0_ConfigClockSource>
    2a92:	84 ef       	ldi	r24, 0xF4	; 244
    2a94:	c8 2e       	mov	r12, r24
    2a96:	dd 24       	eor	r13, r13
    2a98:	d3 94       	inc	r13
    2a9a:	e1 2c       	mov	r14, r1
    2a9c:	f1 2c       	mov	r15, r1
    2a9e:	00 e0       	ldi	r16, 0x00	; 0
    2aa0:	21 e0       	ldi	r18, 0x01	; 1
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <egDisplayTiming>
    2aae:	90 91 0a 35 	lds	r25, 0x350A	; 0x80350a <egDisplayTiming+0x1>
    2ab2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <xEventGroupWaitBits>
    2ab6:	0f 91       	pop	r16
    2ab8:	ff 90       	pop	r15
    2aba:	ef 90       	pop	r14
    2abc:	df 90       	pop	r13
    2abe:	cf 90       	pop	r12
    2ac0:	08 95       	ret

00002ac2 <setPort>:
    2ac2:	82 95       	swap	r24
    2ac4:	80 7f       	andi	r24, 0xF0	; 240
    2ac6:	e0 e0       	ldi	r30, 0x00	; 0
    2ac8:	f6 e0       	ldi	r31, 0x06	; 6
    2aca:	94 81       	ldd	r25, Z+4	; 0x04
    2acc:	28 2f       	mov	r18, r24
    2ace:	2f 60       	ori	r18, 0x0F	; 15
    2ad0:	92 23       	and	r25, r18
    2ad2:	94 83       	std	Z+4, r25	; 0x04
    2ad4:	94 81       	ldd	r25, Z+4	; 0x04
    2ad6:	89 2b       	or	r24, r25
    2ad8:	84 83       	std	Z+4, r24	; 0x04
    2ada:	08 95       	ret

00002adc <Nybble>:
    2adc:	1f 93       	push	r17
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	c0 e6       	ldi	r28, 0x60	; 96
    2ae4:	d6 e0       	ldi	r29, 0x06	; 6
    2ae6:	14 e0       	ldi	r17, 0x04	; 4
    2ae8:	1d 83       	std	Y+5, r17	; 0x05
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	70 e0       	ldi	r23, 0x00	; 0
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 02 15 	call	0x2a04	; 0x2a04 <delayUS>
    2af6:	1e 83       	std	Y+6, r17	; 0x06
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	08 95       	ret

00002b00 <command>:
    2b00:	cf 93       	push	r28
    2b02:	c8 2f       	mov	r28, r24
    2b04:	82 95       	swap	r24
    2b06:	8f 70       	andi	r24, 0x0F	; 15
    2b08:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <setPort>
    2b0c:	e0 e6       	ldi	r30, 0x60	; 96
    2b0e:	f6 e0       	ldi	r31, 0x06	; 6
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	86 83       	std	Z+6, r24	; 0x06
    2b14:	82 e0       	ldi	r24, 0x02	; 2
    2b16:	86 83       	std	Z+6, r24	; 0x06
    2b18:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Nybble>
    2b1c:	8c 2f       	mov	r24, r28
    2b1e:	8f 70       	andi	r24, 0x0F	; 15
    2b20:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <setPort>
    2b24:	cf 91       	pop	r28
    2b26:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <Nybble>

00002b2a <write>:
    2b2a:	cf 93       	push	r28
    2b2c:	c8 2f       	mov	r28, r24
    2b2e:	82 95       	swap	r24
    2b30:	8f 70       	andi	r24, 0x0F	; 15
    2b32:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <setPort>
    2b36:	e0 e6       	ldi	r30, 0x60	; 96
    2b38:	f6 e0       	ldi	r31, 0x06	; 6
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	85 83       	std	Z+5, r24	; 0x05
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	86 83       	std	Z+6, r24	; 0x06
    2b42:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Nybble>
    2b46:	8c 2f       	mov	r24, r28
    2b48:	8f 70       	andi	r24, 0x0F	; 15
    2b4a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <setPort>
    2b4e:	cf 91       	pop	r28
    2b50:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <Nybble>

00002b54 <vInitDisplay>:
 }
 
 void vInitDisplay() {
    2b54:	ef 92       	push	r14
    2b56:	ff 92       	push	r15
    2b58:	0f 93       	push	r16
	PORTA.DIRSET = PIN4_bm;
    2b5a:	e0 e0       	ldi	r30, 0x00	; 0
    2b5c:	f6 e0       	ldi	r31, 0x06	; 6
    2b5e:	80 e1       	ldi	r24, 0x10	; 16
    2b60:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2b62:	80 e2       	ldi	r24, 0x20	; 32
    2b64:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN6_bm;
    2b66:	80 e4       	ldi	r24, 0x40	; 64
    2b68:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN7_bm;
    2b6a:	80 e8       	ldi	r24, 0x80	; 128
    2b6c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2b6e:	a0 e6       	ldi	r26, 0x60	; 96
    2b70:	b6 e0       	ldi	r27, 0x06	; 6
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	11 96       	adiw	r26, 0x01	; 1
    2b76:	8c 93       	st	X, r24
    2b78:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN1_bm;
    2b7a:	82 e0       	ldi	r24, 0x02	; 2
    2b7c:	11 96       	adiw	r26, 0x01	; 1
    2b7e:	8c 93       	st	X, r24
    2b80:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN2_bm;
    2b82:	84 e0       	ldi	r24, 0x04	; 4
    2b84:	11 96       	adiw	r26, 0x01	; 1
    2b86:	8c 93       	st	X, r24
    2b88:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUT &= 0x0F;
    2b8a:	84 81       	ldd	r24, Z+4	; 0x04
    2b8c:	8f 70       	andi	r24, 0x0F	; 15
    2b8e:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= 0xF8;
    2b90:	14 96       	adiw	r26, 0x04	; 4
    2b92:	8c 91       	ld	r24, X
    2b94:	14 97       	sbiw	r26, 0x04	; 4
    2b96:	88 7f       	andi	r24, 0xF8	; 248
    2b98:	14 96       	adiw	r26, 0x04	; 4
    2b9a:	8c 93       	st	X, r24

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    2b9c:	40 e0       	ldi	r20, 0x00	; 0
    2b9e:	66 e1       	ldi	r22, 0x16	; 22
    2ba0:	85 e0       	ldi	r24, 0x05	; 5
    2ba2:	0e 94 60 07 	call	0xec0	; 0xec0 <xQueueGenericCreate>
    2ba6:	80 93 07 35 	sts	0x3507, r24	; 0x803507 <displayLineQueue>
    2baa:	90 93 08 35 	sts	0x3508, r25	; 0x803508 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    2bae:	0e 94 69 02 	call	0x4d2	; 0x4d2 <xEventGroupCreate>
    2bb2:	80 93 09 35 	sts	0x3509, r24	; 0x803509 <egDisplayTiming>
    2bb6:	90 93 0a 35 	sts	0x350A, r25	; 0x80350a <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);	
    2bba:	e1 2c       	mov	r14, r1
    2bbc:	f1 2c       	mov	r15, r1
    2bbe:	03 e0       	ldi	r16, 0x03	; 3
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4e e5       	ldi	r20, 0x5E	; 94
    2bc6:	51 e0       	ldi	r21, 0x01	; 1
    2bc8:	65 e9       	ldi	r22, 0x95	; 149
    2bca:	70 e2       	ldi	r23, 0x20	; 32
    2bcc:	82 e3       	ldi	r24, 0x32	; 50
    2bce:	96 e1       	ldi	r25, 0x16	; 22
    2bd0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <xTaskCreate>
 }
    2bd4:	0f 91       	pop	r16
    2bd6:	ff 90       	pop	r15
    2bd8:	ef 90       	pop	r14
    2bda:	08 95       	ret

00002bdc <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    2bdc:	9c 01       	movw	r18, r24
    2bde:	86 2f       	mov	r24, r22
	 switch(line) {
    2be0:	21 30       	cpi	r18, 0x01	; 1
    2be2:	31 05       	cpc	r19, r1
    2be4:	69 f0       	breq	.+26     	; 0x2c00 <_displaySetPos+0x24>
    2be6:	24 f4       	brge	.+8      	; 0x2bf0 <_displaySetPos+0x14>
    2be8:	23 2b       	or	r18, r19
    2bea:	79 f4       	brne	.+30     	; 0x2c0a <_displaySetPos+0x2e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    2bec:	80 58       	subi	r24, 0x80	; 128
    2bee:	0b c0       	rjmp	.+22     	; 0x2c06 <_displaySetPos+0x2a>

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);	
 }
 
 void _displaySetPos(int line, int pos) {
	 switch(line) {
    2bf0:	22 30       	cpi	r18, 0x02	; 2
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	39 f0       	breq	.+14     	; 0x2c04 <_displaySetPos+0x28>
    2bf6:	23 30       	cpi	r18, 0x03	; 3
    2bf8:	31 05       	cpc	r19, r1
    2bfa:	39 f4       	brne	.+14     	; 0x2c0a <_displaySetPos+0x2e>
		 break;
		 case 2:
		 command(0x80 + 0x14 + pos);
		 break;
		 case 3:
		 command(0x80 + 0x54 + pos);
    2bfc:	8c 52       	subi	r24, 0x2C	; 44
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <_displaySetPos+0x2a>
	 switch(line) {
		 case 0:
		 command(0x80 + 0x00 + pos);
		 break;
		 case 1:
		 command(0x80 + 0x40 + pos);
    2c00:	80 54       	subi	r24, 0x40	; 64
    2c02:	01 c0       	rjmp	.+2      	; 0x2c06 <_displaySetPos+0x2a>
		 break;
		 case 2:
		 command(0x80 + 0x14 + pos);
    2c04:	8c 56       	subi	r24, 0x6C	; 108
		 break;
		 case 3:
		 command(0x80 + 0x54 + pos);
    2c06:	0e 94 80 15 	call	0x2b00	; 0x2b00 <command>
		 break;
	 }
	 delayUS(39);
    2c0a:	67 e2       	ldi	r22, 0x27	; 39
    2c0c:	70 e0       	ldi	r23, 0x00	; 0
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <delayUS>

00002c16 <_displayWriteChar>:
 }

 void _displayWriteChar(char c) {
	 write(c);
    2c16:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <write>
	 delayUS(43);
    2c1a:	6b e2       	ldi	r22, 0x2B	; 43
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <delayUS>

00002c26 <_displayWriteString>:
 }
 
 void _displayWriteString(char* s) {
    2c26:	0f 93       	push	r16
    2c28:	1f 93       	push	r17
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	ec 01       	movw	r28, r24
    2c30:	8c 01       	movw	r16, r24
    2c32:	0c 5e       	subi	r16, 0xEC	; 236
    2c34:	1f 4f       	sbci	r17, 0xFF	; 255
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
    2c36:	89 91       	ld	r24, Y+
    2c38:	88 23       	and	r24, r24
    2c3a:	29 f0       	breq	.+10     	; 0x2c46 <_displayWriteString+0x20>
			 break;
		 }
		 _displayWriteChar(s[i]);
    2c3c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    2c40:	c0 17       	cp	r28, r16
    2c42:	d1 07       	cpc	r29, r17
    2c44:	c1 f7       	brne	.-16     	; 0x2c36 <_displayWriteString+0x10>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	08 95       	ret

00002c50 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	ea 01       	movw	r28, r20
	 _displaySetPos(line, pos);
    2c56:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <_displaySetPos>
	 _displayWriteString(s);
    2c5a:	ce 01       	movw	r24, r28
 }
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
	 }
 }

 void _displayWriteStringAtPos(int line, int pos, char* s) {
	 _displaySetPos(line, pos);
	 _displayWriteString(s);
    2c60:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_displayWriteString>

00002c64 <vDisplayUpdateTask>:
 }

 void vDisplayUpdateTask(void *pvParameters) {
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	c6 56       	subi	r28, 0x66	; 102
    2c6e:	d1 09       	sbc	r29, r1
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	8e 01       	movw	r16, r28
    2c76:	0f 5a       	subi	r16, 0xAF	; 175
    2c78:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7a:	9e 01       	movw	r18, r28
    2c7c:	2f 5f       	subi	r18, 0xFF	; 255
    2c7e:	3f 4f       	sbci	r19, 0xFF	; 255
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    2c80:	40 e2       	ldi	r20, 0x20	; 32
 void _displayWriteStringAtPos(int line, int pos, char* s) {
	 _displaySetPos(line, pos);
	 _displayWriteString(s);
 }

 void vDisplayUpdateTask(void *pvParameters) {
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    2c86:	f9 01       	movw	r30, r18
    2c88:	e8 0f       	add	r30, r24
    2c8a:	f9 1f       	adc	r31, r25
    2c8c:	40 83       	st	Z, r20
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    2c8e:	01 96       	adiw	r24, 0x01	; 1
    2c90:	84 31       	cpi	r24, 0x14	; 20
    2c92:	91 05       	cpc	r25, r1
    2c94:	c1 f7       	brne	.-16     	; 0x2c86 <vDisplayUpdateTask+0x22>
    2c96:	2c 5e       	subi	r18, 0xEC	; 236
    2c98:	3f 4f       	sbci	r19, 0xFF	; 255

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    2c9a:	20 17       	cp	r18, r16
    2c9c:	31 07       	cpc	r19, r17
    2c9e:	89 f7       	brne	.-30     	; 0x2c82 <vDisplayUpdateTask+0x1e>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    2ca0:	60 e4       	ldi	r22, 0x40	; 64
    2ca2:	7c e9       	ldi	r23, 0x9C	; 156
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 02 15 	call	0x2a04	; 0x2a04 <delayUS>
	 setPort(0x03);
    2cac:	83 e0       	ldi	r24, 0x03	; 3
    2cae:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <setPort>
	 delayUS(5000);
    2cb2:	68 e8       	ldi	r22, 0x88	; 136
    2cb4:	73 e1       	ldi	r23, 0x13	; 19
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0e 94 02 15 	call	0x2a04	; 0x2a04 <delayUS>
	 Nybble();
    2cbe:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Nybble>
	 delayUS(160);
    2cc2:	60 ea       	ldi	r22, 0xA0	; 160
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 02 15 	call	0x2a04	; 0x2a04 <delayUS>
	 Nybble();
    2cce:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Nybble>
	 delayUS(160);
    2cd2:	60 ea       	ldi	r22, 0xA0	; 160
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 02 15 	call	0x2a04	; 0x2a04 <delayUS>
	 Nybble();
    2cde:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Nybble>
	 delayUS(160);
    2ce2:	60 ea       	ldi	r22, 0xA0	; 160
    2ce4:	70 e0       	ldi	r23, 0x00	; 0
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	0e 94 02 15 	call	0x2a04	; 0x2a04 <delayUS>
	 setPort(0x02);
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <setPort>
	 Nybble();
    2cf4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Nybble>
	 command(0x28);
    2cf8:	88 e2       	ldi	r24, 0x28	; 40
    2cfa:	0e 94 80 15 	call	0x2b00	; 0x2b00 <command>
	 command(0x10);
    2cfe:	80 e1       	ldi	r24, 0x10	; 16
    2d00:	0e 94 80 15 	call	0x2b00	; 0x2b00 <command>
	 command(0x0C); //Cursor and Blinking off
    2d04:	8c e0       	ldi	r24, 0x0C	; 12
    2d06:	0e 94 80 15 	call	0x2b00	; 0x2b00 <command>
	 command(0x06);
    2d0a:	86 e0       	ldi	r24, 0x06	; 6
    2d0c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <command>
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    2d10:	60 e2       	ldi	r22, 0x20	; 32
    2d12:	b6 2e       	mov	r11, r22
	 command(0x10);
	 command(0x0C); //Cursor and Blinking off
	 command(0x06);
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    2d14:	68 ec       	ldi	r22, 0xC8	; 200
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    2d20:	40 e0       	ldi	r20, 0x00	; 0
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	ba 01       	movw	r22, r20
    2d26:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <egDisplayTiming>
    2d2a:	90 91 0a 35 	lds	r25, 0x350A	; 0x80350a <egDisplayTiming+0x1>
    2d2e:	0e 94 36 03 	call	0x66c	; 0x66c <xEventGroupClearBits>
    2d32:	67 2b       	or	r22, r23
    2d34:	68 2b       	or	r22, r24
    2d36:	69 2b       	or	r22, r25
    2d38:	e9 f1       	breq	.+122    	; 0x2db4 <vDisplayUpdateTask+0x150>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2d3a:	42 e0       	ldi	r20, 0x02	; 2
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <egDisplayTiming>
    2d46:	90 91 0a 35 	lds	r25, 0x350A	; 0x80350a <egDisplayTiming+0x1>
    2d4a:	0e 94 36 03 	call	0x66c	; 0x66c <xEventGroupClearBits>
    2d4e:	9e 01       	movw	r18, r28
    2d50:	2f 5f       	subi	r18, 0xFF	; 255
    2d52:	3f 4f       	sbci	r19, 0xFF	; 255
 void _displayWriteStringAtPos(int line, int pos, char* s) {
	 _displaySetPos(line, pos);
	 _displayWriteString(s);
 }

 void vDisplayUpdateTask(void *pvParameters) {
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    2d58:	f9 01       	movw	r30, r18
    2d5a:	e8 0f       	add	r30, r24
    2d5c:	f9 1f       	adc	r31, r25
    2d5e:	b0 82       	st	Z, r11
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	84 31       	cpi	r24, 0x14	; 20
    2d64:	91 05       	cpc	r25, r1
    2d66:	c1 f7       	brne	.-16     	; 0x2d58 <vDisplayUpdateTask+0xf4>
    2d68:	2c 5e       	subi	r18, 0xEC	; 236
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    2d6c:	20 17       	cp	r18, r16
    2d6e:	31 07       	cpc	r19, r17
    2d70:	89 f7       	brne	.-30     	; 0x2d54 <vDisplayUpdateTask+0xf0>
    2d72:	20 c0       	rjmp	.+64     	; 0x2db4 <vDisplayUpdateTask+0x150>
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    2d74:	2f ef       	ldi	r18, 0xFF	; 255
    2d76:	3f ef       	ldi	r19, 0xFF	; 255
    2d78:	a9 01       	movw	r20, r18
    2d7a:	b8 01       	movw	r22, r16
    2d7c:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <displayLineQueue>
    2d80:	90 91 08 35 	lds	r25, 0x3508	; 0x803508 <displayLineQueue+0x1>
    2d84:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <xQueueReceive>
    2d88:	88 23       	and	r24, r24
    2d8a:	a1 f0       	breq	.+40     	; 0x2db4 <vDisplayUpdateTask+0x150>
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	80 81       	ld	r24, Z
    2d90:	d8 01       	movw	r26, r16
    2d92:	12 96       	adiw	r26, 0x02	; 2
    2d94:	21 81       	ldd	r18, Z+1	; 0x01
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	b9 01       	movw	r22, r18
    2d9a:	f4 e1       	ldi	r31, 0x14	; 20
    2d9c:	8f 9f       	mul	r24, r31
    2d9e:	60 0d       	add	r22, r0
    2da0:	71 1d       	adc	r23, r1
    2da2:	11 24       	eor	r1, r1
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2da8:	a9 01       	movw	r20, r18
    2daa:	48 0f       	add	r20, r24
    2dac:	59 1f       	adc	r21, r25
    2dae:	44 31       	cpi	r20, 0x14	; 20
    2db0:	51 05       	cpc	r21, r1
    2db2:	48 f0       	brcs	.+18     	; 0x2dc6 <vDisplayUpdateTask+0x162>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    2db4:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <displayLineQueue>
    2db8:	90 91 08 35 	lds	r25, 0x3508	; 0x803508 <displayLineQueue+0x1>
    2dbc:	0e 94 0c 09 	call	0x1218	; 0x1218 <uxQueueMessagesWaiting>
    2dc0:	81 11       	cpse	r24, r1
    2dc2:	d8 cf       	rjmp	.-80     	; 0x2d74 <vDisplayUpdateTask+0x110>
    2dc4:	10 c0       	rjmp	.+32     	; 0x2de6 <vDisplayUpdateTask+0x182>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2dc6:	4d 91       	ld	r20, X+
    2dc8:	44 23       	and	r20, r20
    2dca:	a1 f3       	breq	.-24     	; 0x2db4 <vDisplayUpdateTask+0x150>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    2dcc:	fb 01       	movw	r30, r22
    2dce:	e8 0f       	add	r30, r24
    2dd0:	f9 1f       	adc	r31, r25
    2dd2:	ee 24       	eor	r14, r14
    2dd4:	e3 94       	inc	r14
    2dd6:	f1 2c       	mov	r15, r1
    2dd8:	ec 0e       	add	r14, r28
    2dda:	fd 1e       	adc	r15, r29
    2ddc:	ee 0d       	add	r30, r14
    2dde:	ff 1d       	adc	r31, r15
    2de0:	40 83       	st	Z, r20
					i++;
    2de2:	01 96       	adiw	r24, 0x01	; 1
    2de4:	e1 cf       	rjmp	.-62     	; 0x2da8 <vDisplayUpdateTask+0x144>
    2de6:	ce 01       	movw	r24, r28
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	6c 01       	movw	r12, r24
    2dec:	e1 2c       	mov	r14, r1
    2dee:	f1 2c       	mov	r15, r1
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    2df0:	a6 01       	movw	r20, r12
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	c7 01       	movw	r24, r14
    2df8:	0e 94 28 16 	call	0x2c50	; 0x2c50 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    2dfc:	9f ef       	ldi	r25, 0xFF	; 255
    2dfe:	e9 1a       	sub	r14, r25
    2e00:	f9 0a       	sbc	r15, r25
    2e02:	e4 e1       	ldi	r30, 0x14	; 20
    2e04:	ce 0e       	add	r12, r30
    2e06:	d1 1c       	adc	r13, r1
    2e08:	f4 e0       	ldi	r31, 0x04	; 4
    2e0a:	ef 16       	cp	r14, r31
    2e0c:	f1 04       	cpc	r15, r1
    2e0e:	81 f7       	brne	.-32     	; 0x2df0 <vDisplayUpdateTask+0x18c>
    2e10:	81 cf       	rjmp	.-254    	; 0x2d14 <vDisplayUpdateTask+0xb0>

00002e12 <vDisplayClear>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2e12:	42 e0       	ldi	r20, 0x02	; 2
    2e14:	50 e0       	ldi	r21, 0x00	; 0
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	70 e0       	ldi	r23, 0x00	; 0
    2e1a:	80 91 09 35 	lds	r24, 0x3509	; 0x803509 <egDisplayTiming>
    2e1e:	90 91 0a 35 	lds	r25, 0x350A	; 0x80350a <egDisplayTiming+0x1>
    2e22:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <xEventGroupSetBits>

00002e26 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    2e26:	2f 92       	push	r2
    2e28:	3f 92       	push	r3
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	6b 97       	sbiw	r28, 0x1b	; 27
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	29 a9       	ldd	r18, Y+49	; 0x31
    2e56:	2b 8f       	std	Y+27, r18	; 0x1b
    2e58:	4d a9       	ldd	r20, Y+53	; 0x35
    2e5a:	5e a9       	ldd	r21, Y+54	; 0x36
	va_list arg;	
	va_start(arg, fmt);
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	f7 96       	adiw	r30, 0x37	; 55
	display_vprintf(line, pos, fmt, arg);
    2e60:	8c ed       	ldi	r24, 0xDC	; 220
    2e62:	94 e3       	ldi	r25, 0x34	; 52
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
    2e64:	dc 01       	movw	r26, r24
    2e66:	1d 92       	st	X+, r1
    2e68:	cd 01       	movw	r24, r26
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    2e6a:	b4 e3       	ldi	r27, 0x34	; 52
    2e6c:	80 3f       	cpi	r24, 0xF0	; 240
    2e6e:	9b 07       	cpc	r25, r27
    2e70:	c9 f7       	brne	.-14     	; 0x2e64 <vDisplayWriteStringAtPos+0x3e>
    2e72:	88 ec       	ldi	r24, 0xC8	; 200
    2e74:	94 e3       	ldi	r25, 0x34	; 52
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
    2e76:	dc 01       	movw	r26, r24
    2e78:	1d 92       	st	X+, r1
    2e7a:	cd 01       	movw	r24, r26
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    2e7c:	b4 e3       	ldi	r27, 0x34	; 52
    2e7e:	8c 3d       	cpi	r24, 0xDC	; 220
    2e80:	9b 07       	cpc	r25, r27
    2e82:	c9 f7       	brne	.-14     	; 0x2e76 <vDisplayWriteStringAtPos+0x50>
    2e84:	00 e0       	ldi	r16, 0x00	; 0
    2e86:	10 e0       	ldi	r17, 0x00	; 0
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
        *buffer++ = '-';
    2e88:	6d e2       	ldi	r22, 0x2D	; 45
    2e8a:	26 2e       	mov	r2, r22
void ftoa_sci(char *buffer, double value) {
    int exponent = 0;    
    static const int width = 4;

    if (value == 0.0) {
        buffer[0] = '0';
    2e8c:	70 e3       	ldi	r23, 0x30	; 48
    2e8e:	37 2e       	mov	r3, r23
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    2e90:	da 01       	movw	r26, r20
    2e92:	8c 91       	ld	r24, X
    2e94:	88 23       	and	r24, r24
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <vDisplayWriteStringAtPos+0x74>
    2e98:	64 c2       	rjmp	.+1224   	; 0x3362 <vDisplayWriteStringAtPos+0x53c>
		if ( '%' == ch ) {
    2e9a:	85 32       	cpi	r24, 0x25	; 37
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <vDisplayWriteStringAtPos+0x7a>
    2e9e:	4e c2       	rjmp	.+1180   	; 0x333c <vDisplayWriteStringAtPos+0x516>
			switch (ch = *fmt++) {
    2ea0:	9a 01       	movw	r18, r20
    2ea2:	2e 5f       	subi	r18, 0xFE	; 254
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	29 8f       	std	Y+25, r18	; 0x19
    2ea8:	3a 8f       	std	Y+26, r19	; 0x1a
    2eaa:	da 01       	movw	r26, r20
    2eac:	11 96       	adiw	r26, 0x01	; 1
    2eae:	8c 91       	ld	r24, X
    2eb0:	85 36       	cpi	r24, 0x65	; 101
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <vDisplayWriteStringAtPos+0x90>
    2eb4:	79 c1       	rjmp	.+754    	; 0x31a8 <vDisplayWriteStringAtPos+0x382>
    2eb6:	58 f4       	brcc	.+22     	; 0x2ece <vDisplayWriteStringAtPos+0xa8>
    2eb8:	83 36       	cpi	r24, 0x63	; 99
    2eba:	91 f0       	breq	.+36     	; 0x2ee0 <vDisplayWriteStringAtPos+0xba>
    2ebc:	e8 f5       	brcc	.+122    	; 0x2f38 <vDisplayWriteStringAtPos+0x112>
    2ebe:	85 32       	cpi	r24, 0x25	; 37
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <vDisplayWriteStringAtPos+0x9e>
    2ec2:	4c c2       	rjmp	.+1176   	; 0x335c <vDisplayWriteStringAtPos+0x536>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    2ec4:	d8 01       	movw	r26, r16
    2ec6:	a8 53       	subi	r26, 0x38	; 56
    2ec8:	bb 4c       	sbci	r27, 0xCB	; 203
    2eca:	8c 93       	st	X, r24
    2ecc:	45 c2       	rjmp	.+1162   	; 0x3358 <vDisplayWriteStringAtPos+0x532>
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
		if ( '%' == ch ) {
			switch (ch = *fmt++) {
    2ece:	83 37       	cpi	r24, 0x73	; 115
    2ed0:	81 f0       	breq	.+32     	; 0x2ef2 <vDisplayWriteStringAtPos+0xcc>
    2ed2:	88 37       	cpi	r24, 0x78	; 120
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <vDisplayWriteStringAtPos+0xb2>
    2ed6:	53 c0       	rjmp	.+166    	; 0x2f7e <vDisplayWriteStringAtPos+0x158>
    2ed8:	86 36       	cpi	r24, 0x66	; 102
    2eda:	09 f0       	breq	.+2      	; 0x2ede <vDisplayWriteStringAtPos+0xb8>
    2edc:	3f c2       	rjmp	.+1150   	; 0x335c <vDisplayWriteStringAtPos+0x536>
    2ede:	76 c0       	rjmp	.+236    	; 0x2fcc <vDisplayWriteStringAtPos+0x1a6>
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
				str[length] = char_temp;
    2ee0:	d8 01       	movw	r26, r16
    2ee2:	a8 53       	subi	r26, 0x38	; 56
    2ee4:	bb 4c       	sbci	r27, 0xCB	; 203
    2ee6:	80 81       	ld	r24, Z
    2ee8:	8c 93       	st	X, r24
				length++;
    2eea:	0f 5f       	subi	r16, 0xFF	; 255
    2eec:	1f 4f       	sbci	r17, 0xFF	; 255
				length++;
				break;

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    2eee:	32 96       	adiw	r30, 0x02	; 2
    2ef0:	35 c2       	rjmp	.+1130   	; 0x335c <vDisplayWriteStringAtPos+0x536>
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2ef2:	af 01       	movw	r20, r30
    2ef4:	4e 5f       	subi	r20, 0xFE	; 254
    2ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef8:	01 90       	ld	r0, Z+
    2efa:	f0 81       	ld	r31, Z
    2efc:	e0 2d       	mov	r30, r0
    2efe:	98 01       	movw	r18, r16
    2f00:	28 53       	subi	r18, 0x38	; 56
    2f02:	3b 4c       	sbci	r19, 0xCB	; 203
    2f04:	7f 01       	movw	r14, r30
				for(int i = 0; i < strlen(string_temp);i++) {
    2f06:	df 01       	movw	r26, r30
    2f08:	0d 90       	ld	r0, X+
    2f0a:	00 20       	and	r0, r0
    2f0c:	e9 f7       	brne	.-6      	; 0x2f08 <vDisplayWriteStringAtPos+0xe2>
    2f0e:	cd 01       	movw	r24, r26
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	8e 1b       	sub	r24, r30
    2f14:	9f 0b       	sbc	r25, r31
    2f16:	b7 01       	movw	r22, r14
    2f18:	6e 1b       	sub	r22, r30
    2f1a:	7f 0b       	sbc	r23, r31
    2f1c:	68 17       	cp	r22, r24
    2f1e:	79 07       	cpc	r23, r25
    2f20:	38 f4       	brcc	.+14     	; 0x2f30 <vDisplayWriteStringAtPos+0x10a>
					str[length+i] = string_temp[i];
    2f22:	d7 01       	movw	r26, r14
    2f24:	8d 91       	ld	r24, X+
    2f26:	7d 01       	movw	r14, r26
    2f28:	d9 01       	movw	r26, r18
    2f2a:	8d 93       	st	X+, r24
    2f2c:	9d 01       	movw	r18, r26
    2f2e:	eb cf       	rjmp	.-42     	; 0x2f06 <vDisplayWriteStringAtPos+0xe0>
				}
				length += strlen(string_temp);
    2f30:	08 0f       	add	r16, r24
    2f32:	19 1f       	adc	r17, r25
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    2f34:	fa 01       	movw	r30, r20
    2f36:	12 c2       	rjmp	.+1060   	; 0x335c <vDisplayWriteStringAtPos+0x536>
				length += strlen(string_temp);
				break;

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    2f38:	7f 01       	movw	r14, r30
    2f3a:	b2 e0       	ldi	r27, 0x02	; 2
    2f3c:	eb 0e       	add	r14, r27
    2f3e:	f1 1c       	adc	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2f40:	4a e0       	ldi	r20, 0x0A	; 10
    2f42:	6c ed       	ldi	r22, 0xDC	; 220
    2f44:	74 e3       	ldi	r23, 0x34	; 52
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__itoa_ncheck>
    2f4e:	c8 01       	movw	r24, r16
    2f50:	88 53       	subi	r24, 0x38	; 56
    2f52:	9b 4c       	sbci	r25, 0xCB	; 203
    2f54:	ac ed       	ldi	r26, 0xDC	; 220
    2f56:	b4 e3       	ldi	r27, 0x34	; 52
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    2f58:	ec ed       	ldi	r30, 0xDC	; 220
    2f5a:	f4 e3       	ldi	r31, 0x34	; 52
    2f5c:	01 90       	ld	r0, Z+
    2f5e:	00 20       	and	r0, r0
    2f60:	e9 f7       	brne	.-6      	; 0x2f5c <vDisplayWriteStringAtPos+0x136>
    2f62:	31 97       	sbiw	r30, 0x01	; 1
    2f64:	ec 5d       	subi	r30, 0xDC	; 220
    2f66:	f4 43       	sbci	r31, 0x34	; 52
    2f68:	9d 01       	movw	r18, r26
    2f6a:	2c 5d       	subi	r18, 0xDC	; 220
    2f6c:	34 43       	sbci	r19, 0x34	; 52
    2f6e:	2e 17       	cp	r18, r30
    2f70:	3f 07       	cpc	r19, r31
    2f72:	40 f5       	brcc	.+80     	; 0x2fc4 <vDisplayWriteStringAtPos+0x19e>
					str[length+i] = buffer[i];
    2f74:	2d 91       	ld	r18, X+
    2f76:	fc 01       	movw	r30, r24
    2f78:	21 93       	st	Z+, r18
    2f7a:	cf 01       	movw	r24, r30
    2f7c:	ed cf       	rjmp	.-38     	; 0x2f58 <vDisplayWriteStringAtPos+0x132>
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2f7e:	7f 01       	movw	r14, r30
    2f80:	22 e0       	ldi	r18, 0x02	; 2
    2f82:	e2 0e       	add	r14, r18
    2f84:	f1 1c       	adc	r15, r1
    2f86:	40 e1       	ldi	r20, 0x10	; 16
    2f88:	6c ed       	ldi	r22, 0xDC	; 220
    2f8a:	74 e3       	ldi	r23, 0x34	; 52
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__itoa_ncheck>
    2f94:	c8 01       	movw	r24, r16
    2f96:	88 53       	subi	r24, 0x38	; 56
    2f98:	9b 4c       	sbci	r25, 0xCB	; 203
    2f9a:	ac ed       	ldi	r26, 0xDC	; 220
    2f9c:	b4 e3       	ldi	r27, 0x34	; 52
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    2f9e:	ec ed       	ldi	r30, 0xDC	; 220
    2fa0:	f4 e3       	ldi	r31, 0x34	; 52
    2fa2:	01 90       	ld	r0, Z+
    2fa4:	00 20       	and	r0, r0
    2fa6:	e9 f7       	brne	.-6      	; 0x2fa2 <vDisplayWriteStringAtPos+0x17c>
    2fa8:	31 97       	sbiw	r30, 0x01	; 1
    2faa:	ec 5d       	subi	r30, 0xDC	; 220
    2fac:	f4 43       	sbci	r31, 0x34	; 52
    2fae:	9d 01       	movw	r18, r26
    2fb0:	2c 5d       	subi	r18, 0xDC	; 220
    2fb2:	34 43       	sbci	r19, 0x34	; 52
    2fb4:	2e 17       	cp	r18, r30
    2fb6:	3f 07       	cpc	r19, r31
    2fb8:	28 f4       	brcc	.+10     	; 0x2fc4 <vDisplayWriteStringAtPos+0x19e>
					str[length+i] = buffer[i];
    2fba:	2d 91       	ld	r18, X+
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	21 93       	st	Z+, r18
    2fc0:	cf 01       	movw	r24, r30
    2fc2:	ed cf       	rjmp	.-38     	; 0x2f9e <vDisplayWriteStringAtPos+0x178>
				}
				length += strlen(buffer);
    2fc4:	0e 0f       	add	r16, r30
    2fc6:	1f 1f       	adc	r17, r31
				length += strlen(buffer);
				break;

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    2fc8:	f7 01       	movw	r30, r14
    2fca:	c8 c1       	rjmp	.+912    	; 0x335c <vDisplayWriteStringAtPos+0x536>
				}
				length += strlen(buffer);
				break;

				case 'f':
				double_temp = va_arg(arg, double);
    2fcc:	9f 01       	movw	r18, r30
    2fce:	2c 5f       	subi	r18, 0xFC	; 252
    2fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd2:	2f 8b       	std	Y+23, r18	; 0x17
    2fd4:	38 8f       	std	Y+24, r19	; 0x18
    2fd6:	80 80       	ld	r8, Z
    2fd8:	91 80       	ldd	r9, Z+1	; 0x01
    2fda:	a2 80       	ldd	r10, Z+2	; 0x02
    2fdc:	b3 80       	ldd	r11, Z+3	; 0x03

    int exponent = 0;
    int places = 0;
    static const int width = 4;

    if (value == 0.0) {
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	a9 01       	movw	r20, r18
    2fe4:	c5 01       	movw	r24, r10
    2fe6:	b4 01       	movw	r22, r8
    2fe8:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
    2fec:	81 11       	cpse	r24, r1
    2fee:	05 c0       	rjmp	.+10     	; 0x2ffa <vDisplayWriteStringAtPos+0x1d4>
        buffer[0] = '0';
    2ff0:	30 92 dc 34 	sts	0x34DC, r3	; 0x8034dc <buffer.4995>
        buffer[1] = '\0';
    2ff4:	10 92 dd 34 	sts	0x34DD, r1	; 0x8034dd <buffer.4995+0x1>
    2ff8:	be c0       	rjmp	.+380    	; 0x3176 <vDisplayWriteStringAtPos+0x350>
        return;
    }         

    if (value < 0.0) {
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	a9 01       	movw	r20, r18
    3000:	c5 01       	movw	r24, r10
    3002:	b4 01       	movw	r22, r8
    3004:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
    3008:	87 ff       	sbrs	r24, 7
    300a:	0b c0       	rjmp	.+22     	; 0x3022 <vDisplayWriteStringAtPos+0x1fc>
        *buffer++ = '-';
    300c:	20 92 dc 34 	sts	0x34DC, r2	; 0x8034dc <buffer.4995>
        value = -value;
    3010:	b7 fa       	bst	r11, 7
    3012:	b0 94       	com	r11
    3014:	b7 f8       	bld	r11, 7
    3016:	b0 94       	com	r11
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
        *buffer++ = '-';
    3018:	3d ed       	ldi	r19, 0xDD	; 221
    301a:	43 2e       	mov	r4, r19
    301c:	34 e3       	ldi	r19, 0x34	; 52
    301e:	53 2e       	mov	r5, r19
    3020:	04 c0       	rjmp	.+8      	; 0x302a <vDisplayWriteStringAtPos+0x204>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }         

    if (value < 0.0) {
    3022:	2c ed       	ldi	r18, 0xDC	; 220
    3024:	42 2e       	mov	r4, r18
    3026:	24 e3       	ldi	r18, 0x34	; 52
    3028:	52 2e       	mov	r5, r18
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    302a:	61 2c       	mov	r6, r1
    302c:	71 2c       	mov	r7, r1
    double value = *val;

    while (value >= 1.0) {
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	c5 01       	movw	r24, r10
    3038:	b4 01       	movw	r22, r8
    303a:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__gesf2>
    303e:	87 fd       	sbrc	r24, 7
    3040:	0e c0       	rjmp	.+28     	; 0x305e <vDisplayWriteStringAtPos+0x238>
        value /= 10.0;
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e2       	ldi	r20, 0x20	; 32
    3048:	51 e4       	ldi	r21, 0x41	; 65
    304a:	c5 01       	movw	r24, r10
    304c:	b4 01       	movw	r22, r8
    304e:	0e 94 8f 1a 	call	0x351e	; 0x351e <__divsf3>
    3052:	4b 01       	movw	r8, r22
    3054:	5c 01       	movw	r10, r24
        ++exponent;
    3056:	3f ef       	ldi	r19, 0xFF	; 255
    3058:	63 1a       	sub	r6, r19
    305a:	73 0a       	sbc	r7, r19
    305c:	e8 cf       	rjmp	.-48     	; 0x302e <vDisplayWriteStringAtPos+0x208>
    }

    while (value < 0.1) {
    305e:	2d ec       	ldi	r18, 0xCD	; 205
    3060:	3c ec       	ldi	r19, 0xCC	; 204
    3062:	4c ec       	ldi	r20, 0xCC	; 204
    3064:	5d e3       	ldi	r21, 0x3D	; 61
    3066:	c5 01       	movw	r24, r10
    3068:	b4 01       	movw	r22, r8
    306a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
    306e:	87 ff       	sbrs	r24, 7
    3070:	0e c0       	rjmp	.+28     	; 0x308e <vDisplayWriteStringAtPos+0x268>
        value *= 10.0;
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e2       	ldi	r20, 0x20	; 32
    3078:	51 e4       	ldi	r21, 0x41	; 65
    307a:	c5 01       	movw	r24, r10
    307c:	b4 01       	movw	r22, r8
    307e:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    3082:	4b 01       	movw	r8, r22
    3084:	5c 01       	movw	r10, r24
        --exponent;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	68 1a       	sub	r6, r24
    308a:	71 08       	sbc	r7, r1
    308c:	e8 cf       	rjmp	.-48     	; 0x305e <vDisplayWriteStringAtPos+0x238>
    308e:	62 01       	movw	r12, r4
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3090:	73 01       	movw	r14, r6
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    3092:	1e 14       	cp	r1, r14
    3094:	1f 04       	cpc	r1, r15
    3096:	1c f5       	brge	.+70     	; 0x30de <vDisplayWriteStringAtPos+0x2b8>
        int digit = value * 10;
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	c5 01       	movw	r24, r10
    30a2:	b4 01       	movw	r22, r8
    30a4:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    30a8:	4b 01       	movw	r8, r22
    30aa:	5c 01       	movw	r10, r24
    30ac:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixsfsi>
        *buffer++ = digit + '0';
    30b0:	20 e3       	ldi	r18, 0x30	; 48
    30b2:	26 0f       	add	r18, r22
    30b4:	d6 01       	movw	r26, r12
    30b6:	2d 93       	st	X+, r18
    30b8:	6d 01       	movw	r12, r26
        value = value * 10 - digit;
    30ba:	07 2e       	mov	r0, r23
    30bc:	00 0c       	add	r0, r0
    30be:	88 0b       	sbc	r24, r24
    30c0:	99 0b       	sbc	r25, r25
    30c2:	0e 94 39 1b 	call	0x3672	; 0x3672 <__floatsisf>
    30c6:	9b 01       	movw	r18, r22
    30c8:	ac 01       	movw	r20, r24
    30ca:	c5 01       	movw	r24, r10
    30cc:	b4 01       	movw	r22, r8
    30ce:	0e 94 1d 1a 	call	0x343a	; 0x343a <__subsf3>
    30d2:	4b 01       	movw	r8, r22
    30d4:	5c 01       	movw	r10, r24
        ++places;
        --exponent;
    30d6:	b1 e0       	ldi	r27, 0x01	; 1
    30d8:	eb 1a       	sub	r14, r27
    30da:	f1 08       	sbc	r15, r1
    30dc:	da cf       	rjmp	.-76     	; 0x3092 <vDisplayWriteStringAtPos+0x26c>
    30de:	63 01       	movw	r12, r6
    30e0:	77 fe       	sbrs	r7, 7
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <vDisplayWriteStringAtPos+0x2c2>
    30e4:	c1 2c       	mov	r12, r1
    30e6:	d1 2c       	mov	r13, r1
    30e8:	f2 01       	movw	r30, r4
    30ea:	ec 0d       	add	r30, r12
    30ec:	fd 1d       	adc	r31, r13
    30ee:	6c 18       	sub	r6, r12
    30f0:	7d 08       	sbc	r7, r13
    }

    if (places == 0)
    30f2:	c1 14       	cp	r12, r1
    30f4:	d1 04       	cpc	r13, r1
    30f6:	19 f4       	brne	.+6      	; 0x30fe <vDisplayWriteStringAtPos+0x2d8>
        *buffer++ = '0';
    30f8:	30 82       	st	Z, r3
    30fa:	f2 01       	movw	r30, r4
    30fc:	31 96       	adiw	r30, 0x01	; 1

    *buffer++ = '.';
    30fe:	2e e2       	ldi	r18, 0x2E	; 46
    3100:	21 93       	st	Z+, r18
    3102:	6c 0c       	add	r6, r12
    3104:	7d 1c       	adc	r7, r13
    3106:	df 01       	movw	r26, r30

    while (exponent < 0 && places < width) {
    3108:	c6 14       	cp	r12, r6
    310a:	d7 04       	cpc	r13, r7
    310c:	21 f4       	brne	.+8      	; 0x3116 <vDisplayWriteStringAtPos+0x2f0>
    310e:	7f 01       	movw	r14, r30
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    3110:	ce 1a       	sub	r12, r30
    3112:	df 0a       	sbc	r13, r31
    3114:	09 c0       	rjmp	.+18     	; 0x3128 <vDisplayWriteStringAtPos+0x302>
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    3116:	84 e0       	ldi	r24, 0x04	; 4
    3118:	c8 16       	cp	r12, r24
    311a:	d1 04       	cpc	r13, r1
    311c:	5c f5       	brge	.+86     	; 0x3174 <vDisplayWriteStringAtPos+0x34e>
        *buffer++ = '0';
    311e:	31 92       	st	Z+, r3
        --exponent;
        ++places;
    3120:	3f ef       	ldi	r19, 0xFF	; 255
    3122:	c3 1a       	sub	r12, r19
    3124:	d3 0a       	sbc	r13, r19
    3126:	ef cf       	rjmp	.-34     	; 0x3106 <vDisplayWriteStringAtPos+0x2e0>
    3128:	d7 01       	movw	r26, r14
    }

    while (places < width) {
    312a:	c6 01       	movw	r24, r12
    312c:	8e 0d       	add	r24, r14
    312e:	9f 1d       	adc	r25, r15
    3130:	04 97       	sbiw	r24, 0x04	; 4
    3132:	04 f5       	brge	.+64     	; 0x3174 <vDisplayWriteStringAtPos+0x34e>
        int digit = value * 10.0;
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	c5 01       	movw	r24, r10
    313e:	b4 01       	movw	r22, r8
    3140:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    3144:	4b 01       	movw	r8, r22
    3146:	5c 01       	movw	r10, r24
    3148:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixsfsi>
        *buffer++ = digit + '0';
    314c:	20 e3       	ldi	r18, 0x30	; 48
    314e:	26 0f       	add	r18, r22
    3150:	d7 01       	movw	r26, r14
    3152:	2d 93       	st	X+, r18
    3154:	7d 01       	movw	r14, r26
        value = value * 10.0 - digit;
    3156:	07 2e       	mov	r0, r23
    3158:	00 0c       	add	r0, r0
    315a:	88 0b       	sbc	r24, r24
    315c:	99 0b       	sbc	r25, r25
    315e:	0e 94 39 1b 	call	0x3672	; 0x3672 <__floatsisf>
    3162:	9b 01       	movw	r18, r22
    3164:	ac 01       	movw	r20, r24
    3166:	c5 01       	movw	r24, r10
    3168:	b4 01       	movw	r22, r8
    316a:	0e 94 1d 1a 	call	0x343a	; 0x343a <__subsf3>
    316e:	4b 01       	movw	r8, r22
    3170:	5c 01       	movw	r10, r24
    3172:	da cf       	rjmp	.-76     	; 0x3128 <vDisplayWriteStringAtPos+0x302>
        ++places;
    }
    *buffer = '\0';
    3174:	1c 92       	st	X, r1
    3176:	c8 01       	movw	r24, r16
    3178:	88 53       	subi	r24, 0x38	; 56
    317a:	9b 4c       	sbci	r25, 0xCB	; 203
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    317c:	ac ed       	ldi	r26, 0xDC	; 220
    317e:	b4 e3       	ldi	r27, 0x34	; 52
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    3180:	ec ed       	ldi	r30, 0xDC	; 220
    3182:	f4 e3       	ldi	r31, 0x34	; 52
    3184:	01 90       	ld	r0, Z+
    3186:	00 20       	and	r0, r0
    3188:	e9 f7       	brne	.-6      	; 0x3184 <vDisplayWriteStringAtPos+0x35e>
    318a:	31 97       	sbiw	r30, 0x01	; 1
    318c:	ec 5d       	subi	r30, 0xDC	; 220
    318e:	f4 43       	sbci	r31, 0x34	; 52
    3190:	9d 01       	movw	r18, r26
    3192:	2c 5d       	subi	r18, 0xDC	; 220
    3194:	34 43       	sbci	r19, 0x34	; 52
    3196:	2e 17       	cp	r18, r30
    3198:	3f 07       	cpc	r19, r31
    319a:	08 f0       	brcs	.+2      	; 0x319e <vDisplayWriteStringAtPos+0x378>
    319c:	ca c0       	rjmp	.+404    	; 0x3332 <vDisplayWriteStringAtPos+0x50c>
					str[length+i] = buffer[i];
    319e:	2d 91       	ld	r18, X+
    31a0:	fc 01       	movw	r30, r24
    31a2:	21 93       	st	Z+, r18
    31a4:	cf 01       	movw	r24, r30
    31a6:	ec cf       	rjmp	.-40     	; 0x3180 <vDisplayWriteStringAtPos+0x35a>
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    31a8:	9f 01       	movw	r18, r30
    31aa:	2c 5f       	subi	r18, 0xFC	; 252
    31ac:	3f 4f       	sbci	r19, 0xFF	; 255
    31ae:	2f 8b       	std	Y+23, r18	; 0x17
    31b0:	38 8f       	std	Y+24, r19	; 0x18
    31b2:	80 80       	ld	r8, Z
    31b4:	91 80       	ldd	r9, Z+1	; 0x01
    31b6:	a2 80       	ldd	r10, Z+2	; 0x02
    31b8:	b3 80       	ldd	r11, Z+3	; 0x03

void ftoa_sci(char *buffer, double value) {
    int exponent = 0;    
    static const int width = 4;

    if (value == 0.0) {
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	a9 01       	movw	r20, r18
    31c0:	c5 01       	movw	r24, r10
    31c2:	b4 01       	movw	r22, r8
    31c4:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
    31c8:	81 11       	cpse	r24, r1
    31ca:	05 c0       	rjmp	.+10     	; 0x31d6 <vDisplayWriteStringAtPos+0x3b0>
        buffer[0] = '0';
    31cc:	30 92 dc 34 	sts	0x34DC, r3	; 0x8034dc <buffer.4995>
        buffer[1] = '\0';
    31d0:	10 92 dd 34 	sts	0x34DD, r1	; 0x8034dd <buffer.4995+0x1>
    31d4:	96 c0       	rjmp	.+300    	; 0x3302 <vDisplayWriteStringAtPos+0x4dc>
        return;
    }

    if (value < 0.0) {
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	a9 01       	movw	r20, r18
    31dc:	c5 01       	movw	r24, r10
    31de:	b4 01       	movw	r22, r8
    31e0:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
    31e4:	87 ff       	sbrs	r24, 7
    31e6:	0b c0       	rjmp	.+22     	; 0x31fe <vDisplayWriteStringAtPos+0x3d8>
        *buffer++ = '-';
    31e8:	20 92 dc 34 	sts	0x34DC, r2	; 0x8034dc <buffer.4995>
        value = -value;
    31ec:	b7 fa       	bst	r11, 7
    31ee:	b0 94       	com	r11
    31f0:	b7 f8       	bld	r11, 7
    31f2:	b0 94       	com	r11
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
        *buffer++ = '-';
    31f4:	9d ed       	ldi	r25, 0xDD	; 221
    31f6:	e9 2e       	mov	r14, r25
    31f8:	94 e3       	ldi	r25, 0x34	; 52
    31fa:	f9 2e       	mov	r15, r25
    31fc:	04 c0       	rjmp	.+8      	; 0x3206 <vDisplayWriteStringAtPos+0x3e0>
        buffer[0] = '0';
        buffer[1] = '\0';
        return;
    }

    if (value < 0.0) {
    31fe:	8c ed       	ldi	r24, 0xDC	; 220
    3200:	e8 2e       	mov	r14, r24
    3202:	84 e3       	ldi	r24, 0x34	; 52
    3204:	f8 2e       	mov	r15, r24
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3206:	c1 2c       	mov	r12, r1
    3208:	d1 2c       	mov	r13, r1
    double value = *val;

    while (value >= 1.0) {
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e8       	ldi	r20, 0x80	; 128
    3210:	5f e3       	ldi	r21, 0x3F	; 63
    3212:	c5 01       	movw	r24, r10
    3214:	b4 01       	movw	r22, r8
    3216:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__gesf2>
    321a:	87 fd       	sbrc	r24, 7
    321c:	0e c0       	rjmp	.+28     	; 0x323a <vDisplayWriteStringAtPos+0x414>
        value /= 10.0;
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	40 e2       	ldi	r20, 0x20	; 32
    3224:	51 e4       	ldi	r21, 0x41	; 65
    3226:	c5 01       	movw	r24, r10
    3228:	b4 01       	movw	r22, r8
    322a:	0e 94 8f 1a 	call	0x351e	; 0x351e <__divsf3>
    322e:	4b 01       	movw	r8, r22
    3230:	5c 01       	movw	r10, r24
        ++exponent;
    3232:	3f ef       	ldi	r19, 0xFF	; 255
    3234:	c3 1a       	sub	r12, r19
    3236:	d3 0a       	sbc	r13, r19
    3238:	e8 cf       	rjmp	.-48     	; 0x320a <vDisplayWriteStringAtPos+0x3e4>
    }

    while (value < 0.1) {
    323a:	2d ec       	ldi	r18, 0xCD	; 205
    323c:	3c ec       	ldi	r19, 0xCC	; 204
    323e:	4c ec       	ldi	r20, 0xCC	; 204
    3240:	5d e3       	ldi	r21, 0x3D	; 61
    3242:	c5 01       	movw	r24, r10
    3244:	b4 01       	movw	r22, r8
    3246:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__cmpsf2>
    324a:	d6 01       	movw	r26, r12
    324c:	11 97       	sbiw	r26, 0x01	; 1
    324e:	6d 01       	movw	r12, r26
        value *= 10.0;
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	40 e2       	ldi	r20, 0x20	; 32
    3256:	51 e4       	ldi	r21, 0x41	; 65
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    3258:	87 ff       	sbrs	r24, 7
    325a:	07 c0       	rjmp	.+14     	; 0x326a <vDisplayWriteStringAtPos+0x444>
        value *= 10.0;
    325c:	c5 01       	movw	r24, r10
    325e:	b4 01       	movw	r22, r8
    3260:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    3264:	4b 01       	movw	r8, r22
    3266:	5c 01       	movw	r10, r24
    3268:	e8 cf       	rjmp	.-48     	; 0x323a <vDisplayWriteStringAtPos+0x414>
        value = -value;
    }

    exponent = normalize(&value);

    int digit = value * 10.0;
    326a:	c5 01       	movw	r24, r10
    326c:	b4 01       	movw	r22, r8
    326e:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    3272:	4b 01       	movw	r8, r22
    3274:	5c 01       	movw	r10, r24
    3276:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixsfsi>
    *buffer++ = digit + '0';
    327a:	20 e3       	ldi	r18, 0x30	; 48
    327c:	26 0f       	add	r18, r22
    327e:	f7 01       	movw	r30, r14
    3280:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    3282:	07 2e       	mov	r0, r23
    3284:	00 0c       	add	r0, r0
    3286:	88 0b       	sbc	r24, r24
    3288:	99 0b       	sbc	r25, r25
    328a:	0e 94 39 1b 	call	0x3672	; 0x3672 <__floatsisf>
    328e:	9b 01       	movw	r18, r22
    3290:	ac 01       	movw	r20, r24
    3292:	c5 01       	movw	r24, r10
    3294:	b4 01       	movw	r22, r8
    3296:	0e 94 1d 1a 	call	0x343a	; 0x343a <__subsf3>
    --exponent;

    *buffer++ = '.';
    329a:	ee e2       	ldi	r30, 0x2E	; 46
    329c:	d7 01       	movw	r26, r14
    329e:	11 96       	adiw	r26, 0x01	; 1
    32a0:	ec 93       	st	X, r30
    32a2:	57 01       	movw	r10, r14
    32a4:	f2 e0       	ldi	r31, 0x02	; 2
    32a6:	af 0e       	add	r10, r31
    32a8:	b1 1c       	adc	r11, r1
    32aa:	47 01       	movw	r8, r14
    32ac:	26 e0       	ldi	r18, 0x06	; 6
    32ae:	82 0e       	add	r8, r18
    32b0:	91 1c       	adc	r9, r1

    for (int i = 0; i < width; i++) {
        int digit = value * 10.0;
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e2       	ldi	r20, 0x20	; 32
    32b8:	51 e4       	ldi	r21, 0x41	; 65
    32ba:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    32be:	2b 01       	movw	r4, r22
    32c0:	3c 01       	movw	r6, r24
    32c2:	0e 94 01 1b 	call	0x3602	; 0x3602 <__fixsfsi>
        *buffer++ = digit + '0';
    32c6:	20 e3       	ldi	r18, 0x30	; 48
    32c8:	26 0f       	add	r18, r22
    32ca:	d5 01       	movw	r26, r10
    32cc:	2d 93       	st	X+, r18
    32ce:	5d 01       	movw	r10, r26
        value = value * 10.0 - digit;
    32d0:	07 2e       	mov	r0, r23
    32d2:	00 0c       	add	r0, r0
    32d4:	88 0b       	sbc	r24, r24
    32d6:	99 0b       	sbc	r25, r25
    32d8:	0e 94 39 1b 	call	0x3672	; 0x3672 <__floatsisf>
    32dc:	9b 01       	movw	r18, r22
    32de:	ac 01       	movw	r20, r24
    32e0:	c3 01       	movw	r24, r6
    32e2:	b2 01       	movw	r22, r4
    32e4:	0e 94 1d 1a 	call	0x343a	; 0x343a <__subsf3>
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    32e8:	a8 14       	cp	r10, r8
    32ea:	b9 04       	cpc	r11, r9
    32ec:	11 f7       	brne	.-60     	; 0x32b2 <vDisplayWriteStringAtPos+0x48c>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    32ee:	25 e6       	ldi	r18, 0x65	; 101
    32f0:	f7 01       	movw	r30, r14
    32f2:	26 83       	std	Z+6, r18	; 0x06
    32f4:	b7 01       	movw	r22, r14
    32f6:	69 5f       	subi	r22, 0xF9	; 249
    32f8:	7f 4f       	sbci	r23, 0xFF	; 255
    32fa:	4a e0       	ldi	r20, 0x0A	; 10
    32fc:	c6 01       	movw	r24, r12
    32fe:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__itoa_ncheck>
    3302:	c8 01       	movw	r24, r16
    3304:	88 53       	subi	r24, 0x38	; 56
    3306:	9b 4c       	sbci	r25, 0xCB	; 203
	
	return length;
}

static int normalize(double *val) {
    int exponent = 0;
    3308:	ac ed       	ldi	r26, 0xDC	; 220
    330a:	b4 e3       	ldi	r27, 0x34	; 52
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    330c:	ec ed       	ldi	r30, 0xDC	; 220
    330e:	f4 e3       	ldi	r31, 0x34	; 52
    3310:	01 90       	ld	r0, Z+
    3312:	00 20       	and	r0, r0
    3314:	e9 f7       	brne	.-6      	; 0x3310 <vDisplayWriteStringAtPos+0x4ea>
    3316:	31 97       	sbiw	r30, 0x01	; 1
    3318:	ec 5d       	subi	r30, 0xDC	; 220
    331a:	f4 43       	sbci	r31, 0x34	; 52
    331c:	9d 01       	movw	r18, r26
    331e:	2c 5d       	subi	r18, 0xDC	; 220
    3320:	34 43       	sbci	r19, 0x34	; 52
    3322:	2e 17       	cp	r18, r30
    3324:	3f 07       	cpc	r19, r31
    3326:	28 f4       	brcc	.+10     	; 0x3332 <vDisplayWriteStringAtPos+0x50c>
					str[length+i] = buffer[i];
    3328:	2d 91       	ld	r18, X+
    332a:	fc 01       	movw	r30, r24
    332c:	21 93       	st	Z+, r18
    332e:	cf 01       	movw	r24, r30
    3330:	ed cf       	rjmp	.-38     	; 0x330c <vDisplayWriteStringAtPos+0x4e6>
				}
				length += strlen(buffer);
    3332:	0e 0f       	add	r16, r30
    3334:	1f 1f       	adc	r17, r31
				}
				length += strlen(buffer);
				break;

				case 'e':
				double_temp = va_arg(arg, double);
    3336:	ef 89       	ldd	r30, Y+23	; 0x17
    3338:	f8 8d       	ldd	r31, Y+24	; 0x18
    333a:	10 c0       	rjmp	.+32     	; 0x335c <vDisplayWriteStringAtPos+0x536>
    333c:	98 01       	movw	r18, r16
    333e:	28 53       	subi	r18, 0x38	; 56
    3340:	3b 4c       	sbci	r19, 0xCB	; 203
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
    3342:	d9 01       	movw	r26, r18
				break;
			}
		}
		else {
			str[length] = ch;
			if(str[length] == '\n') {
    3344:	8a 30       	cpi	r24, 0x0A	; 10
    3346:	11 f0       	breq	.+4      	; 0x334c <vDisplayWriteStringAtPos+0x526>
				length += strlen(buffer);
				break;
			}
		}
		else {
			str[length] = ch;
    3348:	8c 93       	st	X, r24
    334a:	01 c0       	rjmp	.+2      	; 0x334e <vDisplayWriteStringAtPos+0x528>
			if(str[length] == '\n') {
				str[length] = '\0';				
    334c:	1c 92       	st	X, r1
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    334e:	9a 01       	movw	r18, r20
    3350:	2f 5f       	subi	r18, 0xFF	; 255
    3352:	3f 4f       	sbci	r19, 0xFF	; 255
    3354:	29 8f       	std	Y+25, r18	; 0x19
    3356:	3a 8f       	std	Y+26, r19	; 0x1a
		else {
			str[length] = ch;
			if(str[length] == '\n') {
				str[length] = '\0';				
			}
			length++;
    3358:	0f 5f       	subi	r16, 0xFF	; 255
    335a:	1f 4f       	sbci	r17, 0xFF	; 255
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    335c:	49 8d       	ldd	r20, Y+25	; 0x19
    335e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3360:	97 cd       	rjmp	.-1234   	; 0x2e90 <vDisplayWriteStringAtPos+0x6a>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    3362:	8b a9       	ldd	r24, Y+51	; 0x33
    3364:	9c a9       	ldd	r25, Y+52	; 0x34
    3366:	80 0f       	add	r24, r16
    3368:	91 1f       	adc	r25, r17
    336a:	44 97       	sbiw	r24, 0x14	; 20
    336c:	34 f0       	brlt	.+12     	; 0x337a <vDisplayWriteStringAtPos+0x554>
		length = 20-pos;
    336e:	04 e1       	ldi	r16, 0x14	; 20
    3370:	10 e0       	ldi	r17, 0x00	; 0
    3372:	eb a9       	ldd	r30, Y+51	; 0x33
    3374:	fc a9       	ldd	r31, Y+52	; 0x34
    3376:	0e 1b       	sub	r16, r30
    3378:	1f 0b       	sbc	r17, r31
    337a:	de 01       	movw	r26, r28
    337c:	13 96       	adiw	r26, 0x03	; 3
    337e:	ce 01       	movw	r24, r28
    3380:	47 96       	adiw	r24, 0x17	; 23
				length++;
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    3382:	fd 01       	movw	r30, r26
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
    3384:	11 92       	st	Z+, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    3386:	e8 17       	cp	r30, r24
    3388:	f9 07       	cpc	r31, r25
    338a:	e1 f7       	brne	.-8      	; 0x3384 <vDisplayWriteStringAtPos+0x55e>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    338c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    338e:	f9 83       	std	Y+1, r31	; 0x01
	newLine.displayPos = pos;
    3390:	2b a9       	ldd	r18, Y+51	; 0x33
    3392:	2a 83       	std	Y+2, r18	; 0x02
    3394:	e8 ec       	ldi	r30, 0xC8	; 200
    3396:	f4 e3       	ldi	r31, 0x34	; 52
	for(int i = 0; i < length;i++) {
    3398:	cf 01       	movw	r24, r30
    339a:	88 5c       	subi	r24, 0xC8	; 200
    339c:	94 43       	sbci	r25, 0x34	; 52
    339e:	80 17       	cp	r24, r16
    33a0:	91 07       	cpc	r25, r17
    33a2:	1c f4       	brge	.+6      	; 0x33aa <vDisplayWriteStringAtPos+0x584>
		newLine.displayBuffer[i] = str[i];
    33a4:	81 91       	ld	r24, Z+
    33a6:	8d 93       	st	X+, r24
    33a8:	f7 cf       	rjmp	.-18     	; 0x3398 <vDisplayWriteStringAtPos+0x572>
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    33aa:	00 e0       	ldi	r16, 0x00	; 0
    33ac:	2f ef       	ldi	r18, 0xFF	; 255
    33ae:	3f ef       	ldi	r19, 0xFF	; 255
    33b0:	a9 01       	movw	r20, r18
    33b2:	be 01       	movw	r22, r28
    33b4:	6f 5f       	subi	r22, 0xFF	; 255
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	80 91 07 35 	lds	r24, 0x3507	; 0x803507 <displayLineQueue>
    33bc:	90 91 08 35 	lds	r25, 0x3508	; 0x803508 <displayLineQueue+0x1>
    33c0:	0e 94 8c 07 	call	0xf18	; 0xf18 <xQueueGenericSend>
void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
	va_end(arg);	
}
    33c4:	6b 96       	adiw	r28, 0x1b	; 27
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	1f 91       	pop	r17
    33d0:	0f 91       	pop	r16
    33d2:	ff 90       	pop	r15
    33d4:	ef 90       	pop	r14
    33d6:	df 90       	pop	r13
    33d8:	cf 90       	pop	r12
    33da:	bf 90       	pop	r11
    33dc:	af 90       	pop	r10
    33de:	9f 90       	pop	r9
    33e0:	8f 90       	pop	r8
    33e2:	7f 90       	pop	r7
    33e4:	6f 90       	pop	r6
    33e6:	5f 90       	pop	r5
    33e8:	4f 90       	pop	r4
    33ea:	3f 90       	pop	r3
    33ec:	2f 90       	pop	r2
    33ee:	08 95       	ret

000033f0 <getResetReason>:
    33f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    33f4:	85 ff       	sbrs	r24, 5
    33f6:	05 c0       	rjmp	.+10     	; 0x3402 <getResetReason+0x12>
    33f8:	80 e2       	ldi	r24, 0x20	; 32
    33fa:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	08 95       	ret
    3402:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3406:	80 ff       	sbrs	r24, 0
    3408:	04 c0       	rjmp	.+8      	; 0x3412 <getResetReason+0x22>
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3410:	12 c0       	rjmp	.+36     	; 0x3436 <getResetReason+0x46>
    3412:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3416:	84 ff       	sbrs	r24, 4
    3418:	05 c0       	rjmp	.+10     	; 0x3424 <getResetReason+0x34>
    341a:	80 e1       	ldi	r24, 0x10	; 16
    341c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3420:	83 e0       	ldi	r24, 0x03	; 3
    3422:	08 95       	ret
    3424:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3428:	81 ff       	sbrs	r24, 1
    342a:	05 c0       	rjmp	.+10     	; 0x3436 <getResetReason+0x46>
    342c:	82 e0       	ldi	r24, 0x02	; 2
    342e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    3432:	84 e0       	ldi	r24, 0x04	; 4
    3434:	08 95       	ret
    3436:	82 e0       	ldi	r24, 0x02	; 2
    3438:	08 95       	ret

0000343a <__subsf3>:
    343a:	50 58       	subi	r21, 0x80	; 128

0000343c <__addsf3>:
    343c:	bb 27       	eor	r27, r27
    343e:	aa 27       	eor	r26, r26
    3440:	0e 94 35 1a 	call	0x346a	; 0x346a <__addsf3x>
    3444:	0c 94 af 1b 	jmp	0x375e	; 0x375e <__fp_round>
    3448:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fp_pscA>
    344c:	38 f0       	brcs	.+14     	; 0x345c <__addsf3+0x20>
    344e:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__fp_pscB>
    3452:	20 f0       	brcs	.+8      	; 0x345c <__addsf3+0x20>
    3454:	39 f4       	brne	.+14     	; 0x3464 <__addsf3+0x28>
    3456:	9f 3f       	cpi	r25, 0xFF	; 255
    3458:	19 f4       	brne	.+6      	; 0x3460 <__addsf3+0x24>
    345a:	26 f4       	brtc	.+8      	; 0x3464 <__addsf3+0x28>
    345c:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__fp_nan>
    3460:	0e f4       	brtc	.+2      	; 0x3464 <__addsf3+0x28>
    3462:	e0 95       	com	r30
    3464:	e7 fb       	bst	r30, 7
    3466:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__fp_inf>

0000346a <__addsf3x>:
    346a:	e9 2f       	mov	r30, r25
    346c:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fp_split3>
    3470:	58 f3       	brcs	.-42     	; 0x3448 <__addsf3+0xc>
    3472:	ba 17       	cp	r27, r26
    3474:	62 07       	cpc	r22, r18
    3476:	73 07       	cpc	r23, r19
    3478:	84 07       	cpc	r24, r20
    347a:	95 07       	cpc	r25, r21
    347c:	20 f0       	brcs	.+8      	; 0x3486 <__addsf3x+0x1c>
    347e:	79 f4       	brne	.+30     	; 0x349e <__addsf3x+0x34>
    3480:	a6 f5       	brtc	.+104    	; 0x34ea <__addsf3x+0x80>
    3482:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__fp_zero>
    3486:	0e f4       	brtc	.+2      	; 0x348a <__addsf3x+0x20>
    3488:	e0 95       	com	r30
    348a:	0b 2e       	mov	r0, r27
    348c:	ba 2f       	mov	r27, r26
    348e:	a0 2d       	mov	r26, r0
    3490:	0b 01       	movw	r0, r22
    3492:	b9 01       	movw	r22, r18
    3494:	90 01       	movw	r18, r0
    3496:	0c 01       	movw	r0, r24
    3498:	ca 01       	movw	r24, r20
    349a:	a0 01       	movw	r20, r0
    349c:	11 24       	eor	r1, r1
    349e:	ff 27       	eor	r31, r31
    34a0:	59 1b       	sub	r21, r25
    34a2:	99 f0       	breq	.+38     	; 0x34ca <__addsf3x+0x60>
    34a4:	59 3f       	cpi	r21, 0xF9	; 249
    34a6:	50 f4       	brcc	.+20     	; 0x34bc <__addsf3x+0x52>
    34a8:	50 3e       	cpi	r21, 0xE0	; 224
    34aa:	68 f1       	brcs	.+90     	; 0x3506 <__addsf3x+0x9c>
    34ac:	1a 16       	cp	r1, r26
    34ae:	f0 40       	sbci	r31, 0x00	; 0
    34b0:	a2 2f       	mov	r26, r18
    34b2:	23 2f       	mov	r18, r19
    34b4:	34 2f       	mov	r19, r20
    34b6:	44 27       	eor	r20, r20
    34b8:	58 5f       	subi	r21, 0xF8	; 248
    34ba:	f3 cf       	rjmp	.-26     	; 0x34a2 <__addsf3x+0x38>
    34bc:	46 95       	lsr	r20
    34be:	37 95       	ror	r19
    34c0:	27 95       	ror	r18
    34c2:	a7 95       	ror	r26
    34c4:	f0 40       	sbci	r31, 0x00	; 0
    34c6:	53 95       	inc	r21
    34c8:	c9 f7       	brne	.-14     	; 0x34bc <__addsf3x+0x52>
    34ca:	7e f4       	brtc	.+30     	; 0x34ea <__addsf3x+0x80>
    34cc:	1f 16       	cp	r1, r31
    34ce:	ba 0b       	sbc	r27, r26
    34d0:	62 0b       	sbc	r22, r18
    34d2:	73 0b       	sbc	r23, r19
    34d4:	84 0b       	sbc	r24, r20
    34d6:	ba f0       	brmi	.+46     	; 0x3506 <__addsf3x+0x9c>
    34d8:	91 50       	subi	r25, 0x01	; 1
    34da:	a1 f0       	breq	.+40     	; 0x3504 <__addsf3x+0x9a>
    34dc:	ff 0f       	add	r31, r31
    34de:	bb 1f       	adc	r27, r27
    34e0:	66 1f       	adc	r22, r22
    34e2:	77 1f       	adc	r23, r23
    34e4:	88 1f       	adc	r24, r24
    34e6:	c2 f7       	brpl	.-16     	; 0x34d8 <__addsf3x+0x6e>
    34e8:	0e c0       	rjmp	.+28     	; 0x3506 <__addsf3x+0x9c>
    34ea:	ba 0f       	add	r27, r26
    34ec:	62 1f       	adc	r22, r18
    34ee:	73 1f       	adc	r23, r19
    34f0:	84 1f       	adc	r24, r20
    34f2:	48 f4       	brcc	.+18     	; 0x3506 <__addsf3x+0x9c>
    34f4:	87 95       	ror	r24
    34f6:	77 95       	ror	r23
    34f8:	67 95       	ror	r22
    34fa:	b7 95       	ror	r27
    34fc:	f7 95       	ror	r31
    34fe:	9e 3f       	cpi	r25, 0xFE	; 254
    3500:	08 f0       	brcs	.+2      	; 0x3504 <__addsf3x+0x9a>
    3502:	b0 cf       	rjmp	.-160    	; 0x3464 <__addsf3+0x28>
    3504:	93 95       	inc	r25
    3506:	88 0f       	add	r24, r24
    3508:	08 f0       	brcs	.+2      	; 0x350c <__addsf3x+0xa2>
    350a:	99 27       	eor	r25, r25
    350c:	ee 0f       	add	r30, r30
    350e:	97 95       	ror	r25
    3510:	87 95       	ror	r24
    3512:	08 95       	ret

00003514 <__cmpsf2>:
    3514:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__fp_cmp>
    3518:	08 f4       	brcc	.+2      	; 0x351c <__cmpsf2+0x8>
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	08 95       	ret

0000351e <__divsf3>:
    351e:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__divsf3x>
    3522:	0c 94 af 1b 	jmp	0x375e	; 0x375e <__fp_round>
    3526:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__fp_pscB>
    352a:	58 f0       	brcs	.+22     	; 0x3542 <__divsf3+0x24>
    352c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fp_pscA>
    3530:	40 f0       	brcs	.+16     	; 0x3542 <__divsf3+0x24>
    3532:	29 f4       	brne	.+10     	; 0x353e <__divsf3+0x20>
    3534:	5f 3f       	cpi	r21, 0xFF	; 255
    3536:	29 f0       	breq	.+10     	; 0x3542 <__divsf3+0x24>
    3538:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__fp_inf>
    353c:	51 11       	cpse	r21, r1
    353e:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <__fp_szero>
    3542:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__fp_nan>

00003546 <__divsf3x>:
    3546:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fp_split3>
    354a:	68 f3       	brcs	.-38     	; 0x3526 <__divsf3+0x8>

0000354c <__divsf3_pse>:
    354c:	99 23       	and	r25, r25
    354e:	b1 f3       	breq	.-20     	; 0x353c <__divsf3+0x1e>
    3550:	55 23       	and	r21, r21
    3552:	91 f3       	breq	.-28     	; 0x3538 <__divsf3+0x1a>
    3554:	95 1b       	sub	r25, r21
    3556:	55 0b       	sbc	r21, r21
    3558:	bb 27       	eor	r27, r27
    355a:	aa 27       	eor	r26, r26
    355c:	62 17       	cp	r22, r18
    355e:	73 07       	cpc	r23, r19
    3560:	84 07       	cpc	r24, r20
    3562:	38 f0       	brcs	.+14     	; 0x3572 <__divsf3_pse+0x26>
    3564:	9f 5f       	subi	r25, 0xFF	; 255
    3566:	5f 4f       	sbci	r21, 0xFF	; 255
    3568:	22 0f       	add	r18, r18
    356a:	33 1f       	adc	r19, r19
    356c:	44 1f       	adc	r20, r20
    356e:	aa 1f       	adc	r26, r26
    3570:	a9 f3       	breq	.-22     	; 0x355c <__divsf3_pse+0x10>
    3572:	35 d0       	rcall	.+106    	; 0x35de <__divsf3_pse+0x92>
    3574:	0e 2e       	mov	r0, r30
    3576:	3a f0       	brmi	.+14     	; 0x3586 <__divsf3_pse+0x3a>
    3578:	e0 e8       	ldi	r30, 0x80	; 128
    357a:	32 d0       	rcall	.+100    	; 0x35e0 <__divsf3_pse+0x94>
    357c:	91 50       	subi	r25, 0x01	; 1
    357e:	50 40       	sbci	r21, 0x00	; 0
    3580:	e6 95       	lsr	r30
    3582:	00 1c       	adc	r0, r0
    3584:	ca f7       	brpl	.-14     	; 0x3578 <__divsf3_pse+0x2c>
    3586:	2b d0       	rcall	.+86     	; 0x35de <__divsf3_pse+0x92>
    3588:	fe 2f       	mov	r31, r30
    358a:	29 d0       	rcall	.+82     	; 0x35de <__divsf3_pse+0x92>
    358c:	66 0f       	add	r22, r22
    358e:	77 1f       	adc	r23, r23
    3590:	88 1f       	adc	r24, r24
    3592:	bb 1f       	adc	r27, r27
    3594:	26 17       	cp	r18, r22
    3596:	37 07       	cpc	r19, r23
    3598:	48 07       	cpc	r20, r24
    359a:	ab 07       	cpc	r26, r27
    359c:	b0 e8       	ldi	r27, 0x80	; 128
    359e:	09 f0       	breq	.+2      	; 0x35a2 <__divsf3_pse+0x56>
    35a0:	bb 0b       	sbc	r27, r27
    35a2:	80 2d       	mov	r24, r0
    35a4:	bf 01       	movw	r22, r30
    35a6:	ff 27       	eor	r31, r31
    35a8:	93 58       	subi	r25, 0x83	; 131
    35aa:	5f 4f       	sbci	r21, 0xFF	; 255
    35ac:	3a f0       	brmi	.+14     	; 0x35bc <__divsf3_pse+0x70>
    35ae:	9e 3f       	cpi	r25, 0xFE	; 254
    35b0:	51 05       	cpc	r21, r1
    35b2:	78 f0       	brcs	.+30     	; 0x35d2 <__divsf3_pse+0x86>
    35b4:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__fp_inf>
    35b8:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <__fp_szero>
    35bc:	5f 3f       	cpi	r21, 0xFF	; 255
    35be:	e4 f3       	brlt	.-8      	; 0x35b8 <__divsf3_pse+0x6c>
    35c0:	98 3e       	cpi	r25, 0xE8	; 232
    35c2:	d4 f3       	brlt	.-12     	; 0x35b8 <__divsf3_pse+0x6c>
    35c4:	86 95       	lsr	r24
    35c6:	77 95       	ror	r23
    35c8:	67 95       	ror	r22
    35ca:	b7 95       	ror	r27
    35cc:	f7 95       	ror	r31
    35ce:	9f 5f       	subi	r25, 0xFF	; 255
    35d0:	c9 f7       	brne	.-14     	; 0x35c4 <__divsf3_pse+0x78>
    35d2:	88 0f       	add	r24, r24
    35d4:	91 1d       	adc	r25, r1
    35d6:	96 95       	lsr	r25
    35d8:	87 95       	ror	r24
    35da:	97 f9       	bld	r25, 7
    35dc:	08 95       	ret
    35de:	e1 e0       	ldi	r30, 0x01	; 1
    35e0:	66 0f       	add	r22, r22
    35e2:	77 1f       	adc	r23, r23
    35e4:	88 1f       	adc	r24, r24
    35e6:	bb 1f       	adc	r27, r27
    35e8:	62 17       	cp	r22, r18
    35ea:	73 07       	cpc	r23, r19
    35ec:	84 07       	cpc	r24, r20
    35ee:	ba 07       	cpc	r27, r26
    35f0:	20 f0       	brcs	.+8      	; 0x35fa <__divsf3_pse+0xae>
    35f2:	62 1b       	sub	r22, r18
    35f4:	73 0b       	sbc	r23, r19
    35f6:	84 0b       	sbc	r24, r20
    35f8:	ba 0b       	sbc	r27, r26
    35fa:	ee 1f       	adc	r30, r30
    35fc:	88 f7       	brcc	.-30     	; 0x35e0 <__divsf3_pse+0x94>
    35fe:	e0 95       	com	r30
    3600:	08 95       	ret

00003602 <__fixsfsi>:
    3602:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fixunssfsi>
    3606:	68 94       	set
    3608:	b1 11       	cpse	r27, r1
    360a:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <__fp_szero>
    360e:	08 95       	ret

00003610 <__fixunssfsi>:
    3610:	0e 94 c8 1b 	call	0x3790	; 0x3790 <__fp_splitA>
    3614:	88 f0       	brcs	.+34     	; 0x3638 <__fixunssfsi+0x28>
    3616:	9f 57       	subi	r25, 0x7F	; 127
    3618:	98 f0       	brcs	.+38     	; 0x3640 <__fixunssfsi+0x30>
    361a:	b9 2f       	mov	r27, r25
    361c:	99 27       	eor	r25, r25
    361e:	b7 51       	subi	r27, 0x17	; 23
    3620:	b0 f0       	brcs	.+44     	; 0x364e <__fixunssfsi+0x3e>
    3622:	e1 f0       	breq	.+56     	; 0x365c <__fixunssfsi+0x4c>
    3624:	66 0f       	add	r22, r22
    3626:	77 1f       	adc	r23, r23
    3628:	88 1f       	adc	r24, r24
    362a:	99 1f       	adc	r25, r25
    362c:	1a f0       	brmi	.+6      	; 0x3634 <__fixunssfsi+0x24>
    362e:	ba 95       	dec	r27
    3630:	c9 f7       	brne	.-14     	; 0x3624 <__fixunssfsi+0x14>
    3632:	14 c0       	rjmp	.+40     	; 0x365c <__fixunssfsi+0x4c>
    3634:	b1 30       	cpi	r27, 0x01	; 1
    3636:	91 f0       	breq	.+36     	; 0x365c <__fixunssfsi+0x4c>
    3638:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__fp_zero>
    363c:	b1 e0       	ldi	r27, 0x01	; 1
    363e:	08 95       	ret
    3640:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__fp_zero>
    3644:	67 2f       	mov	r22, r23
    3646:	78 2f       	mov	r23, r24
    3648:	88 27       	eor	r24, r24
    364a:	b8 5f       	subi	r27, 0xF8	; 248
    364c:	39 f0       	breq	.+14     	; 0x365c <__fixunssfsi+0x4c>
    364e:	b9 3f       	cpi	r27, 0xF9	; 249
    3650:	cc f3       	brlt	.-14     	; 0x3644 <__fixunssfsi+0x34>
    3652:	86 95       	lsr	r24
    3654:	77 95       	ror	r23
    3656:	67 95       	ror	r22
    3658:	b3 95       	inc	r27
    365a:	d9 f7       	brne	.-10     	; 0x3652 <__fixunssfsi+0x42>
    365c:	3e f4       	brtc	.+14     	; 0x366c <__fixunssfsi+0x5c>
    365e:	90 95       	com	r25
    3660:	80 95       	com	r24
    3662:	70 95       	com	r23
    3664:	61 95       	neg	r22
    3666:	7f 4f       	sbci	r23, 0xFF	; 255
    3668:	8f 4f       	sbci	r24, 0xFF	; 255
    366a:	9f 4f       	sbci	r25, 0xFF	; 255
    366c:	08 95       	ret

0000366e <__floatunsisf>:
    366e:	e8 94       	clt
    3670:	09 c0       	rjmp	.+18     	; 0x3684 <__floatsisf+0x12>

00003672 <__floatsisf>:
    3672:	97 fb       	bst	r25, 7
    3674:	3e f4       	brtc	.+14     	; 0x3684 <__floatsisf+0x12>
    3676:	90 95       	com	r25
    3678:	80 95       	com	r24
    367a:	70 95       	com	r23
    367c:	61 95       	neg	r22
    367e:	7f 4f       	sbci	r23, 0xFF	; 255
    3680:	8f 4f       	sbci	r24, 0xFF	; 255
    3682:	9f 4f       	sbci	r25, 0xFF	; 255
    3684:	99 23       	and	r25, r25
    3686:	a9 f0       	breq	.+42     	; 0x36b2 <__floatsisf+0x40>
    3688:	f9 2f       	mov	r31, r25
    368a:	96 e9       	ldi	r25, 0x96	; 150
    368c:	bb 27       	eor	r27, r27
    368e:	93 95       	inc	r25
    3690:	f6 95       	lsr	r31
    3692:	87 95       	ror	r24
    3694:	77 95       	ror	r23
    3696:	67 95       	ror	r22
    3698:	b7 95       	ror	r27
    369a:	f1 11       	cpse	r31, r1
    369c:	f8 cf       	rjmp	.-16     	; 0x368e <__floatsisf+0x1c>
    369e:	fa f4       	brpl	.+62     	; 0x36de <__floatsisf+0x6c>
    36a0:	bb 0f       	add	r27, r27
    36a2:	11 f4       	brne	.+4      	; 0x36a8 <__floatsisf+0x36>
    36a4:	60 ff       	sbrs	r22, 0
    36a6:	1b c0       	rjmp	.+54     	; 0x36de <__floatsisf+0x6c>
    36a8:	6f 5f       	subi	r22, 0xFF	; 255
    36aa:	7f 4f       	sbci	r23, 0xFF	; 255
    36ac:	8f 4f       	sbci	r24, 0xFF	; 255
    36ae:	9f 4f       	sbci	r25, 0xFF	; 255
    36b0:	16 c0       	rjmp	.+44     	; 0x36de <__floatsisf+0x6c>
    36b2:	88 23       	and	r24, r24
    36b4:	11 f0       	breq	.+4      	; 0x36ba <__floatsisf+0x48>
    36b6:	96 e9       	ldi	r25, 0x96	; 150
    36b8:	11 c0       	rjmp	.+34     	; 0x36dc <__floatsisf+0x6a>
    36ba:	77 23       	and	r23, r23
    36bc:	21 f0       	breq	.+8      	; 0x36c6 <__floatsisf+0x54>
    36be:	9e e8       	ldi	r25, 0x8E	; 142
    36c0:	87 2f       	mov	r24, r23
    36c2:	76 2f       	mov	r23, r22
    36c4:	05 c0       	rjmp	.+10     	; 0x36d0 <__floatsisf+0x5e>
    36c6:	66 23       	and	r22, r22
    36c8:	71 f0       	breq	.+28     	; 0x36e6 <__floatsisf+0x74>
    36ca:	96 e8       	ldi	r25, 0x86	; 134
    36cc:	86 2f       	mov	r24, r22
    36ce:	70 e0       	ldi	r23, 0x00	; 0
    36d0:	60 e0       	ldi	r22, 0x00	; 0
    36d2:	2a f0       	brmi	.+10     	; 0x36de <__floatsisf+0x6c>
    36d4:	9a 95       	dec	r25
    36d6:	66 0f       	add	r22, r22
    36d8:	77 1f       	adc	r23, r23
    36da:	88 1f       	adc	r24, r24
    36dc:	da f7       	brpl	.-10     	; 0x36d4 <__floatsisf+0x62>
    36de:	88 0f       	add	r24, r24
    36e0:	96 95       	lsr	r25
    36e2:	87 95       	ror	r24
    36e4:	97 f9       	bld	r25, 7
    36e6:	08 95       	ret

000036e8 <__fp_cmp>:
    36e8:	99 0f       	add	r25, r25
    36ea:	00 08       	sbc	r0, r0
    36ec:	55 0f       	add	r21, r21
    36ee:	aa 0b       	sbc	r26, r26
    36f0:	e0 e8       	ldi	r30, 0x80	; 128
    36f2:	fe ef       	ldi	r31, 0xFE	; 254
    36f4:	16 16       	cp	r1, r22
    36f6:	17 06       	cpc	r1, r23
    36f8:	e8 07       	cpc	r30, r24
    36fa:	f9 07       	cpc	r31, r25
    36fc:	c0 f0       	brcs	.+48     	; 0x372e <__fp_cmp+0x46>
    36fe:	12 16       	cp	r1, r18
    3700:	13 06       	cpc	r1, r19
    3702:	e4 07       	cpc	r30, r20
    3704:	f5 07       	cpc	r31, r21
    3706:	98 f0       	brcs	.+38     	; 0x372e <__fp_cmp+0x46>
    3708:	62 1b       	sub	r22, r18
    370a:	73 0b       	sbc	r23, r19
    370c:	84 0b       	sbc	r24, r20
    370e:	95 0b       	sbc	r25, r21
    3710:	39 f4       	brne	.+14     	; 0x3720 <__fp_cmp+0x38>
    3712:	0a 26       	eor	r0, r26
    3714:	61 f0       	breq	.+24     	; 0x372e <__fp_cmp+0x46>
    3716:	23 2b       	or	r18, r19
    3718:	24 2b       	or	r18, r20
    371a:	25 2b       	or	r18, r21
    371c:	21 f4       	brne	.+8      	; 0x3726 <__fp_cmp+0x3e>
    371e:	08 95       	ret
    3720:	0a 26       	eor	r0, r26
    3722:	09 f4       	brne	.+2      	; 0x3726 <__fp_cmp+0x3e>
    3724:	a1 40       	sbci	r26, 0x01	; 1
    3726:	a6 95       	lsr	r26
    3728:	8f ef       	ldi	r24, 0xFF	; 255
    372a:	81 1d       	adc	r24, r1
    372c:	81 1d       	adc	r24, r1
    372e:	08 95       	ret

00003730 <__fp_inf>:
    3730:	97 f9       	bld	r25, 7
    3732:	9f 67       	ori	r25, 0x7F	; 127
    3734:	80 e8       	ldi	r24, 0x80	; 128
    3736:	70 e0       	ldi	r23, 0x00	; 0
    3738:	60 e0       	ldi	r22, 0x00	; 0
    373a:	08 95       	ret

0000373c <__fp_nan>:
    373c:	9f ef       	ldi	r25, 0xFF	; 255
    373e:	80 ec       	ldi	r24, 0xC0	; 192
    3740:	08 95       	ret

00003742 <__fp_pscA>:
    3742:	00 24       	eor	r0, r0
    3744:	0a 94       	dec	r0
    3746:	16 16       	cp	r1, r22
    3748:	17 06       	cpc	r1, r23
    374a:	18 06       	cpc	r1, r24
    374c:	09 06       	cpc	r0, r25
    374e:	08 95       	ret

00003750 <__fp_pscB>:
    3750:	00 24       	eor	r0, r0
    3752:	0a 94       	dec	r0
    3754:	12 16       	cp	r1, r18
    3756:	13 06       	cpc	r1, r19
    3758:	14 06       	cpc	r1, r20
    375a:	05 06       	cpc	r0, r21
    375c:	08 95       	ret

0000375e <__fp_round>:
    375e:	09 2e       	mov	r0, r25
    3760:	03 94       	inc	r0
    3762:	00 0c       	add	r0, r0
    3764:	11 f4       	brne	.+4      	; 0x376a <__fp_round+0xc>
    3766:	88 23       	and	r24, r24
    3768:	52 f0       	brmi	.+20     	; 0x377e <__fp_round+0x20>
    376a:	bb 0f       	add	r27, r27
    376c:	40 f4       	brcc	.+16     	; 0x377e <__fp_round+0x20>
    376e:	bf 2b       	or	r27, r31
    3770:	11 f4       	brne	.+4      	; 0x3776 <__fp_round+0x18>
    3772:	60 ff       	sbrs	r22, 0
    3774:	04 c0       	rjmp	.+8      	; 0x377e <__fp_round+0x20>
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	8f 4f       	sbci	r24, 0xFF	; 255
    377c:	9f 4f       	sbci	r25, 0xFF	; 255
    377e:	08 95       	ret

00003780 <__fp_split3>:
    3780:	57 fd       	sbrc	r21, 7
    3782:	90 58       	subi	r25, 0x80	; 128
    3784:	44 0f       	add	r20, r20
    3786:	55 1f       	adc	r21, r21
    3788:	59 f0       	breq	.+22     	; 0x37a0 <__fp_splitA+0x10>
    378a:	5f 3f       	cpi	r21, 0xFF	; 255
    378c:	71 f0       	breq	.+28     	; 0x37aa <__fp_splitA+0x1a>
    378e:	47 95       	ror	r20

00003790 <__fp_splitA>:
    3790:	88 0f       	add	r24, r24
    3792:	97 fb       	bst	r25, 7
    3794:	99 1f       	adc	r25, r25
    3796:	61 f0       	breq	.+24     	; 0x37b0 <__fp_splitA+0x20>
    3798:	9f 3f       	cpi	r25, 0xFF	; 255
    379a:	79 f0       	breq	.+30     	; 0x37ba <__fp_splitA+0x2a>
    379c:	87 95       	ror	r24
    379e:	08 95       	ret
    37a0:	12 16       	cp	r1, r18
    37a2:	13 06       	cpc	r1, r19
    37a4:	14 06       	cpc	r1, r20
    37a6:	55 1f       	adc	r21, r21
    37a8:	f2 cf       	rjmp	.-28     	; 0x378e <__fp_split3+0xe>
    37aa:	46 95       	lsr	r20
    37ac:	f1 df       	rcall	.-30     	; 0x3790 <__fp_splitA>
    37ae:	08 c0       	rjmp	.+16     	; 0x37c0 <__fp_splitA+0x30>
    37b0:	16 16       	cp	r1, r22
    37b2:	17 06       	cpc	r1, r23
    37b4:	18 06       	cpc	r1, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	f1 cf       	rjmp	.-30     	; 0x379c <__fp_splitA+0xc>
    37ba:	86 95       	lsr	r24
    37bc:	71 05       	cpc	r23, r1
    37be:	61 05       	cpc	r22, r1
    37c0:	08 94       	sec
    37c2:	08 95       	ret

000037c4 <__fp_zero>:
    37c4:	e8 94       	clt

000037c6 <__fp_szero>:
    37c6:	bb 27       	eor	r27, r27
    37c8:	66 27       	eor	r22, r22
    37ca:	77 27       	eor	r23, r23
    37cc:	cb 01       	movw	r24, r22
    37ce:	97 f9       	bld	r25, 7
    37d0:	08 95       	ret

000037d2 <__gesf2>:
    37d2:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__fp_cmp>
    37d6:	08 f4       	brcc	.+2      	; 0x37da <__gesf2+0x8>
    37d8:	8f ef       	ldi	r24, 0xFF	; 255
    37da:	08 95       	ret

000037dc <__mulsf3>:
    37dc:	0e 94 01 1c 	call	0x3802	; 0x3802 <__mulsf3x>
    37e0:	0c 94 af 1b 	jmp	0x375e	; 0x375e <__fp_round>
    37e4:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fp_pscA>
    37e8:	38 f0       	brcs	.+14     	; 0x37f8 <__mulsf3+0x1c>
    37ea:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__fp_pscB>
    37ee:	20 f0       	brcs	.+8      	; 0x37f8 <__mulsf3+0x1c>
    37f0:	95 23       	and	r25, r21
    37f2:	11 f0       	breq	.+4      	; 0x37f8 <__mulsf3+0x1c>
    37f4:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__fp_inf>
    37f8:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__fp_nan>
    37fc:	11 24       	eor	r1, r1
    37fe:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <__fp_szero>

00003802 <__mulsf3x>:
    3802:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__fp_split3>
    3806:	70 f3       	brcs	.-36     	; 0x37e4 <__mulsf3+0x8>

00003808 <__mulsf3_pse>:
    3808:	95 9f       	mul	r25, r21
    380a:	c1 f3       	breq	.-16     	; 0x37fc <__mulsf3+0x20>
    380c:	95 0f       	add	r25, r21
    380e:	50 e0       	ldi	r21, 0x00	; 0
    3810:	55 1f       	adc	r21, r21
    3812:	62 9f       	mul	r22, r18
    3814:	f0 01       	movw	r30, r0
    3816:	72 9f       	mul	r23, r18
    3818:	bb 27       	eor	r27, r27
    381a:	f0 0d       	add	r31, r0
    381c:	b1 1d       	adc	r27, r1
    381e:	63 9f       	mul	r22, r19
    3820:	aa 27       	eor	r26, r26
    3822:	f0 0d       	add	r31, r0
    3824:	b1 1d       	adc	r27, r1
    3826:	aa 1f       	adc	r26, r26
    3828:	64 9f       	mul	r22, r20
    382a:	66 27       	eor	r22, r22
    382c:	b0 0d       	add	r27, r0
    382e:	a1 1d       	adc	r26, r1
    3830:	66 1f       	adc	r22, r22
    3832:	82 9f       	mul	r24, r18
    3834:	22 27       	eor	r18, r18
    3836:	b0 0d       	add	r27, r0
    3838:	a1 1d       	adc	r26, r1
    383a:	62 1f       	adc	r22, r18
    383c:	73 9f       	mul	r23, r19
    383e:	b0 0d       	add	r27, r0
    3840:	a1 1d       	adc	r26, r1
    3842:	62 1f       	adc	r22, r18
    3844:	83 9f       	mul	r24, r19
    3846:	a0 0d       	add	r26, r0
    3848:	61 1d       	adc	r22, r1
    384a:	22 1f       	adc	r18, r18
    384c:	74 9f       	mul	r23, r20
    384e:	33 27       	eor	r19, r19
    3850:	a0 0d       	add	r26, r0
    3852:	61 1d       	adc	r22, r1
    3854:	23 1f       	adc	r18, r19
    3856:	84 9f       	mul	r24, r20
    3858:	60 0d       	add	r22, r0
    385a:	21 1d       	adc	r18, r1
    385c:	82 2f       	mov	r24, r18
    385e:	76 2f       	mov	r23, r22
    3860:	6a 2f       	mov	r22, r26
    3862:	11 24       	eor	r1, r1
    3864:	9f 57       	subi	r25, 0x7F	; 127
    3866:	50 40       	sbci	r21, 0x00	; 0
    3868:	9a f0       	brmi	.+38     	; 0x3890 <__mulsf3_pse+0x88>
    386a:	f1 f0       	breq	.+60     	; 0x38a8 <__mulsf3_pse+0xa0>
    386c:	88 23       	and	r24, r24
    386e:	4a f0       	brmi	.+18     	; 0x3882 <__mulsf3_pse+0x7a>
    3870:	ee 0f       	add	r30, r30
    3872:	ff 1f       	adc	r31, r31
    3874:	bb 1f       	adc	r27, r27
    3876:	66 1f       	adc	r22, r22
    3878:	77 1f       	adc	r23, r23
    387a:	88 1f       	adc	r24, r24
    387c:	91 50       	subi	r25, 0x01	; 1
    387e:	50 40       	sbci	r21, 0x00	; 0
    3880:	a9 f7       	brne	.-22     	; 0x386c <__mulsf3_pse+0x64>
    3882:	9e 3f       	cpi	r25, 0xFE	; 254
    3884:	51 05       	cpc	r21, r1
    3886:	80 f0       	brcs	.+32     	; 0x38a8 <__mulsf3_pse+0xa0>
    3888:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__fp_inf>
    388c:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <__fp_szero>
    3890:	5f 3f       	cpi	r21, 0xFF	; 255
    3892:	e4 f3       	brlt	.-8      	; 0x388c <__mulsf3_pse+0x84>
    3894:	98 3e       	cpi	r25, 0xE8	; 232
    3896:	d4 f3       	brlt	.-12     	; 0x388c <__mulsf3_pse+0x84>
    3898:	86 95       	lsr	r24
    389a:	77 95       	ror	r23
    389c:	67 95       	ror	r22
    389e:	b7 95       	ror	r27
    38a0:	f7 95       	ror	r31
    38a2:	e7 95       	ror	r30
    38a4:	9f 5f       	subi	r25, 0xFF	; 255
    38a6:	c1 f7       	brne	.-16     	; 0x3898 <__mulsf3_pse+0x90>
    38a8:	fe 2b       	or	r31, r30
    38aa:	88 0f       	add	r24, r24
    38ac:	91 1d       	adc	r25, r1
    38ae:	96 95       	lsr	r25
    38b0:	87 95       	ror	r24
    38b2:	97 f9       	bld	r25, 7
    38b4:	08 95       	ret

000038b6 <__tablejump2__>:
    38b6:	ee 0f       	add	r30, r30
    38b8:	ff 1f       	adc	r31, r31
    38ba:	88 1f       	adc	r24, r24
    38bc:	8b bf       	out	0x3b, r24	; 59
    38be:	07 90       	elpm	r0, Z+
    38c0:	f6 91       	elpm	r31, Z
    38c2:	e0 2d       	mov	r30, r0
    38c4:	19 94       	eijmp

000038c6 <memcpy>:
    38c6:	fb 01       	movw	r30, r22
    38c8:	dc 01       	movw	r26, r24
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <memcpy+0xa>
    38cc:	01 90       	ld	r0, Z+
    38ce:	0d 92       	st	X+, r0
    38d0:	41 50       	subi	r20, 0x01	; 1
    38d2:	50 40       	sbci	r21, 0x00	; 0
    38d4:	d8 f7       	brcc	.-10     	; 0x38cc <memcpy+0x6>
    38d6:	08 95       	ret

000038d8 <memset>:
    38d8:	dc 01       	movw	r26, r24
    38da:	01 c0       	rjmp	.+2      	; 0x38de <memset+0x6>
    38dc:	6d 93       	st	X+, r22
    38de:	41 50       	subi	r20, 0x01	; 1
    38e0:	50 40       	sbci	r21, 0x00	; 0
    38e2:	e0 f7       	brcc	.-8      	; 0x38dc <memset+0x4>
    38e4:	08 95       	ret

000038e6 <__itoa_ncheck>:
    38e6:	bb 27       	eor	r27, r27
    38e8:	4a 30       	cpi	r20, 0x0A	; 10
    38ea:	31 f4       	brne	.+12     	; 0x38f8 <__itoa_ncheck+0x12>
    38ec:	99 23       	and	r25, r25
    38ee:	22 f4       	brpl	.+8      	; 0x38f8 <__itoa_ncheck+0x12>
    38f0:	bd e2       	ldi	r27, 0x2D	; 45
    38f2:	90 95       	com	r25
    38f4:	81 95       	neg	r24
    38f6:	9f 4f       	sbci	r25, 0xFF	; 255
    38f8:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__utoa_common>

000038fc <__utoa_ncheck>:
    38fc:	bb 27       	eor	r27, r27

000038fe <__utoa_common>:
    38fe:	fb 01       	movw	r30, r22
    3900:	55 27       	eor	r21, r21
    3902:	aa 27       	eor	r26, r26
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	aa 1f       	adc	r26, r26
    390a:	a4 17       	cp	r26, r20
    390c:	10 f0       	brcs	.+4      	; 0x3912 <__utoa_common+0x14>
    390e:	a4 1b       	sub	r26, r20
    3910:	83 95       	inc	r24
    3912:	50 51       	subi	r21, 0x10	; 16
    3914:	b9 f7       	brne	.-18     	; 0x3904 <__utoa_common+0x6>
    3916:	a0 5d       	subi	r26, 0xD0	; 208
    3918:	aa 33       	cpi	r26, 0x3A	; 58
    391a:	08 f0       	brcs	.+2      	; 0x391e <__utoa_common+0x20>
    391c:	a9 5d       	subi	r26, 0xD9	; 217
    391e:	a1 93       	st	Z+, r26
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	79 f7       	brne	.-34     	; 0x3902 <__utoa_common+0x4>
    3924:	b1 11       	cpse	r27, r1
    3926:	b1 93       	st	Z+, r27
    3928:	11 92       	st	Z+, r1
    392a:	cb 01       	movw	r24, r22
    392c:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <strrev>

00003930 <strrev>:
    3930:	dc 01       	movw	r26, r24
    3932:	fc 01       	movw	r30, r24
    3934:	67 2f       	mov	r22, r23
    3936:	71 91       	ld	r23, Z+
    3938:	77 23       	and	r23, r23
    393a:	e1 f7       	brne	.-8      	; 0x3934 <strrev+0x4>
    393c:	32 97       	sbiw	r30, 0x02	; 2
    393e:	04 c0       	rjmp	.+8      	; 0x3948 <strrev+0x18>
    3940:	7c 91       	ld	r23, X
    3942:	6d 93       	st	X+, r22
    3944:	70 83       	st	Z, r23
    3946:	62 91       	ld	r22, -Z
    3948:	ae 17       	cp	r26, r30
    394a:	bf 07       	cpc	r27, r31
    394c:	c8 f3       	brcs	.-14     	; 0x3940 <strrev+0x10>
    394e:	08 95       	ret

00003950 <_exit>:
    3950:	f8 94       	cli

00003952 <__stop_program>:
    3952:	ff cf       	rjmp	.-2      	; 0x3952 <__stop_program>
